// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packets.proto

#include "packets.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace awd {
namespace net {
constexpr CreateLobbyRequest::CreateLobbyRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : playername_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CreateLobbyRequestDefaultTypeInternal {
  constexpr CreateLobbyRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateLobbyRequestDefaultTypeInternal() {}
  union {
    CreateLobbyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateLobbyRequestDefaultTypeInternal _CreateLobbyRequest_default_instance_;
constexpr KeepAlive::KeepAlive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : playerid_(0)
  , testid_(0){}
struct KeepAliveDefaultTypeInternal {
  constexpr KeepAliveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KeepAliveDefaultTypeInternal() {}
  union {
    KeepAlive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KeepAliveDefaultTypeInternal _KeepAlive_default_instance_;
constexpr PacketWrapper::PacketWrapper(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct PacketWrapperDefaultTypeInternal {
  constexpr PacketWrapperDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PacketWrapperDefaultTypeInternal() {}
  union {
    PacketWrapper _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PacketWrapperDefaultTypeInternal _PacketWrapper_default_instance_;
}  // namespace net
}  // namespace awd
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_packets_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_packets_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_packets_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_packets_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::awd::net::CreateLobbyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::awd::net::CreateLobbyRequest, playername_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::awd::net::KeepAlive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::awd::net::KeepAlive, playerid_),
  PROTOBUF_FIELD_OFFSET(::awd::net::KeepAlive, testid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::awd::net::PacketWrapper, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::awd::net::PacketWrapper, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::awd::net::PacketWrapper, packet_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::awd::net::CreateLobbyRequest)},
  { 6, -1, sizeof(::awd::net::KeepAlive)},
  { 13, -1, sizeof(::awd::net::PacketWrapper)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::awd::net::_CreateLobbyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::awd::net::_KeepAlive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::awd::net::_PacketWrapper_default_instance_),
};

const char descriptor_table_protodef_packets_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rpackets.proto\022\007awd.net\"(\n\022CreateLobbyR"
  "equest\022\022\n\nplayerName\030\001 \001(\t\"-\n\tKeepAlive\022"
  "\020\n\010playerId\030\001 \001(\005\022\016\n\006testId\030\002 \001(\005\"~\n\rPac"
  "ketWrapper\0229\n\022createLobbyRequest\030\001 \001(\0132\033"
  ".awd.net.CreateLobbyRequestH\000\022(\n\tkeepAli"
  "ve\030\350\007 \001(\0132\022.awd.net.KeepAliveH\000B\010\n\006packe"
  "tB\024\n\020gg.aswedrown.netP\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_packets_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_packets_2eproto = {
  false, false, 271, descriptor_table_protodef_packets_2eproto, "packets.proto", 
  &descriptor_table_packets_2eproto_once, nullptr, 0, 3,
  schemas, file_default_instances, TableStruct_packets_2eproto::offsets,
  file_level_metadata_packets_2eproto, file_level_enum_descriptors_packets_2eproto, file_level_service_descriptors_packets_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_packets_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_packets_2eproto);
  return descriptor_table_packets_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_packets_2eproto(&descriptor_table_packets_2eproto);
namespace awd {
namespace net {

// ===================================================================

class CreateLobbyRequest::_Internal {
 public:
};

CreateLobbyRequest::CreateLobbyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:awd.net.CreateLobbyRequest)
}
CreateLobbyRequest::CreateLobbyRequest(const CreateLobbyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  playername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_playername().empty()) {
    playername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_playername(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:awd.net.CreateLobbyRequest)
}

void CreateLobbyRequest::SharedCtor() {
playername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreateLobbyRequest::~CreateLobbyRequest() {
  // @@protoc_insertion_point(destructor:awd.net.CreateLobbyRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateLobbyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  playername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateLobbyRequest::ArenaDtor(void* object) {
  CreateLobbyRequest* _this = reinterpret_cast< CreateLobbyRequest* >(object);
  (void)_this;
}
void CreateLobbyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateLobbyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateLobbyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:awd.net.CreateLobbyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playername_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateLobbyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string playerName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_playername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "awd.net.CreateLobbyRequest.playerName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateLobbyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:awd.net.CreateLobbyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string playerName = 1;
  if (this->playername().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_playername().data(), static_cast<int>(this->_internal_playername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "awd.net.CreateLobbyRequest.playerName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_playername(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:awd.net.CreateLobbyRequest)
  return target;
}

size_t CreateLobbyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:awd.net.CreateLobbyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string playerName = 1;
  if (this->playername().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playername());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateLobbyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:awd.net.CreateLobbyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateLobbyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateLobbyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:awd.net.CreateLobbyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:awd.net.CreateLobbyRequest)
    MergeFrom(*source);
  }
}

void CreateLobbyRequest::MergeFrom(const CreateLobbyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:awd.net.CreateLobbyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playername().size() > 0) {
    _internal_set_playername(from._internal_playername());
  }
}

void CreateLobbyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:awd.net.CreateLobbyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateLobbyRequest::CopyFrom(const CreateLobbyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:awd.net.CreateLobbyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateLobbyRequest::IsInitialized() const {
  return true;
}

void CreateLobbyRequest::InternalSwap(CreateLobbyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  playername_.Swap(&other->playername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateLobbyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class KeepAlive::_Internal {
 public:
};

KeepAlive::KeepAlive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:awd.net.KeepAlive)
}
KeepAlive::KeepAlive(const KeepAlive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&testid_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(testid_));
  // @@protoc_insertion_point(copy_constructor:awd.net.KeepAlive)
}

void KeepAlive::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&playerid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&testid_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(testid_));
}

KeepAlive::~KeepAlive() {
  // @@protoc_insertion_point(destructor:awd.net.KeepAlive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KeepAlive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void KeepAlive::ArenaDtor(void* object) {
  KeepAlive* _this = reinterpret_cast< KeepAlive* >(object);
  (void)_this;
}
void KeepAlive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeepAlive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KeepAlive::Clear() {
// @@protoc_insertion_point(message_clear_start:awd.net.KeepAlive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&testid_) -
      reinterpret_cast<char*>(&playerid_)) + sizeof(testid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeepAlive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 testId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          testid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeepAlive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:awd.net.KeepAlive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerId = 1;
  if (this->playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerid(), target);
  }

  // int32 testId = 2;
  if (this->testid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_testid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:awd.net.KeepAlive)
  return target;
}

size_t KeepAlive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:awd.net.KeepAlive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 playerId = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playerid());
  }

  // int32 testId = 2;
  if (this->testid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_testid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeepAlive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:awd.net.KeepAlive)
  GOOGLE_DCHECK_NE(&from, this);
  const KeepAlive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeepAlive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:awd.net.KeepAlive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:awd.net.KeepAlive)
    MergeFrom(*source);
  }
}

void KeepAlive::MergeFrom(const KeepAlive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:awd.net.KeepAlive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playerid() != 0) {
    _internal_set_playerid(from._internal_playerid());
  }
  if (from.testid() != 0) {
    _internal_set_testid(from._internal_testid());
  }
}

void KeepAlive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:awd.net.KeepAlive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeepAlive::CopyFrom(const KeepAlive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:awd.net.KeepAlive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeepAlive::IsInitialized() const {
  return true;
}

void KeepAlive::InternalSwap(KeepAlive* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KeepAlive, testid_)
      + sizeof(KeepAlive::testid_)
      - PROTOBUF_FIELD_OFFSET(KeepAlive, playerid_)>(
          reinterpret_cast<char*>(&playerid_),
          reinterpret_cast<char*>(&other->playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KeepAlive::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PacketWrapper::_Internal {
 public:
  static const ::awd::net::CreateLobbyRequest& createlobbyrequest(const PacketWrapper* msg);
  static const ::awd::net::KeepAlive& keepalive(const PacketWrapper* msg);
};

const ::awd::net::CreateLobbyRequest&
PacketWrapper::_Internal::createlobbyrequest(const PacketWrapper* msg) {
  return *msg->packet_.createlobbyrequest_;
}
const ::awd::net::KeepAlive&
PacketWrapper::_Internal::keepalive(const PacketWrapper* msg) {
  return *msg->packet_.keepalive_;
}
void PacketWrapper::set_allocated_createlobbyrequest(::awd::net::CreateLobbyRequest* createlobbyrequest) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (createlobbyrequest) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(createlobbyrequest);
    if (message_arena != submessage_arena) {
      createlobbyrequest = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, createlobbyrequest, submessage_arena);
    }
    set_has_createlobbyrequest();
    packet_.createlobbyrequest_ = createlobbyrequest;
  }
  // @@protoc_insertion_point(field_set_allocated:awd.net.PacketWrapper.createLobbyRequest)
}
void PacketWrapper::set_allocated_keepalive(::awd::net::KeepAlive* keepalive) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (keepalive) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(keepalive);
    if (message_arena != submessage_arena) {
      keepalive = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, keepalive, submessage_arena);
    }
    set_has_keepalive();
    packet_.keepalive_ = keepalive;
  }
  // @@protoc_insertion_point(field_set_allocated:awd.net.PacketWrapper.keepAlive)
}
PacketWrapper::PacketWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:awd.net.PacketWrapper)
}
PacketWrapper::PacketWrapper(const PacketWrapper& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_packet();
  switch (from.packet_case()) {
    case kCreateLobbyRequest: {
      _internal_mutable_createlobbyrequest()->::awd::net::CreateLobbyRequest::MergeFrom(from._internal_createlobbyrequest());
      break;
    }
    case kKeepAlive: {
      _internal_mutable_keepalive()->::awd::net::KeepAlive::MergeFrom(from._internal_keepalive());
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:awd.net.PacketWrapper)
}

void PacketWrapper::SharedCtor() {
clear_has_packet();
}

PacketWrapper::~PacketWrapper() {
  // @@protoc_insertion_point(destructor:awd.net.PacketWrapper)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PacketWrapper::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_packet()) {
    clear_packet();
  }
}

void PacketWrapper::ArenaDtor(void* object) {
  PacketWrapper* _this = reinterpret_cast< PacketWrapper* >(object);
  (void)_this;
}
void PacketWrapper::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PacketWrapper::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PacketWrapper::clear_packet() {
// @@protoc_insertion_point(one_of_clear_start:awd.net.PacketWrapper)
  switch (packet_case()) {
    case kCreateLobbyRequest: {
      if (GetArena() == nullptr) {
        delete packet_.createlobbyrequest_;
      }
      break;
    }
    case kKeepAlive: {
      if (GetArena() == nullptr) {
        delete packet_.keepalive_;
      }
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PACKET_NOT_SET;
}


void PacketWrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:awd.net.PacketWrapper)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_packet();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PacketWrapper::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .awd.net.CreateLobbyRequest createLobbyRequest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_createlobbyrequest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .awd.net.KeepAlive keepAlive = 1000;
      case 1000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_keepalive(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PacketWrapper::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:awd.net.PacketWrapper)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .awd.net.CreateLobbyRequest createLobbyRequest = 1;
  if (_internal_has_createlobbyrequest()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::createlobbyrequest(this), target, stream);
  }

  // .awd.net.KeepAlive keepAlive = 1000;
  if (_internal_has_keepalive()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1000, _Internal::keepalive(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:awd.net.PacketWrapper)
  return target;
}

size_t PacketWrapper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:awd.net.PacketWrapper)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (packet_case()) {
    // .awd.net.CreateLobbyRequest createLobbyRequest = 1;
    case kCreateLobbyRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.createlobbyrequest_);
      break;
    }
    // .awd.net.KeepAlive keepAlive = 1000;
    case kKeepAlive: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.keepalive_);
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PacketWrapper::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:awd.net.PacketWrapper)
  GOOGLE_DCHECK_NE(&from, this);
  const PacketWrapper* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PacketWrapper>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:awd.net.PacketWrapper)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:awd.net.PacketWrapper)
    MergeFrom(*source);
  }
}

void PacketWrapper::MergeFrom(const PacketWrapper& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:awd.net.PacketWrapper)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.packet_case()) {
    case kCreateLobbyRequest: {
      _internal_mutable_createlobbyrequest()->::awd::net::CreateLobbyRequest::MergeFrom(from._internal_createlobbyrequest());
      break;
    }
    case kKeepAlive: {
      _internal_mutable_keepalive()->::awd::net::KeepAlive::MergeFrom(from._internal_keepalive());
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
}

void PacketWrapper::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:awd.net.PacketWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PacketWrapper::CopyFrom(const PacketWrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:awd.net.PacketWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketWrapper::IsInitialized() const {
  return true;
}

void PacketWrapper::InternalSwap(PacketWrapper* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(packet_, other->packet_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PacketWrapper::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace net
}  // namespace awd
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::awd::net::CreateLobbyRequest* Arena::CreateMaybeMessage< ::awd::net::CreateLobbyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::awd::net::CreateLobbyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::awd::net::KeepAlive* Arena::CreateMaybeMessage< ::awd::net::KeepAlive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::awd::net::KeepAlive >(arena);
}
template<> PROTOBUF_NOINLINE ::awd::net::PacketWrapper* Arena::CreateMaybeMessage< ::awd::net::PacketWrapper >(Arena* arena) {
  return Arena::CreateMessageInternal< ::awd::net::PacketWrapper >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
