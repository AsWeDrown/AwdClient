// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packets.proto

#include "packets.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace awd {
namespace net {
constexpr Ping::Ping(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : test_id_(0u)
  , rtt_(0u){}
struct PingDefaultTypeInternal {
  constexpr PingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PingDefaultTypeInternal() {}
  union {
    Ping _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PingDefaultTypeInternal _Ping_default_instance_;
constexpr Pong::Pong(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : test_id_(0u){}
struct PongDefaultTypeInternal {
  constexpr PongDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PongDefaultTypeInternal() {}
  union {
    Pong _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PongDefaultTypeInternal _Pong_default_instance_;
constexpr HandshakeRequest::HandshakeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : protocol_version_(0u){}
struct HandshakeRequestDefaultTypeInternal {
  constexpr HandshakeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HandshakeRequestDefaultTypeInternal() {}
  union {
    HandshakeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HandshakeRequestDefaultTypeInternal _HandshakeRequest_default_instance_;
constexpr HandshakeResponse::HandshakeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : protocol_version_(0){}
struct HandshakeResponseDefaultTypeInternal {
  constexpr HandshakeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HandshakeResponseDefaultTypeInternal() {}
  union {
    HandshakeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HandshakeResponseDefaultTypeInternal _HandshakeResponse_default_instance_;
constexpr CreateLobbyRequest::CreateLobbyRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CreateLobbyRequestDefaultTypeInternal {
  constexpr CreateLobbyRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateLobbyRequestDefaultTypeInternal() {}
  union {
    CreateLobbyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateLobbyRequestDefaultTypeInternal _CreateLobbyRequest_default_instance_;
constexpr CreateLobbyResponse::CreateLobbyResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lobby_id_(0)
  , player_id_(0u)
  , character_(0u){}
struct CreateLobbyResponseDefaultTypeInternal {
  constexpr CreateLobbyResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateLobbyResponseDefaultTypeInternal() {}
  union {
    CreateLobbyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateLobbyResponseDefaultTypeInternal _CreateLobbyResponse_default_instance_;
constexpr JoinLobbyRequest::JoinLobbyRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lobby_id_(0u){}
struct JoinLobbyRequestDefaultTypeInternal {
  constexpr JoinLobbyRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JoinLobbyRequestDefaultTypeInternal() {}
  union {
    JoinLobbyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JoinLobbyRequestDefaultTypeInternal _JoinLobbyRequest_default_instance_;
constexpr JoinLobbyResponse_OthersNamesEntry_DoNotUse::JoinLobbyResponse_OthersNamesEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct JoinLobbyResponse_OthersNamesEntry_DoNotUseDefaultTypeInternal {
  constexpr JoinLobbyResponse_OthersNamesEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JoinLobbyResponse_OthersNamesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    JoinLobbyResponse_OthersNamesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JoinLobbyResponse_OthersNamesEntry_DoNotUseDefaultTypeInternal _JoinLobbyResponse_OthersNamesEntry_DoNotUse_default_instance_;
constexpr JoinLobbyResponse_OthersCharactersEntry_DoNotUse::JoinLobbyResponse_OthersCharactersEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct JoinLobbyResponse_OthersCharactersEntry_DoNotUseDefaultTypeInternal {
  constexpr JoinLobbyResponse_OthersCharactersEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JoinLobbyResponse_OthersCharactersEntry_DoNotUseDefaultTypeInternal() {}
  union {
    JoinLobbyResponse_OthersCharactersEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JoinLobbyResponse_OthersCharactersEntry_DoNotUseDefaultTypeInternal _JoinLobbyResponse_OthersCharactersEntry_DoNotUse_default_instance_;
constexpr JoinLobbyResponse::JoinLobbyResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : others_names_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , others_characters_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , player_id_(0)
  , character_(0u)
  , host_id_(0u){}
struct JoinLobbyResponseDefaultTypeInternal {
  constexpr JoinLobbyResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JoinLobbyResponseDefaultTypeInternal() {}
  union {
    JoinLobbyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JoinLobbyResponseDefaultTypeInternal _JoinLobbyResponse_default_instance_;
constexpr LeaveLobbyRequest::LeaveLobbyRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lobby_id_(0u)
  , player_id_(0u){}
struct LeaveLobbyRequestDefaultTypeInternal {
  constexpr LeaveLobbyRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LeaveLobbyRequestDefaultTypeInternal() {}
  union {
    LeaveLobbyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LeaveLobbyRequestDefaultTypeInternal _LeaveLobbyRequest_default_instance_;
constexpr LeaveLobbyResponse::LeaveLobbyResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_code_(0){}
struct LeaveLobbyResponseDefaultTypeInternal {
  constexpr LeaveLobbyResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LeaveLobbyResponseDefaultTypeInternal() {}
  union {
    LeaveLobbyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LeaveLobbyResponseDefaultTypeInternal _LeaveLobbyResponse_default_instance_;
constexpr KickedFromLobby::KickedFromLobby(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reason_(0u){}
struct KickedFromLobbyDefaultTypeInternal {
  constexpr KickedFromLobbyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KickedFromLobbyDefaultTypeInternal() {}
  union {
    KickedFromLobby _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KickedFromLobbyDefaultTypeInternal _KickedFromLobby_default_instance_;
constexpr UpdatedMembersList_NewAllNamesEntry_DoNotUse::UpdatedMembersList_NewAllNamesEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct UpdatedMembersList_NewAllNamesEntry_DoNotUseDefaultTypeInternal {
  constexpr UpdatedMembersList_NewAllNamesEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdatedMembersList_NewAllNamesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    UpdatedMembersList_NewAllNamesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdatedMembersList_NewAllNamesEntry_DoNotUseDefaultTypeInternal _UpdatedMembersList_NewAllNamesEntry_DoNotUse_default_instance_;
constexpr UpdatedMembersList_NewAllCharactersEntry_DoNotUse::UpdatedMembersList_NewAllCharactersEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct UpdatedMembersList_NewAllCharactersEntry_DoNotUseDefaultTypeInternal {
  constexpr UpdatedMembersList_NewAllCharactersEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdatedMembersList_NewAllCharactersEntry_DoNotUseDefaultTypeInternal() {}
  union {
    UpdatedMembersList_NewAllCharactersEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdatedMembersList_NewAllCharactersEntry_DoNotUseDefaultTypeInternal _UpdatedMembersList_NewAllCharactersEntry_DoNotUse_default_instance_;
constexpr UpdatedMembersList::UpdatedMembersList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : new_all_names_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , new_all_characters_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct UpdatedMembersListDefaultTypeInternal {
  constexpr UpdatedMembersListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdatedMembersListDefaultTypeInternal() {}
  union {
    UpdatedMembersList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdatedMembersListDefaultTypeInternal _UpdatedMembersList_default_instance_;
constexpr SpawnPlayer::SpawnPlayer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(0u)
  , entity_id_(0u){}
struct SpawnPlayerDefaultTypeInternal {
  constexpr SpawnPlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpawnPlayerDefaultTypeInternal() {}
  union {
    SpawnPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpawnPlayerDefaultTypeInternal _SpawnPlayer_default_instance_;
constexpr ClientRelativeMove::ClientRelativeMove(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lobby_id_(0u)
  , player_id_(0u)
  , direction_(0u){}
struct ClientRelativeMoveDefaultTypeInternal {
  constexpr ClientRelativeMoveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClientRelativeMoveDefaultTypeInternal() {}
  union {
    ClientRelativeMove _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClientRelativeMoveDefaultTypeInternal _ClientRelativeMove_default_instance_;
constexpr UpdateEntityPosition::UpdateEntityPosition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entity_id_(0u)
  , pos_x_(0)
  , pos_y_(0){}
struct UpdateEntityPositionDefaultTypeInternal {
  constexpr UpdateEntityPositionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateEntityPositionDefaultTypeInternal() {}
  union {
    UpdateEntityPosition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateEntityPositionDefaultTypeInternal _UpdateEntityPosition_default_instance_;
constexpr PacketWrapper::PacketWrapper(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sequence_(0u)
  , ack_(0u)
  , ack_bitfield_(PROTOBUF_ULONGLONG(0))
  , _oneof_case_{}{}
struct PacketWrapperDefaultTypeInternal {
  constexpr PacketWrapperDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PacketWrapperDefaultTypeInternal() {}
  union {
    PacketWrapper _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PacketWrapperDefaultTypeInternal _PacketWrapper_default_instance_;
}  // namespace net
}  // namespace awd
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_packets_2eproto[20];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_packets_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_packets_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_packets_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::awd::net::Ping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::awd::net::Ping, test_id_),
  PROTOBUF_FIELD_OFFSET(::awd::net::Ping, rtt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::awd::net::Pong, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::awd::net::Pong, test_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::awd::net::HandshakeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::awd::net::HandshakeRequest, protocol_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::awd::net::HandshakeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::awd::net::HandshakeResponse, protocol_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::awd::net::CreateLobbyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::awd::net::CreateLobbyRequest, player_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::awd::net::CreateLobbyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::awd::net::CreateLobbyResponse, lobby_id_),
  PROTOBUF_FIELD_OFFSET(::awd::net::CreateLobbyResponse, player_id_),
  PROTOBUF_FIELD_OFFSET(::awd::net::CreateLobbyResponse, character_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::awd::net::JoinLobbyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::awd::net::JoinLobbyRequest, lobby_id_),
  PROTOBUF_FIELD_OFFSET(::awd::net::JoinLobbyRequest, player_name_),
  PROTOBUF_FIELD_OFFSET(::awd::net::JoinLobbyResponse_OthersNamesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::awd::net::JoinLobbyResponse_OthersNamesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::awd::net::JoinLobbyResponse_OthersNamesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::awd::net::JoinLobbyResponse_OthersNamesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::awd::net::JoinLobbyResponse_OthersCharactersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::awd::net::JoinLobbyResponse_OthersCharactersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::awd::net::JoinLobbyResponse_OthersCharactersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::awd::net::JoinLobbyResponse_OthersCharactersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::awd::net::JoinLobbyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::awd::net::JoinLobbyResponse, player_id_),
  PROTOBUF_FIELD_OFFSET(::awd::net::JoinLobbyResponse, character_),
  PROTOBUF_FIELD_OFFSET(::awd::net::JoinLobbyResponse, host_id_),
  PROTOBUF_FIELD_OFFSET(::awd::net::JoinLobbyResponse, others_names_),
  PROTOBUF_FIELD_OFFSET(::awd::net::JoinLobbyResponse, others_characters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::awd::net::LeaveLobbyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::awd::net::LeaveLobbyRequest, lobby_id_),
  PROTOBUF_FIELD_OFFSET(::awd::net::LeaveLobbyRequest, player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::awd::net::LeaveLobbyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::awd::net::LeaveLobbyResponse, status_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::awd::net::KickedFromLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::awd::net::KickedFromLobby, reason_),
  PROTOBUF_FIELD_OFFSET(::awd::net::UpdatedMembersList_NewAllNamesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::awd::net::UpdatedMembersList_NewAllNamesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::awd::net::UpdatedMembersList_NewAllNamesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::awd::net::UpdatedMembersList_NewAllNamesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::awd::net::UpdatedMembersList_NewAllCharactersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::awd::net::UpdatedMembersList_NewAllCharactersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::awd::net::UpdatedMembersList_NewAllCharactersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::awd::net::UpdatedMembersList_NewAllCharactersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::awd::net::UpdatedMembersList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::awd::net::UpdatedMembersList, new_all_names_),
  PROTOBUF_FIELD_OFFSET(::awd::net::UpdatedMembersList, new_all_characters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::awd::net::SpawnPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::awd::net::SpawnPlayer, player_id_),
  PROTOBUF_FIELD_OFFSET(::awd::net::SpawnPlayer, entity_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::awd::net::ClientRelativeMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::awd::net::ClientRelativeMove, lobby_id_),
  PROTOBUF_FIELD_OFFSET(::awd::net::ClientRelativeMove, player_id_),
  PROTOBUF_FIELD_OFFSET(::awd::net::ClientRelativeMove, direction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::awd::net::UpdateEntityPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::awd::net::UpdateEntityPosition, entity_id_),
  PROTOBUF_FIELD_OFFSET(::awd::net::UpdateEntityPosition, pos_x_),
  PROTOBUF_FIELD_OFFSET(::awd::net::UpdateEntityPosition, pos_y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::awd::net::PacketWrapper, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::awd::net::PacketWrapper, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::awd::net::PacketWrapper, sequence_),
  PROTOBUF_FIELD_OFFSET(::awd::net::PacketWrapper, ack_),
  PROTOBUF_FIELD_OFFSET(::awd::net::PacketWrapper, ack_bitfield_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::awd::net::PacketWrapper, packet_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::awd::net::Ping)},
  { 7, -1, sizeof(::awd::net::Pong)},
  { 13, -1, sizeof(::awd::net::HandshakeRequest)},
  { 19, -1, sizeof(::awd::net::HandshakeResponse)},
  { 25, -1, sizeof(::awd::net::CreateLobbyRequest)},
  { 31, -1, sizeof(::awd::net::CreateLobbyResponse)},
  { 39, -1, sizeof(::awd::net::JoinLobbyRequest)},
  { 46, 53, sizeof(::awd::net::JoinLobbyResponse_OthersNamesEntry_DoNotUse)},
  { 55, 62, sizeof(::awd::net::JoinLobbyResponse_OthersCharactersEntry_DoNotUse)},
  { 64, -1, sizeof(::awd::net::JoinLobbyResponse)},
  { 74, -1, sizeof(::awd::net::LeaveLobbyRequest)},
  { 81, -1, sizeof(::awd::net::LeaveLobbyResponse)},
  { 87, -1, sizeof(::awd::net::KickedFromLobby)},
  { 93, 100, sizeof(::awd::net::UpdatedMembersList_NewAllNamesEntry_DoNotUse)},
  { 102, 109, sizeof(::awd::net::UpdatedMembersList_NewAllCharactersEntry_DoNotUse)},
  { 111, -1, sizeof(::awd::net::UpdatedMembersList)},
  { 118, -1, sizeof(::awd::net::SpawnPlayer)},
  { 125, -1, sizeof(::awd::net::ClientRelativeMove)},
  { 133, -1, sizeof(::awd::net::UpdateEntityPosition)},
  { 141, -1, sizeof(::awd::net::PacketWrapper)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::awd::net::_Ping_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::awd::net::_Pong_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::awd::net::_HandshakeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::awd::net::_HandshakeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::awd::net::_CreateLobbyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::awd::net::_CreateLobbyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::awd::net::_JoinLobbyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::awd::net::_JoinLobbyResponse_OthersNamesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::awd::net::_JoinLobbyResponse_OthersCharactersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::awd::net::_JoinLobbyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::awd::net::_LeaveLobbyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::awd::net::_LeaveLobbyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::awd::net::_KickedFromLobby_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::awd::net::_UpdatedMembersList_NewAllNamesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::awd::net::_UpdatedMembersList_NewAllCharactersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::awd::net::_UpdatedMembersList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::awd::net::_SpawnPlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::awd::net::_ClientRelativeMove_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::awd::net::_UpdateEntityPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::awd::net::_PacketWrapper_default_instance_),
};

const char descriptor_table_protodef_packets_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rpackets.proto\022\007awd.net\"$\n\004Ping\022\017\n\007test"
  "_id\030\001 \001(\r\022\013\n\003rtt\030\002 \001(\r\"\027\n\004Pong\022\017\n\007test_i"
  "d\030\001 \001(\r\",\n\020HandshakeRequest\022\030\n\020protocol_"
  "version\030\001 \001(\r\"-\n\021HandshakeResponse\022\030\n\020pr"
  "otocol_version\030\001 \001(\021\")\n\022CreateLobbyReque"
  "st\022\023\n\013player_name\030\001 \001(\t\"M\n\023CreateLobbyRe"
  "sponse\022\020\n\010lobby_id\030\001 \001(\021\022\021\n\tplayer_id\030\002 "
  "\001(\r\022\021\n\tcharacter\030\003 \001(\r\"9\n\020JoinLobbyReque"
  "st\022\020\n\010lobby_id\030\001 \001(\r\022\023\n\013player_name\030\002 \001("
  "\t\"\307\002\n\021JoinLobbyResponse\022\021\n\tplayer_id\030\001 \001"
  "(\021\022\021\n\tcharacter\030\002 \001(\r\022\017\n\007host_id\030\003 \001(\r\022A"
  "\n\014others_names\030\004 \003(\0132+.awd.net.JoinLobby"
  "Response.OthersNamesEntry\022K\n\021others_char"
  "acters\030\005 \003(\01320.awd.net.JoinLobbyResponse"
  ".OthersCharactersEntry\0322\n\020OthersNamesEnt"
  "ry\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001(\t:\0028\001\0327\n\025Ot"
  "hersCharactersEntry\022\013\n\003key\030\001 \001(\r\022\r\n\005valu"
  "e\030\002 \001(\r:\0028\001\"8\n\021LeaveLobbyRequest\022\020\n\010lobb"
  "y_id\030\001 \001(\r\022\021\n\tplayer_id\030\002 \001(\r\")\n\022LeaveLo"
  "bbyResponse\022\023\n\013status_code\030\001 \001(\021\"!\n\017Kick"
  "edFromLobby\022\016\n\006reason\030\001 \001(\r\"\225\002\n\022UpdatedM"
  "embersList\022C\n\rnew_all_names\030\001 \003(\0132,.awd."
  "net.UpdatedMembersList.NewAllNamesEntry\022"
  "M\n\022new_all_characters\030\002 \003(\01321.awd.net.Up"
  "datedMembersList.NewAllCharactersEntry\0322"
  "\n\020NewAllNamesEntry\022\013\n\003key\030\001 \001(\r\022\r\n\005value"
  "\030\002 \001(\t:\0028\001\0327\n\025NewAllCharactersEntry\022\013\n\003k"
  "ey\030\001 \001(\r\022\r\n\005value\030\002 \001(\r:\0028\001\"3\n\013SpawnPlay"
  "er\022\021\n\tplayer_id\030\001 \001(\r\022\021\n\tentity_id\030\002 \001(\r"
  "\"L\n\022ClientRelativeMove\022\020\n\010lobby_id\030\001 \001(\r"
  "\022\021\n\tplayer_id\030\002 \001(\r\022\021\n\tdirection\030\003 \001(\r\"G"
  "\n\024UpdateEntityPosition\022\021\n\tentity_id\030\001 \001("
  "\r\022\r\n\005pos_x\030\002 \001(\002\022\r\n\005pos_y\030\003 \001(\002\"\211\007\n\rPack"
  "etWrapper\022\020\n\010sequence\030\001 \001(\r\022\013\n\003ack\030\002 \001(\r"
  "\022\024\n\014ack_bitfield\030\003 \001(\004\022\035\n\004ping\030\004 \001(\0132\r.a"
  "wd.net.PingH\000\022\035\n\004pong\030\005 \001(\0132\r.awd.net.Po"
  "ngH\000\0226\n\021handshake_request\030\n \001(\0132\031.awd.ne"
  "t.HandshakeRequestH\000\0228\n\022handshake_respon"
  "se\030\013 \001(\0132\032.awd.net.HandshakeResponseH\000\022;"
  "\n\024create_lobby_request\030d \001(\0132\033.awd.net.C"
  "reateLobbyRequestH\000\022=\n\025create_lobby_resp"
  "onse\030e \001(\0132\034.awd.net.CreateLobbyResponse"
  "H\000\0227\n\022join_lobby_request\030f \001(\0132\031.awd.net"
  ".JoinLobbyRequestH\000\0229\n\023join_lobby_respon"
  "se\030g \001(\0132\032.awd.net.JoinLobbyResponseH\000\0229"
  "\n\023leave_lobby_request\030h \001(\0132\032.awd.net.Le"
  "aveLobbyRequestH\000\022;\n\024leave_lobby_respons"
  "e\030i \001(\0132\033.awd.net.LeaveLobbyResponseH\000\0225"
  "\n\021kicked_from_lobby\030j \001(\0132\030.awd.net.Kick"
  "edFromLobbyH\000\022;\n\024updated_members_list\030k "
  "\001(\0132\033.awd.net.UpdatedMembersListH\000\022-\n\014sp"
  "awn_player\030\350\007 \001(\0132\024.awd.net.SpawnPlayerH"
  "\000\022<\n\024client_relative_move\030\320\017 \001(\0132\033.awd.n"
  "et.ClientRelativeMoveH\000\022@\n\026update_entity"
  "_position\030\321\017 \001(\0132\035.awd.net.UpdateEntityP"
  "ositionH\000B\010\n\006packetB\024\n\020gg.aswedrown.netP"
  "\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_packets_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_packets_2eproto = {
  false, false, 2249, descriptor_table_protodef_packets_2eproto, "packets.proto", 
  &descriptor_table_packets_2eproto_once, nullptr, 0, 20,
  schemas, file_default_instances, TableStruct_packets_2eproto::offsets,
  file_level_metadata_packets_2eproto, file_level_enum_descriptors_packets_2eproto, file_level_service_descriptors_packets_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_packets_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_packets_2eproto);
  return descriptor_table_packets_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_packets_2eproto(&descriptor_table_packets_2eproto);
namespace awd {
namespace net {

// ===================================================================

class Ping::_Internal {
 public:
};

Ping::Ping(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:awd.net.Ping)
}
Ping::Ping(const Ping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&test_id_, &from.test_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&rtt_) -
    reinterpret_cast<char*>(&test_id_)) + sizeof(rtt_));
  // @@protoc_insertion_point(copy_constructor:awd.net.Ping)
}

void Ping::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&test_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rtt_) -
    reinterpret_cast<char*>(&test_id_)) + sizeof(rtt_));
}

Ping::~Ping() {
  // @@protoc_insertion_point(destructor:awd.net.Ping)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Ping::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Ping::ArenaDtor(void* object) {
  Ping* _this = reinterpret_cast< Ping* >(object);
  (void)_this;
}
void Ping::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Ping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Ping::Clear() {
// @@protoc_insertion_point(message_clear_start:awd.net.Ping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&test_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rtt_) -
      reinterpret_cast<char*>(&test_id_)) + sizeof(rtt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ping::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 test_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          test_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rtt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rtt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ping::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:awd.net.Ping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 test_id = 1;
  if (this->test_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_test_id(), target);
  }

  // uint32 rtt = 2;
  if (this->rtt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rtt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:awd.net.Ping)
  return target;
}

size_t Ping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:awd.net.Ping)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 test_id = 1;
  if (this->test_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_test_id());
  }

  // uint32 rtt = 2;
  if (this->rtt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rtt());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ping::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:awd.net.Ping)
  GOOGLE_DCHECK_NE(&from, this);
  const Ping* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ping>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:awd.net.Ping)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:awd.net.Ping)
    MergeFrom(*source);
  }
}

void Ping::MergeFrom(const Ping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:awd.net.Ping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.test_id() != 0) {
    _internal_set_test_id(from._internal_test_id());
  }
  if (from.rtt() != 0) {
    _internal_set_rtt(from._internal_rtt());
  }
}

void Ping::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:awd.net.Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ping::CopyFrom(const Ping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:awd.net.Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ping::IsInitialized() const {
  return true;
}

void Ping::InternalSwap(Ping* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ping, rtt_)
      + sizeof(Ping::rtt_)
      - PROTOBUF_FIELD_OFFSET(Ping, test_id_)>(
          reinterpret_cast<char*>(&test_id_),
          reinterpret_cast<char*>(&other->test_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Ping::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Pong::_Internal {
 public:
};

Pong::Pong(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:awd.net.Pong)
}
Pong::Pong(const Pong& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  test_id_ = from.test_id_;
  // @@protoc_insertion_point(copy_constructor:awd.net.Pong)
}

void Pong::SharedCtor() {
test_id_ = 0u;
}

Pong::~Pong() {
  // @@protoc_insertion_point(destructor:awd.net.Pong)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Pong::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Pong::ArenaDtor(void* object) {
  Pong* _this = reinterpret_cast< Pong* >(object);
  (void)_this;
}
void Pong::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pong::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Pong::Clear() {
// @@protoc_insertion_point(message_clear_start:awd.net.Pong)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  test_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pong::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 test_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          test_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pong::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:awd.net.Pong)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 test_id = 1;
  if (this->test_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_test_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:awd.net.Pong)
  return target;
}

size_t Pong::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:awd.net.Pong)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 test_id = 1;
  if (this->test_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_test_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pong::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:awd.net.Pong)
  GOOGLE_DCHECK_NE(&from, this);
  const Pong* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pong>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:awd.net.Pong)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:awd.net.Pong)
    MergeFrom(*source);
  }
}

void Pong::MergeFrom(const Pong& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:awd.net.Pong)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.test_id() != 0) {
    _internal_set_test_id(from._internal_test_id());
  }
}

void Pong::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:awd.net.Pong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pong::CopyFrom(const Pong& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:awd.net.Pong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pong::IsInitialized() const {
  return true;
}

void Pong::InternalSwap(Pong* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(test_id_, other->test_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Pong::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HandshakeRequest::_Internal {
 public:
};

HandshakeRequest::HandshakeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:awd.net.HandshakeRequest)
}
HandshakeRequest::HandshakeRequest(const HandshakeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  protocol_version_ = from.protocol_version_;
  // @@protoc_insertion_point(copy_constructor:awd.net.HandshakeRequest)
}

void HandshakeRequest::SharedCtor() {
protocol_version_ = 0u;
}

HandshakeRequest::~HandshakeRequest() {
  // @@protoc_insertion_point(destructor:awd.net.HandshakeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HandshakeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HandshakeRequest::ArenaDtor(void* object) {
  HandshakeRequest* _this = reinterpret_cast< HandshakeRequest* >(object);
  (void)_this;
}
void HandshakeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HandshakeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HandshakeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:awd.net.HandshakeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  protocol_version_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HandshakeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 protocol_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          protocol_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HandshakeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:awd.net.HandshakeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 protocol_version = 1;
  if (this->protocol_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_protocol_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:awd.net.HandshakeRequest)
  return target;
}

size_t HandshakeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:awd.net.HandshakeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 protocol_version = 1;
  if (this->protocol_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_protocol_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HandshakeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:awd.net.HandshakeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HandshakeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HandshakeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:awd.net.HandshakeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:awd.net.HandshakeRequest)
    MergeFrom(*source);
  }
}

void HandshakeRequest::MergeFrom(const HandshakeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:awd.net.HandshakeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.protocol_version() != 0) {
    _internal_set_protocol_version(from._internal_protocol_version());
  }
}

void HandshakeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:awd.net.HandshakeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HandshakeRequest::CopyFrom(const HandshakeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:awd.net.HandshakeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandshakeRequest::IsInitialized() const {
  return true;
}

void HandshakeRequest::InternalSwap(HandshakeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(protocol_version_, other->protocol_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HandshakeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class HandshakeResponse::_Internal {
 public:
};

HandshakeResponse::HandshakeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:awd.net.HandshakeResponse)
}
HandshakeResponse::HandshakeResponse(const HandshakeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  protocol_version_ = from.protocol_version_;
  // @@protoc_insertion_point(copy_constructor:awd.net.HandshakeResponse)
}

void HandshakeResponse::SharedCtor() {
protocol_version_ = 0;
}

HandshakeResponse::~HandshakeResponse() {
  // @@protoc_insertion_point(destructor:awd.net.HandshakeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HandshakeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HandshakeResponse::ArenaDtor(void* object) {
  HandshakeResponse* _this = reinterpret_cast< HandshakeResponse* >(object);
  (void)_this;
}
void HandshakeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HandshakeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HandshakeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:awd.net.HandshakeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  protocol_version_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HandshakeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint32 protocol_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          protocol_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HandshakeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:awd.net.HandshakeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 protocol_version = 1;
  if (this->protocol_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1, this->_internal_protocol_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:awd.net.HandshakeResponse)
  return target;
}

size_t HandshakeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:awd.net.HandshakeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 protocol_version = 1;
  if (this->protocol_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_protocol_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HandshakeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:awd.net.HandshakeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HandshakeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HandshakeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:awd.net.HandshakeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:awd.net.HandshakeResponse)
    MergeFrom(*source);
  }
}

void HandshakeResponse::MergeFrom(const HandshakeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:awd.net.HandshakeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.protocol_version() != 0) {
    _internal_set_protocol_version(from._internal_protocol_version());
  }
}

void HandshakeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:awd.net.HandshakeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HandshakeResponse::CopyFrom(const HandshakeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:awd.net.HandshakeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandshakeResponse::IsInitialized() const {
  return true;
}

void HandshakeResponse::InternalSwap(HandshakeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(protocol_version_, other->protocol_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HandshakeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CreateLobbyRequest::_Internal {
 public:
};

CreateLobbyRequest::CreateLobbyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:awd.net.CreateLobbyRequest)
}
CreateLobbyRequest::CreateLobbyRequest(const CreateLobbyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  player_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_player_name().empty()) {
    player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_player_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:awd.net.CreateLobbyRequest)
}

void CreateLobbyRequest::SharedCtor() {
player_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreateLobbyRequest::~CreateLobbyRequest() {
  // @@protoc_insertion_point(destructor:awd.net.CreateLobbyRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateLobbyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  player_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateLobbyRequest::ArenaDtor(void* object) {
  CreateLobbyRequest* _this = reinterpret_cast< CreateLobbyRequest* >(object);
  (void)_this;
}
void CreateLobbyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateLobbyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateLobbyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:awd.net.CreateLobbyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateLobbyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string player_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_player_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "awd.net.CreateLobbyRequest.player_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateLobbyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:awd.net.CreateLobbyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string player_name = 1;
  if (this->player_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_player_name().data(), static_cast<int>(this->_internal_player_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "awd.net.CreateLobbyRequest.player_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_player_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:awd.net.CreateLobbyRequest)
  return target;
}

size_t CreateLobbyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:awd.net.CreateLobbyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string player_name = 1;
  if (this->player_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_player_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateLobbyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:awd.net.CreateLobbyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateLobbyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateLobbyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:awd.net.CreateLobbyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:awd.net.CreateLobbyRequest)
    MergeFrom(*source);
  }
}

void CreateLobbyRequest::MergeFrom(const CreateLobbyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:awd.net.CreateLobbyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_name().size() > 0) {
    _internal_set_player_name(from._internal_player_name());
  }
}

void CreateLobbyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:awd.net.CreateLobbyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateLobbyRequest::CopyFrom(const CreateLobbyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:awd.net.CreateLobbyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateLobbyRequest::IsInitialized() const {
  return true;
}

void CreateLobbyRequest::InternalSwap(CreateLobbyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  player_name_.Swap(&other->player_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateLobbyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CreateLobbyResponse::_Internal {
 public:
};

CreateLobbyResponse::CreateLobbyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:awd.net.CreateLobbyResponse)
}
CreateLobbyResponse::CreateLobbyResponse(const CreateLobbyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lobby_id_, &from.lobby_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&character_) -
    reinterpret_cast<char*>(&lobby_id_)) + sizeof(character_));
  // @@protoc_insertion_point(copy_constructor:awd.net.CreateLobbyResponse)
}

void CreateLobbyResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lobby_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&character_) -
    reinterpret_cast<char*>(&lobby_id_)) + sizeof(character_));
}

CreateLobbyResponse::~CreateLobbyResponse() {
  // @@protoc_insertion_point(destructor:awd.net.CreateLobbyResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateLobbyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CreateLobbyResponse::ArenaDtor(void* object) {
  CreateLobbyResponse* _this = reinterpret_cast< CreateLobbyResponse* >(object);
  (void)_this;
}
void CreateLobbyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateLobbyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateLobbyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:awd.net.CreateLobbyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lobby_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&character_) -
      reinterpret_cast<char*>(&lobby_id_)) + sizeof(character_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateLobbyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint32 lobby_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 character = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          character_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateLobbyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:awd.net.CreateLobbyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 lobby_id = 1;
  if (this->lobby_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1, this->_internal_lobby_id(), target);
  }

  // uint32 player_id = 2;
  if (this->player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_player_id(), target);
  }

  // uint32 character = 3;
  if (this->character() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_character(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:awd.net.CreateLobbyResponse)
  return target;
}

size_t CreateLobbyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:awd.net.CreateLobbyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 lobby_id = 1;
  if (this->lobby_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_lobby_id());
  }

  // uint32 player_id = 2;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_player_id());
  }

  // uint32 character = 3;
  if (this->character() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_character());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateLobbyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:awd.net.CreateLobbyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateLobbyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateLobbyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:awd.net.CreateLobbyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:awd.net.CreateLobbyResponse)
    MergeFrom(*source);
  }
}

void CreateLobbyResponse::MergeFrom(const CreateLobbyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:awd.net.CreateLobbyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lobby_id() != 0) {
    _internal_set_lobby_id(from._internal_lobby_id());
  }
  if (from.player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from.character() != 0) {
    _internal_set_character(from._internal_character());
  }
}

void CreateLobbyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:awd.net.CreateLobbyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateLobbyResponse::CopyFrom(const CreateLobbyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:awd.net.CreateLobbyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateLobbyResponse::IsInitialized() const {
  return true;
}

void CreateLobbyResponse::InternalSwap(CreateLobbyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateLobbyResponse, character_)
      + sizeof(CreateLobbyResponse::character_)
      - PROTOBUF_FIELD_OFFSET(CreateLobbyResponse, lobby_id_)>(
          reinterpret_cast<char*>(&lobby_id_),
          reinterpret_cast<char*>(&other->lobby_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateLobbyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class JoinLobbyRequest::_Internal {
 public:
};

JoinLobbyRequest::JoinLobbyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:awd.net.JoinLobbyRequest)
}
JoinLobbyRequest::JoinLobbyRequest(const JoinLobbyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  player_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_player_name().empty()) {
    player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_player_name(), 
      GetArena());
  }
  lobby_id_ = from.lobby_id_;
  // @@protoc_insertion_point(copy_constructor:awd.net.JoinLobbyRequest)
}

void JoinLobbyRequest::SharedCtor() {
player_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
lobby_id_ = 0u;
}

JoinLobbyRequest::~JoinLobbyRequest() {
  // @@protoc_insertion_point(destructor:awd.net.JoinLobbyRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JoinLobbyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  player_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void JoinLobbyRequest::ArenaDtor(void* object) {
  JoinLobbyRequest* _this = reinterpret_cast< JoinLobbyRequest* >(object);
  (void)_this;
}
void JoinLobbyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JoinLobbyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JoinLobbyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:awd.net.JoinLobbyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_name_.ClearToEmpty();
  lobby_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JoinLobbyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 lobby_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string player_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_player_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "awd.net.JoinLobbyRequest.player_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JoinLobbyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:awd.net.JoinLobbyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 lobby_id = 1;
  if (this->lobby_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_lobby_id(), target);
  }

  // string player_name = 2;
  if (this->player_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_player_name().data(), static_cast<int>(this->_internal_player_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "awd.net.JoinLobbyRequest.player_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_player_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:awd.net.JoinLobbyRequest)
  return target;
}

size_t JoinLobbyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:awd.net.JoinLobbyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string player_name = 2;
  if (this->player_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_player_name());
  }

  // uint32 lobby_id = 1;
  if (this->lobby_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lobby_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoinLobbyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:awd.net.JoinLobbyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinLobbyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JoinLobbyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:awd.net.JoinLobbyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:awd.net.JoinLobbyRequest)
    MergeFrom(*source);
  }
}

void JoinLobbyRequest::MergeFrom(const JoinLobbyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:awd.net.JoinLobbyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_name().size() > 0) {
    _internal_set_player_name(from._internal_player_name());
  }
  if (from.lobby_id() != 0) {
    _internal_set_lobby_id(from._internal_lobby_id());
  }
}

void JoinLobbyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:awd.net.JoinLobbyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinLobbyRequest::CopyFrom(const JoinLobbyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:awd.net.JoinLobbyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinLobbyRequest::IsInitialized() const {
  return true;
}

void JoinLobbyRequest::InternalSwap(JoinLobbyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  player_name_.Swap(&other->player_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(lobby_id_, other->lobby_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinLobbyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

JoinLobbyResponse_OthersNamesEntry_DoNotUse::JoinLobbyResponse_OthersNamesEntry_DoNotUse() {}
JoinLobbyResponse_OthersNamesEntry_DoNotUse::JoinLobbyResponse_OthersNamesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void JoinLobbyResponse_OthersNamesEntry_DoNotUse::MergeFrom(const JoinLobbyResponse_OthersNamesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata JoinLobbyResponse_OthersNamesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void JoinLobbyResponse_OthersNamesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

JoinLobbyResponse_OthersCharactersEntry_DoNotUse::JoinLobbyResponse_OthersCharactersEntry_DoNotUse() {}
JoinLobbyResponse_OthersCharactersEntry_DoNotUse::JoinLobbyResponse_OthersCharactersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void JoinLobbyResponse_OthersCharactersEntry_DoNotUse::MergeFrom(const JoinLobbyResponse_OthersCharactersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata JoinLobbyResponse_OthersCharactersEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void JoinLobbyResponse_OthersCharactersEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class JoinLobbyResponse::_Internal {
 public:
};

JoinLobbyResponse::JoinLobbyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  others_names_(arena),
  others_characters_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:awd.net.JoinLobbyResponse)
}
JoinLobbyResponse::JoinLobbyResponse(const JoinLobbyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  others_names_.MergeFrom(from.others_names_);
  others_characters_.MergeFrom(from.others_characters_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&host_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(host_id_));
  // @@protoc_insertion_point(copy_constructor:awd.net.JoinLobbyResponse)
}

void JoinLobbyResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&host_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(host_id_));
}

JoinLobbyResponse::~JoinLobbyResponse() {
  // @@protoc_insertion_point(destructor:awd.net.JoinLobbyResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JoinLobbyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void JoinLobbyResponse::ArenaDtor(void* object) {
  JoinLobbyResponse* _this = reinterpret_cast< JoinLobbyResponse* >(object);
  (void)_this;
}
void JoinLobbyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JoinLobbyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JoinLobbyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:awd.net.JoinLobbyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  others_names_.Clear();
  others_characters_.Clear();
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&host_id_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(host_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JoinLobbyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 character = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          character_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 host_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          host_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<uint32, string> others_names = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&others_names_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // map<uint32, uint32> others_characters = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&others_characters_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JoinLobbyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:awd.net.JoinLobbyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 player_id = 1;
  if (this->player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1, this->_internal_player_id(), target);
  }

  // uint32 character = 2;
  if (this->character() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_character(), target);
  }

  // uint32 host_id = 3;
  if (this->host_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_host_id(), target);
  }

  // map<uint32, string> others_names = 4;
  if (!this->_internal_others_names().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "awd.net.JoinLobbyResponse.OthersNamesEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_others_names().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_others_names().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >::const_iterator
          it = this->_internal_others_names().begin();
          it != this->_internal_others_names().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = JoinLobbyResponse_OthersNamesEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)].second));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >::const_iterator
          it = this->_internal_others_names().begin();
          it != this->_internal_others_names().end(); ++it) {
        target = JoinLobbyResponse_OthersNamesEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<uint32, uint32> others_characters = 5;
  if (!this->_internal_others_characters().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_others_characters().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_others_characters().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_others_characters().begin();
          it != this->_internal_others_characters().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = JoinLobbyResponse_OthersCharactersEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_others_characters().begin();
          it != this->_internal_others_characters().end(); ++it) {
        target = JoinLobbyResponse_OthersCharactersEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:awd.net.JoinLobbyResponse)
  return target;
}

size_t JoinLobbyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:awd.net.JoinLobbyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, string> others_names = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_others_names_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >::const_iterator
      it = this->_internal_others_names().begin();
      it != this->_internal_others_names().end(); ++it) {
    total_size += JoinLobbyResponse_OthersNamesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, uint32> others_characters = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_others_characters_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
      it = this->_internal_others_characters().begin();
      it != this->_internal_others_characters().end(); ++it) {
    total_size += JoinLobbyResponse_OthersCharactersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // sint32 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_player_id());
  }

  // uint32 character = 2;
  if (this->character() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_character());
  }

  // uint32 host_id = 3;
  if (this->host_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_host_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoinLobbyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:awd.net.JoinLobbyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinLobbyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JoinLobbyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:awd.net.JoinLobbyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:awd.net.JoinLobbyResponse)
    MergeFrom(*source);
  }
}

void JoinLobbyResponse::MergeFrom(const JoinLobbyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:awd.net.JoinLobbyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  others_names_.MergeFrom(from.others_names_);
  others_characters_.MergeFrom(from.others_characters_);
  if (from.player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from.character() != 0) {
    _internal_set_character(from._internal_character());
  }
  if (from.host_id() != 0) {
    _internal_set_host_id(from._internal_host_id());
  }
}

void JoinLobbyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:awd.net.JoinLobbyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinLobbyResponse::CopyFrom(const JoinLobbyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:awd.net.JoinLobbyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinLobbyResponse::IsInitialized() const {
  return true;
}

void JoinLobbyResponse::InternalSwap(JoinLobbyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  others_names_.Swap(&other->others_names_);
  others_characters_.Swap(&other->others_characters_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JoinLobbyResponse, host_id_)
      + sizeof(JoinLobbyResponse::host_id_)
      - PROTOBUF_FIELD_OFFSET(JoinLobbyResponse, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinLobbyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LeaveLobbyRequest::_Internal {
 public:
};

LeaveLobbyRequest::LeaveLobbyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:awd.net.LeaveLobbyRequest)
}
LeaveLobbyRequest::LeaveLobbyRequest(const LeaveLobbyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lobby_id_, &from.lobby_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&lobby_id_)) + sizeof(player_id_));
  // @@protoc_insertion_point(copy_constructor:awd.net.LeaveLobbyRequest)
}

void LeaveLobbyRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lobby_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&lobby_id_)) + sizeof(player_id_));
}

LeaveLobbyRequest::~LeaveLobbyRequest() {
  // @@protoc_insertion_point(destructor:awd.net.LeaveLobbyRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LeaveLobbyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LeaveLobbyRequest::ArenaDtor(void* object) {
  LeaveLobbyRequest* _this = reinterpret_cast< LeaveLobbyRequest* >(object);
  (void)_this;
}
void LeaveLobbyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LeaveLobbyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LeaveLobbyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:awd.net.LeaveLobbyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lobby_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_id_) -
      reinterpret_cast<char*>(&lobby_id_)) + sizeof(player_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaveLobbyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 lobby_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LeaveLobbyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:awd.net.LeaveLobbyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 lobby_id = 1;
  if (this->lobby_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_lobby_id(), target);
  }

  // uint32 player_id = 2;
  if (this->player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:awd.net.LeaveLobbyRequest)
  return target;
}

size_t LeaveLobbyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:awd.net.LeaveLobbyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 lobby_id = 1;
  if (this->lobby_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lobby_id());
  }

  // uint32 player_id = 2;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_player_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaveLobbyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:awd.net.LeaveLobbyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaveLobbyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LeaveLobbyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:awd.net.LeaveLobbyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:awd.net.LeaveLobbyRequest)
    MergeFrom(*source);
  }
}

void LeaveLobbyRequest::MergeFrom(const LeaveLobbyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:awd.net.LeaveLobbyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lobby_id() != 0) {
    _internal_set_lobby_id(from._internal_lobby_id());
  }
  if (from.player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
}

void LeaveLobbyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:awd.net.LeaveLobbyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveLobbyRequest::CopyFrom(const LeaveLobbyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:awd.net.LeaveLobbyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveLobbyRequest::IsInitialized() const {
  return true;
}

void LeaveLobbyRequest::InternalSwap(LeaveLobbyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LeaveLobbyRequest, player_id_)
      + sizeof(LeaveLobbyRequest::player_id_)
      - PROTOBUF_FIELD_OFFSET(LeaveLobbyRequest, lobby_id_)>(
          reinterpret_cast<char*>(&lobby_id_),
          reinterpret_cast<char*>(&other->lobby_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaveLobbyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LeaveLobbyResponse::_Internal {
 public:
};

LeaveLobbyResponse::LeaveLobbyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:awd.net.LeaveLobbyResponse)
}
LeaveLobbyResponse::LeaveLobbyResponse(const LeaveLobbyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_code_ = from.status_code_;
  // @@protoc_insertion_point(copy_constructor:awd.net.LeaveLobbyResponse)
}

void LeaveLobbyResponse::SharedCtor() {
status_code_ = 0;
}

LeaveLobbyResponse::~LeaveLobbyResponse() {
  // @@protoc_insertion_point(destructor:awd.net.LeaveLobbyResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LeaveLobbyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LeaveLobbyResponse::ArenaDtor(void* object) {
  LeaveLobbyResponse* _this = reinterpret_cast< LeaveLobbyResponse* >(object);
  (void)_this;
}
void LeaveLobbyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LeaveLobbyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LeaveLobbyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:awd.net.LeaveLobbyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaveLobbyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sint32 status_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LeaveLobbyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:awd.net.LeaveLobbyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sint32 status_code = 1;
  if (this->status_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(1, this->_internal_status_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:awd.net.LeaveLobbyResponse)
  return target;
}

size_t LeaveLobbyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:awd.net.LeaveLobbyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // sint32 status_code = 1;
  if (this->status_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_status_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaveLobbyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:awd.net.LeaveLobbyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaveLobbyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LeaveLobbyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:awd.net.LeaveLobbyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:awd.net.LeaveLobbyResponse)
    MergeFrom(*source);
  }
}

void LeaveLobbyResponse::MergeFrom(const LeaveLobbyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:awd.net.LeaveLobbyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status_code() != 0) {
    _internal_set_status_code(from._internal_status_code());
  }
}

void LeaveLobbyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:awd.net.LeaveLobbyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveLobbyResponse::CopyFrom(const LeaveLobbyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:awd.net.LeaveLobbyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveLobbyResponse::IsInitialized() const {
  return true;
}

void LeaveLobbyResponse::InternalSwap(LeaveLobbyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(status_code_, other->status_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaveLobbyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class KickedFromLobby::_Internal {
 public:
};

KickedFromLobby::KickedFromLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:awd.net.KickedFromLobby)
}
KickedFromLobby::KickedFromLobby(const KickedFromLobby& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_ = from.reason_;
  // @@protoc_insertion_point(copy_constructor:awd.net.KickedFromLobby)
}

void KickedFromLobby::SharedCtor() {
reason_ = 0u;
}

KickedFromLobby::~KickedFromLobby() {
  // @@protoc_insertion_point(destructor:awd.net.KickedFromLobby)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KickedFromLobby::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void KickedFromLobby::ArenaDtor(void* object) {
  KickedFromLobby* _this = reinterpret_cast< KickedFromLobby* >(object);
  (void)_this;
}
void KickedFromLobby::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KickedFromLobby::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KickedFromLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:awd.net.KickedFromLobby)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KickedFromLobby::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KickedFromLobby::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:awd.net.KickedFromLobby)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 reason = 1;
  if (this->reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:awd.net.KickedFromLobby)
  return target;
}

size_t KickedFromLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:awd.net.KickedFromLobby)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 reason = 1;
  if (this->reason() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reason());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KickedFromLobby::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:awd.net.KickedFromLobby)
  GOOGLE_DCHECK_NE(&from, this);
  const KickedFromLobby* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KickedFromLobby>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:awd.net.KickedFromLobby)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:awd.net.KickedFromLobby)
    MergeFrom(*source);
  }
}

void KickedFromLobby::MergeFrom(const KickedFromLobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:awd.net.KickedFromLobby)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason() != 0) {
    _internal_set_reason(from._internal_reason());
  }
}

void KickedFromLobby::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:awd.net.KickedFromLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickedFromLobby::CopyFrom(const KickedFromLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:awd.net.KickedFromLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickedFromLobby::IsInitialized() const {
  return true;
}

void KickedFromLobby::InternalSwap(KickedFromLobby* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(reason_, other->reason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KickedFromLobby::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

UpdatedMembersList_NewAllNamesEntry_DoNotUse::UpdatedMembersList_NewAllNamesEntry_DoNotUse() {}
UpdatedMembersList_NewAllNamesEntry_DoNotUse::UpdatedMembersList_NewAllNamesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void UpdatedMembersList_NewAllNamesEntry_DoNotUse::MergeFrom(const UpdatedMembersList_NewAllNamesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata UpdatedMembersList_NewAllNamesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void UpdatedMembersList_NewAllNamesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

UpdatedMembersList_NewAllCharactersEntry_DoNotUse::UpdatedMembersList_NewAllCharactersEntry_DoNotUse() {}
UpdatedMembersList_NewAllCharactersEntry_DoNotUse::UpdatedMembersList_NewAllCharactersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void UpdatedMembersList_NewAllCharactersEntry_DoNotUse::MergeFrom(const UpdatedMembersList_NewAllCharactersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata UpdatedMembersList_NewAllCharactersEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void UpdatedMembersList_NewAllCharactersEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class UpdatedMembersList::_Internal {
 public:
};

UpdatedMembersList::UpdatedMembersList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  new_all_names_(arena),
  new_all_characters_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:awd.net.UpdatedMembersList)
}
UpdatedMembersList::UpdatedMembersList(const UpdatedMembersList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  new_all_names_.MergeFrom(from.new_all_names_);
  new_all_characters_.MergeFrom(from.new_all_characters_);
  // @@protoc_insertion_point(copy_constructor:awd.net.UpdatedMembersList)
}

void UpdatedMembersList::SharedCtor() {
}

UpdatedMembersList::~UpdatedMembersList() {
  // @@protoc_insertion_point(destructor:awd.net.UpdatedMembersList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdatedMembersList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UpdatedMembersList::ArenaDtor(void* object) {
  UpdatedMembersList* _this = reinterpret_cast< UpdatedMembersList* >(object);
  (void)_this;
}
void UpdatedMembersList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdatedMembersList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdatedMembersList::Clear() {
// @@protoc_insertion_point(message_clear_start:awd.net.UpdatedMembersList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  new_all_names_.Clear();
  new_all_characters_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdatedMembersList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<uint32, string> new_all_names = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&new_all_names_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // map<uint32, uint32> new_all_characters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&new_all_characters_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdatedMembersList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:awd.net.UpdatedMembersList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, string> new_all_names = 1;
  if (!this->_internal_new_all_names().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "awd.net.UpdatedMembersList.NewAllNamesEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_new_all_names().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_new_all_names().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >::const_iterator
          it = this->_internal_new_all_names().begin();
          it != this->_internal_new_all_names().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = UpdatedMembersList_NewAllNamesEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)].second));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >::const_iterator
          it = this->_internal_new_all_names().begin();
          it != this->_internal_new_all_names().end(); ++it) {
        target = UpdatedMembersList_NewAllNamesEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<uint32, uint32> new_all_characters = 2;
  if (!this->_internal_new_all_characters().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_new_all_characters().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_new_all_characters().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_new_all_characters().begin();
          it != this->_internal_new_all_characters().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = UpdatedMembersList_NewAllCharactersEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_new_all_characters().begin();
          it != this->_internal_new_all_characters().end(); ++it) {
        target = UpdatedMembersList_NewAllCharactersEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:awd.net.UpdatedMembersList)
  return target;
}

size_t UpdatedMembersList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:awd.net.UpdatedMembersList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, string> new_all_names = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_new_all_names_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >::const_iterator
      it = this->_internal_new_all_names().begin();
      it != this->_internal_new_all_names().end(); ++it) {
    total_size += UpdatedMembersList_NewAllNamesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, uint32> new_all_characters = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_new_all_characters_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
      it = this->_internal_new_all_characters().begin();
      it != this->_internal_new_all_characters().end(); ++it) {
    total_size += UpdatedMembersList_NewAllCharactersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdatedMembersList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:awd.net.UpdatedMembersList)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdatedMembersList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdatedMembersList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:awd.net.UpdatedMembersList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:awd.net.UpdatedMembersList)
    MergeFrom(*source);
  }
}

void UpdatedMembersList::MergeFrom(const UpdatedMembersList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:awd.net.UpdatedMembersList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  new_all_names_.MergeFrom(from.new_all_names_);
  new_all_characters_.MergeFrom(from.new_all_characters_);
}

void UpdatedMembersList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:awd.net.UpdatedMembersList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatedMembersList::CopyFrom(const UpdatedMembersList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:awd.net.UpdatedMembersList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatedMembersList::IsInitialized() const {
  return true;
}

void UpdatedMembersList::InternalSwap(UpdatedMembersList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  new_all_names_.Swap(&other->new_all_names_);
  new_all_characters_.Swap(&other->new_all_characters_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdatedMembersList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SpawnPlayer::_Internal {
 public:
};

SpawnPlayer::SpawnPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:awd.net.SpawnPlayer)
}
SpawnPlayer::SpawnPlayer(const SpawnPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&entity_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(entity_id_));
  // @@protoc_insertion_point(copy_constructor:awd.net.SpawnPlayer)
}

void SpawnPlayer::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&entity_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(entity_id_));
}

SpawnPlayer::~SpawnPlayer() {
  // @@protoc_insertion_point(destructor:awd.net.SpawnPlayer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpawnPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SpawnPlayer::ArenaDtor(void* object) {
  SpawnPlayer* _this = reinterpret_cast< SpawnPlayer* >(object);
  (void)_this;
}
void SpawnPlayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpawnPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpawnPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:awd.net.SpawnPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&entity_id_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(entity_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpawnPlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 entity_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          entity_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpawnPlayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:awd.net.SpawnPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player_id = 1;
  if (this->player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // uint32 entity_id = 2;
  if (this->entity_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_entity_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:awd.net.SpawnPlayer)
  return target;
}

size_t SpawnPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:awd.net.SpawnPlayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_player_id());
  }

  // uint32 entity_id = 2;
  if (this->entity_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_entity_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpawnPlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:awd.net.SpawnPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const SpawnPlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpawnPlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:awd.net.SpawnPlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:awd.net.SpawnPlayer)
    MergeFrom(*source);
  }
}

void SpawnPlayer::MergeFrom(const SpawnPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:awd.net.SpawnPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from.entity_id() != 0) {
    _internal_set_entity_id(from._internal_entity_id());
  }
}

void SpawnPlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:awd.net.SpawnPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpawnPlayer::CopyFrom(const SpawnPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:awd.net.SpawnPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpawnPlayer::IsInitialized() const {
  return true;
}

void SpawnPlayer::InternalSwap(SpawnPlayer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpawnPlayer, entity_id_)
      + sizeof(SpawnPlayer::entity_id_)
      - PROTOBUF_FIELD_OFFSET(SpawnPlayer, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpawnPlayer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ClientRelativeMove::_Internal {
 public:
};

ClientRelativeMove::ClientRelativeMove(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:awd.net.ClientRelativeMove)
}
ClientRelativeMove::ClientRelativeMove(const ClientRelativeMove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lobby_id_, &from.lobby_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&lobby_id_)) + sizeof(direction_));
  // @@protoc_insertion_point(copy_constructor:awd.net.ClientRelativeMove)
}

void ClientRelativeMove::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lobby_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&lobby_id_)) + sizeof(direction_));
}

ClientRelativeMove::~ClientRelativeMove() {
  // @@protoc_insertion_point(destructor:awd.net.ClientRelativeMove)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClientRelativeMove::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ClientRelativeMove::ArenaDtor(void* object) {
  ClientRelativeMove* _this = reinterpret_cast< ClientRelativeMove* >(object);
  (void)_this;
}
void ClientRelativeMove::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientRelativeMove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientRelativeMove::Clear() {
// @@protoc_insertion_point(message_clear_start:awd.net.ClientRelativeMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lobby_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&lobby_id_)) + sizeof(direction_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientRelativeMove::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 lobby_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 direction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientRelativeMove::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:awd.net.ClientRelativeMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 lobby_id = 1;
  if (this->lobby_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_lobby_id(), target);
  }

  // uint32 player_id = 2;
  if (this->player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_player_id(), target);
  }

  // uint32 direction = 3;
  if (this->direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_direction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:awd.net.ClientRelativeMove)
  return target;
}

size_t ClientRelativeMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:awd.net.ClientRelativeMove)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 lobby_id = 1;
  if (this->lobby_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lobby_id());
  }

  // uint32 player_id = 2;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_player_id());
  }

  // uint32 direction = 3;
  if (this->direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_direction());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientRelativeMove::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:awd.net.ClientRelativeMove)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientRelativeMove* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientRelativeMove>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:awd.net.ClientRelativeMove)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:awd.net.ClientRelativeMove)
    MergeFrom(*source);
  }
}

void ClientRelativeMove::MergeFrom(const ClientRelativeMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:awd.net.ClientRelativeMove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lobby_id() != 0) {
    _internal_set_lobby_id(from._internal_lobby_id());
  }
  if (from.player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
  if (from.direction() != 0) {
    _internal_set_direction(from._internal_direction());
  }
}

void ClientRelativeMove::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:awd.net.ClientRelativeMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientRelativeMove::CopyFrom(const ClientRelativeMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:awd.net.ClientRelativeMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientRelativeMove::IsInitialized() const {
  return true;
}

void ClientRelativeMove::InternalSwap(ClientRelativeMove* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientRelativeMove, direction_)
      + sizeof(ClientRelativeMove::direction_)
      - PROTOBUF_FIELD_OFFSET(ClientRelativeMove, lobby_id_)>(
          reinterpret_cast<char*>(&lobby_id_),
          reinterpret_cast<char*>(&other->lobby_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientRelativeMove::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UpdateEntityPosition::_Internal {
 public:
};

UpdateEntityPosition::UpdateEntityPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:awd.net.UpdateEntityPosition)
}
UpdateEntityPosition::UpdateEntityPosition(const UpdateEntityPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&entity_id_, &from.entity_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&pos_y_) -
    reinterpret_cast<char*>(&entity_id_)) + sizeof(pos_y_));
  // @@protoc_insertion_point(copy_constructor:awd.net.UpdateEntityPosition)
}

void UpdateEntityPosition::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&entity_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pos_y_) -
    reinterpret_cast<char*>(&entity_id_)) + sizeof(pos_y_));
}

UpdateEntityPosition::~UpdateEntityPosition() {
  // @@protoc_insertion_point(destructor:awd.net.UpdateEntityPosition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateEntityPosition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UpdateEntityPosition::ArenaDtor(void* object) {
  UpdateEntityPosition* _this = reinterpret_cast< UpdateEntityPosition* >(object);
  (void)_this;
}
void UpdateEntityPosition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateEntityPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateEntityPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:awd.net.UpdateEntityPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&entity_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pos_y_) -
      reinterpret_cast<char*>(&entity_id_)) + sizeof(pos_y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateEntityPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 entity_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          entity_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float pos_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          pos_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pos_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          pos_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateEntityPosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:awd.net.UpdateEntityPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 entity_id = 1;
  if (this->entity_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_entity_id(), target);
  }

  // float pos_x = 2;
  if (!(this->pos_x() <= 0 && this->pos_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_pos_x(), target);
  }

  // float pos_y = 3;
  if (!(this->pos_y() <= 0 && this->pos_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_pos_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:awd.net.UpdateEntityPosition)
  return target;
}

size_t UpdateEntityPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:awd.net.UpdateEntityPosition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 entity_id = 1;
  if (this->entity_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_entity_id());
  }

  // float pos_x = 2;
  if (!(this->pos_x() <= 0 && this->pos_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float pos_y = 3;
  if (!(this->pos_y() <= 0 && this->pos_y() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateEntityPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:awd.net.UpdateEntityPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateEntityPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateEntityPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:awd.net.UpdateEntityPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:awd.net.UpdateEntityPosition)
    MergeFrom(*source);
  }
}

void UpdateEntityPosition::MergeFrom(const UpdateEntityPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:awd.net.UpdateEntityPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.entity_id() != 0) {
    _internal_set_entity_id(from._internal_entity_id());
  }
  if (!(from.pos_x() <= 0 && from.pos_x() >= 0)) {
    _internal_set_pos_x(from._internal_pos_x());
  }
  if (!(from.pos_y() <= 0 && from.pos_y() >= 0)) {
    _internal_set_pos_y(from._internal_pos_y());
  }
}

void UpdateEntityPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:awd.net.UpdateEntityPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateEntityPosition::CopyFrom(const UpdateEntityPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:awd.net.UpdateEntityPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateEntityPosition::IsInitialized() const {
  return true;
}

void UpdateEntityPosition::InternalSwap(UpdateEntityPosition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateEntityPosition, pos_y_)
      + sizeof(UpdateEntityPosition::pos_y_)
      - PROTOBUF_FIELD_OFFSET(UpdateEntityPosition, entity_id_)>(
          reinterpret_cast<char*>(&entity_id_),
          reinterpret_cast<char*>(&other->entity_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateEntityPosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PacketWrapper::_Internal {
 public:
  static const ::awd::net::Ping& ping(const PacketWrapper* msg);
  static const ::awd::net::Pong& pong(const PacketWrapper* msg);
  static const ::awd::net::HandshakeRequest& handshake_request(const PacketWrapper* msg);
  static const ::awd::net::HandshakeResponse& handshake_response(const PacketWrapper* msg);
  static const ::awd::net::CreateLobbyRequest& create_lobby_request(const PacketWrapper* msg);
  static const ::awd::net::CreateLobbyResponse& create_lobby_response(const PacketWrapper* msg);
  static const ::awd::net::JoinLobbyRequest& join_lobby_request(const PacketWrapper* msg);
  static const ::awd::net::JoinLobbyResponse& join_lobby_response(const PacketWrapper* msg);
  static const ::awd::net::LeaveLobbyRequest& leave_lobby_request(const PacketWrapper* msg);
  static const ::awd::net::LeaveLobbyResponse& leave_lobby_response(const PacketWrapper* msg);
  static const ::awd::net::KickedFromLobby& kicked_from_lobby(const PacketWrapper* msg);
  static const ::awd::net::UpdatedMembersList& updated_members_list(const PacketWrapper* msg);
  static const ::awd::net::SpawnPlayer& spawn_player(const PacketWrapper* msg);
  static const ::awd::net::ClientRelativeMove& client_relative_move(const PacketWrapper* msg);
  static const ::awd::net::UpdateEntityPosition& update_entity_position(const PacketWrapper* msg);
};

const ::awd::net::Ping&
PacketWrapper::_Internal::ping(const PacketWrapper* msg) {
  return *msg->packet_.ping_;
}
const ::awd::net::Pong&
PacketWrapper::_Internal::pong(const PacketWrapper* msg) {
  return *msg->packet_.pong_;
}
const ::awd::net::HandshakeRequest&
PacketWrapper::_Internal::handshake_request(const PacketWrapper* msg) {
  return *msg->packet_.handshake_request_;
}
const ::awd::net::HandshakeResponse&
PacketWrapper::_Internal::handshake_response(const PacketWrapper* msg) {
  return *msg->packet_.handshake_response_;
}
const ::awd::net::CreateLobbyRequest&
PacketWrapper::_Internal::create_lobby_request(const PacketWrapper* msg) {
  return *msg->packet_.create_lobby_request_;
}
const ::awd::net::CreateLobbyResponse&
PacketWrapper::_Internal::create_lobby_response(const PacketWrapper* msg) {
  return *msg->packet_.create_lobby_response_;
}
const ::awd::net::JoinLobbyRequest&
PacketWrapper::_Internal::join_lobby_request(const PacketWrapper* msg) {
  return *msg->packet_.join_lobby_request_;
}
const ::awd::net::JoinLobbyResponse&
PacketWrapper::_Internal::join_lobby_response(const PacketWrapper* msg) {
  return *msg->packet_.join_lobby_response_;
}
const ::awd::net::LeaveLobbyRequest&
PacketWrapper::_Internal::leave_lobby_request(const PacketWrapper* msg) {
  return *msg->packet_.leave_lobby_request_;
}
const ::awd::net::LeaveLobbyResponse&
PacketWrapper::_Internal::leave_lobby_response(const PacketWrapper* msg) {
  return *msg->packet_.leave_lobby_response_;
}
const ::awd::net::KickedFromLobby&
PacketWrapper::_Internal::kicked_from_lobby(const PacketWrapper* msg) {
  return *msg->packet_.kicked_from_lobby_;
}
const ::awd::net::UpdatedMembersList&
PacketWrapper::_Internal::updated_members_list(const PacketWrapper* msg) {
  return *msg->packet_.updated_members_list_;
}
const ::awd::net::SpawnPlayer&
PacketWrapper::_Internal::spawn_player(const PacketWrapper* msg) {
  return *msg->packet_.spawn_player_;
}
const ::awd::net::ClientRelativeMove&
PacketWrapper::_Internal::client_relative_move(const PacketWrapper* msg) {
  return *msg->packet_.client_relative_move_;
}
const ::awd::net::UpdateEntityPosition&
PacketWrapper::_Internal::update_entity_position(const PacketWrapper* msg) {
  return *msg->packet_.update_entity_position_;
}
void PacketWrapper::set_allocated_ping(::awd::net::Ping* ping) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (ping) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ping);
    if (message_arena != submessage_arena) {
      ping = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ping, submessage_arena);
    }
    set_has_ping();
    packet_.ping_ = ping;
  }
  // @@protoc_insertion_point(field_set_allocated:awd.net.PacketWrapper.ping)
}
void PacketWrapper::set_allocated_pong(::awd::net::Pong* pong) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (pong) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pong);
    if (message_arena != submessage_arena) {
      pong = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pong, submessage_arena);
    }
    set_has_pong();
    packet_.pong_ = pong;
  }
  // @@protoc_insertion_point(field_set_allocated:awd.net.PacketWrapper.pong)
}
void PacketWrapper::set_allocated_handshake_request(::awd::net::HandshakeRequest* handshake_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (handshake_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(handshake_request);
    if (message_arena != submessage_arena) {
      handshake_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, handshake_request, submessage_arena);
    }
    set_has_handshake_request();
    packet_.handshake_request_ = handshake_request;
  }
  // @@protoc_insertion_point(field_set_allocated:awd.net.PacketWrapper.handshake_request)
}
void PacketWrapper::set_allocated_handshake_response(::awd::net::HandshakeResponse* handshake_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (handshake_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(handshake_response);
    if (message_arena != submessage_arena) {
      handshake_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, handshake_response, submessage_arena);
    }
    set_has_handshake_response();
    packet_.handshake_response_ = handshake_response;
  }
  // @@protoc_insertion_point(field_set_allocated:awd.net.PacketWrapper.handshake_response)
}
void PacketWrapper::set_allocated_create_lobby_request(::awd::net::CreateLobbyRequest* create_lobby_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (create_lobby_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(create_lobby_request);
    if (message_arena != submessage_arena) {
      create_lobby_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_lobby_request, submessage_arena);
    }
    set_has_create_lobby_request();
    packet_.create_lobby_request_ = create_lobby_request;
  }
  // @@protoc_insertion_point(field_set_allocated:awd.net.PacketWrapper.create_lobby_request)
}
void PacketWrapper::set_allocated_create_lobby_response(::awd::net::CreateLobbyResponse* create_lobby_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (create_lobby_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(create_lobby_response);
    if (message_arena != submessage_arena) {
      create_lobby_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_lobby_response, submessage_arena);
    }
    set_has_create_lobby_response();
    packet_.create_lobby_response_ = create_lobby_response;
  }
  // @@protoc_insertion_point(field_set_allocated:awd.net.PacketWrapper.create_lobby_response)
}
void PacketWrapper::set_allocated_join_lobby_request(::awd::net::JoinLobbyRequest* join_lobby_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (join_lobby_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(join_lobby_request);
    if (message_arena != submessage_arena) {
      join_lobby_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, join_lobby_request, submessage_arena);
    }
    set_has_join_lobby_request();
    packet_.join_lobby_request_ = join_lobby_request;
  }
  // @@protoc_insertion_point(field_set_allocated:awd.net.PacketWrapper.join_lobby_request)
}
void PacketWrapper::set_allocated_join_lobby_response(::awd::net::JoinLobbyResponse* join_lobby_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (join_lobby_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(join_lobby_response);
    if (message_arena != submessage_arena) {
      join_lobby_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, join_lobby_response, submessage_arena);
    }
    set_has_join_lobby_response();
    packet_.join_lobby_response_ = join_lobby_response;
  }
  // @@protoc_insertion_point(field_set_allocated:awd.net.PacketWrapper.join_lobby_response)
}
void PacketWrapper::set_allocated_leave_lobby_request(::awd::net::LeaveLobbyRequest* leave_lobby_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (leave_lobby_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(leave_lobby_request);
    if (message_arena != submessage_arena) {
      leave_lobby_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leave_lobby_request, submessage_arena);
    }
    set_has_leave_lobby_request();
    packet_.leave_lobby_request_ = leave_lobby_request;
  }
  // @@protoc_insertion_point(field_set_allocated:awd.net.PacketWrapper.leave_lobby_request)
}
void PacketWrapper::set_allocated_leave_lobby_response(::awd::net::LeaveLobbyResponse* leave_lobby_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (leave_lobby_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(leave_lobby_response);
    if (message_arena != submessage_arena) {
      leave_lobby_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leave_lobby_response, submessage_arena);
    }
    set_has_leave_lobby_response();
    packet_.leave_lobby_response_ = leave_lobby_response;
  }
  // @@protoc_insertion_point(field_set_allocated:awd.net.PacketWrapper.leave_lobby_response)
}
void PacketWrapper::set_allocated_kicked_from_lobby(::awd::net::KickedFromLobby* kicked_from_lobby) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (kicked_from_lobby) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(kicked_from_lobby);
    if (message_arena != submessage_arena) {
      kicked_from_lobby = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kicked_from_lobby, submessage_arena);
    }
    set_has_kicked_from_lobby();
    packet_.kicked_from_lobby_ = kicked_from_lobby;
  }
  // @@protoc_insertion_point(field_set_allocated:awd.net.PacketWrapper.kicked_from_lobby)
}
void PacketWrapper::set_allocated_updated_members_list(::awd::net::UpdatedMembersList* updated_members_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (updated_members_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(updated_members_list);
    if (message_arena != submessage_arena) {
      updated_members_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_members_list, submessage_arena);
    }
    set_has_updated_members_list();
    packet_.updated_members_list_ = updated_members_list;
  }
  // @@protoc_insertion_point(field_set_allocated:awd.net.PacketWrapper.updated_members_list)
}
void PacketWrapper::set_allocated_spawn_player(::awd::net::SpawnPlayer* spawn_player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (spawn_player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(spawn_player);
    if (message_arena != submessage_arena) {
      spawn_player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spawn_player, submessage_arena);
    }
    set_has_spawn_player();
    packet_.spawn_player_ = spawn_player;
  }
  // @@protoc_insertion_point(field_set_allocated:awd.net.PacketWrapper.spawn_player)
}
void PacketWrapper::set_allocated_client_relative_move(::awd::net::ClientRelativeMove* client_relative_move) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (client_relative_move) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(client_relative_move);
    if (message_arena != submessage_arena) {
      client_relative_move = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_relative_move, submessage_arena);
    }
    set_has_client_relative_move();
    packet_.client_relative_move_ = client_relative_move;
  }
  // @@protoc_insertion_point(field_set_allocated:awd.net.PacketWrapper.client_relative_move)
}
void PacketWrapper::set_allocated_update_entity_position(::awd::net::UpdateEntityPosition* update_entity_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_packet();
  if (update_entity_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(update_entity_position);
    if (message_arena != submessage_arena) {
      update_entity_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_entity_position, submessage_arena);
    }
    set_has_update_entity_position();
    packet_.update_entity_position_ = update_entity_position;
  }
  // @@protoc_insertion_point(field_set_allocated:awd.net.PacketWrapper.update_entity_position)
}
PacketWrapper::PacketWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:awd.net.PacketWrapper)
}
PacketWrapper::PacketWrapper(const PacketWrapper& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sequence_, &from.sequence_,
    static_cast<size_t>(reinterpret_cast<char*>(&ack_bitfield_) -
    reinterpret_cast<char*>(&sequence_)) + sizeof(ack_bitfield_));
  clear_has_packet();
  switch (from.packet_case()) {
    case kPing: {
      _internal_mutable_ping()->::awd::net::Ping::MergeFrom(from._internal_ping());
      break;
    }
    case kPong: {
      _internal_mutable_pong()->::awd::net::Pong::MergeFrom(from._internal_pong());
      break;
    }
    case kHandshakeRequest: {
      _internal_mutable_handshake_request()->::awd::net::HandshakeRequest::MergeFrom(from._internal_handshake_request());
      break;
    }
    case kHandshakeResponse: {
      _internal_mutable_handshake_response()->::awd::net::HandshakeResponse::MergeFrom(from._internal_handshake_response());
      break;
    }
    case kCreateLobbyRequest: {
      _internal_mutable_create_lobby_request()->::awd::net::CreateLobbyRequest::MergeFrom(from._internal_create_lobby_request());
      break;
    }
    case kCreateLobbyResponse: {
      _internal_mutable_create_lobby_response()->::awd::net::CreateLobbyResponse::MergeFrom(from._internal_create_lobby_response());
      break;
    }
    case kJoinLobbyRequest: {
      _internal_mutable_join_lobby_request()->::awd::net::JoinLobbyRequest::MergeFrom(from._internal_join_lobby_request());
      break;
    }
    case kJoinLobbyResponse: {
      _internal_mutable_join_lobby_response()->::awd::net::JoinLobbyResponse::MergeFrom(from._internal_join_lobby_response());
      break;
    }
    case kLeaveLobbyRequest: {
      _internal_mutable_leave_lobby_request()->::awd::net::LeaveLobbyRequest::MergeFrom(from._internal_leave_lobby_request());
      break;
    }
    case kLeaveLobbyResponse: {
      _internal_mutable_leave_lobby_response()->::awd::net::LeaveLobbyResponse::MergeFrom(from._internal_leave_lobby_response());
      break;
    }
    case kKickedFromLobby: {
      _internal_mutable_kicked_from_lobby()->::awd::net::KickedFromLobby::MergeFrom(from._internal_kicked_from_lobby());
      break;
    }
    case kUpdatedMembersList: {
      _internal_mutable_updated_members_list()->::awd::net::UpdatedMembersList::MergeFrom(from._internal_updated_members_list());
      break;
    }
    case kSpawnPlayer: {
      _internal_mutable_spawn_player()->::awd::net::SpawnPlayer::MergeFrom(from._internal_spawn_player());
      break;
    }
    case kClientRelativeMove: {
      _internal_mutable_client_relative_move()->::awd::net::ClientRelativeMove::MergeFrom(from._internal_client_relative_move());
      break;
    }
    case kUpdateEntityPosition: {
      _internal_mutable_update_entity_position()->::awd::net::UpdateEntityPosition::MergeFrom(from._internal_update_entity_position());
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:awd.net.PacketWrapper)
}

void PacketWrapper::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sequence_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ack_bitfield_) -
    reinterpret_cast<char*>(&sequence_)) + sizeof(ack_bitfield_));
clear_has_packet();
}

PacketWrapper::~PacketWrapper() {
  // @@protoc_insertion_point(destructor:awd.net.PacketWrapper)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PacketWrapper::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_packet()) {
    clear_packet();
  }
}

void PacketWrapper::ArenaDtor(void* object) {
  PacketWrapper* _this = reinterpret_cast< PacketWrapper* >(object);
  (void)_this;
}
void PacketWrapper::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PacketWrapper::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PacketWrapper::clear_packet() {
// @@protoc_insertion_point(one_of_clear_start:awd.net.PacketWrapper)
  switch (packet_case()) {
    case kPing: {
      if (GetArena() == nullptr) {
        delete packet_.ping_;
      }
      break;
    }
    case kPong: {
      if (GetArena() == nullptr) {
        delete packet_.pong_;
      }
      break;
    }
    case kHandshakeRequest: {
      if (GetArena() == nullptr) {
        delete packet_.handshake_request_;
      }
      break;
    }
    case kHandshakeResponse: {
      if (GetArena() == nullptr) {
        delete packet_.handshake_response_;
      }
      break;
    }
    case kCreateLobbyRequest: {
      if (GetArena() == nullptr) {
        delete packet_.create_lobby_request_;
      }
      break;
    }
    case kCreateLobbyResponse: {
      if (GetArena() == nullptr) {
        delete packet_.create_lobby_response_;
      }
      break;
    }
    case kJoinLobbyRequest: {
      if (GetArena() == nullptr) {
        delete packet_.join_lobby_request_;
      }
      break;
    }
    case kJoinLobbyResponse: {
      if (GetArena() == nullptr) {
        delete packet_.join_lobby_response_;
      }
      break;
    }
    case kLeaveLobbyRequest: {
      if (GetArena() == nullptr) {
        delete packet_.leave_lobby_request_;
      }
      break;
    }
    case kLeaveLobbyResponse: {
      if (GetArena() == nullptr) {
        delete packet_.leave_lobby_response_;
      }
      break;
    }
    case kKickedFromLobby: {
      if (GetArena() == nullptr) {
        delete packet_.kicked_from_lobby_;
      }
      break;
    }
    case kUpdatedMembersList: {
      if (GetArena() == nullptr) {
        delete packet_.updated_members_list_;
      }
      break;
    }
    case kSpawnPlayer: {
      if (GetArena() == nullptr) {
        delete packet_.spawn_player_;
      }
      break;
    }
    case kClientRelativeMove: {
      if (GetArena() == nullptr) {
        delete packet_.client_relative_move_;
      }
      break;
    }
    case kUpdateEntityPosition: {
      if (GetArena() == nullptr) {
        delete packet_.update_entity_position_;
      }
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PACKET_NOT_SET;
}


void PacketWrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:awd.net.PacketWrapper)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sequence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ack_bitfield_) -
      reinterpret_cast<char*>(&sequence_)) + sizeof(ack_bitfield_));
  clear_packet();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PacketWrapper::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 sequence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 ack = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 ack_bitfield = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ack_bitfield_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .awd.net.Ping ping = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .awd.net.Pong pong = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_pong(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .awd.net.HandshakeRequest handshake_request = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_handshake_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .awd.net.HandshakeResponse handshake_response = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_handshake_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .awd.net.CreateLobbyRequest create_lobby_request = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_lobby_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .awd.net.CreateLobbyResponse create_lobby_response = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_lobby_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .awd.net.JoinLobbyRequest join_lobby_request = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_join_lobby_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .awd.net.JoinLobbyResponse join_lobby_response = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_join_lobby_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .awd.net.LeaveLobbyRequest leave_lobby_request = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_leave_lobby_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .awd.net.LeaveLobbyResponse leave_lobby_response = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_leave_lobby_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .awd.net.KickedFromLobby kicked_from_lobby = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_kicked_from_lobby(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .awd.net.UpdatedMembersList updated_members_list = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_members_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .awd.net.SpawnPlayer spawn_player = 1000;
      case 1000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_spawn_player(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .awd.net.ClientRelativeMove client_relative_move = 2000;
      case 2000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_relative_move(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .awd.net.UpdateEntityPosition update_entity_position = 2001;
      case 2001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_entity_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PacketWrapper::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:awd.net.PacketWrapper)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sequence = 1;
  if (this->sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sequence(), target);
  }

  // uint32 ack = 2;
  if (this->ack() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ack(), target);
  }

  // uint64 ack_bitfield = 3;
  if (this->ack_bitfield() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_ack_bitfield(), target);
  }

  // .awd.net.Ping ping = 4;
  if (_internal_has_ping()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::ping(this), target, stream);
  }

  // .awd.net.Pong pong = 5;
  if (_internal_has_pong()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::pong(this), target, stream);
  }

  // .awd.net.HandshakeRequest handshake_request = 10;
  if (_internal_has_handshake_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::handshake_request(this), target, stream);
  }

  // .awd.net.HandshakeResponse handshake_response = 11;
  if (_internal_has_handshake_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::handshake_response(this), target, stream);
  }

  // .awd.net.CreateLobbyRequest create_lobby_request = 100;
  if (_internal_has_create_lobby_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::create_lobby_request(this), target, stream);
  }

  // .awd.net.CreateLobbyResponse create_lobby_response = 101;
  if (_internal_has_create_lobby_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        101, _Internal::create_lobby_response(this), target, stream);
  }

  // .awd.net.JoinLobbyRequest join_lobby_request = 102;
  if (_internal_has_join_lobby_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        102, _Internal::join_lobby_request(this), target, stream);
  }

  // .awd.net.JoinLobbyResponse join_lobby_response = 103;
  if (_internal_has_join_lobby_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        103, _Internal::join_lobby_response(this), target, stream);
  }

  // .awd.net.LeaveLobbyRequest leave_lobby_request = 104;
  if (_internal_has_leave_lobby_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        104, _Internal::leave_lobby_request(this), target, stream);
  }

  // .awd.net.LeaveLobbyResponse leave_lobby_response = 105;
  if (_internal_has_leave_lobby_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        105, _Internal::leave_lobby_response(this), target, stream);
  }

  // .awd.net.KickedFromLobby kicked_from_lobby = 106;
  if (_internal_has_kicked_from_lobby()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        106, _Internal::kicked_from_lobby(this), target, stream);
  }

  // .awd.net.UpdatedMembersList updated_members_list = 107;
  if (_internal_has_updated_members_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        107, _Internal::updated_members_list(this), target, stream);
  }

  // .awd.net.SpawnPlayer spawn_player = 1000;
  if (_internal_has_spawn_player()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1000, _Internal::spawn_player(this), target, stream);
  }

  // .awd.net.ClientRelativeMove client_relative_move = 2000;
  if (_internal_has_client_relative_move()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2000, _Internal::client_relative_move(this), target, stream);
  }

  // .awd.net.UpdateEntityPosition update_entity_position = 2001;
  if (_internal_has_update_entity_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2001, _Internal::update_entity_position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:awd.net.PacketWrapper)
  return target;
}

size_t PacketWrapper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:awd.net.PacketWrapper)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 sequence = 1;
  if (this->sequence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sequence());
  }

  // uint32 ack = 2;
  if (this->ack() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_ack());
  }

  // uint64 ack_bitfield = 3;
  if (this->ack_bitfield() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_ack_bitfield());
  }

  switch (packet_case()) {
    // .awd.net.Ping ping = 4;
    case kPing: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.ping_);
      break;
    }
    // .awd.net.Pong pong = 5;
    case kPong: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.pong_);
      break;
    }
    // .awd.net.HandshakeRequest handshake_request = 10;
    case kHandshakeRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.handshake_request_);
      break;
    }
    // .awd.net.HandshakeResponse handshake_response = 11;
    case kHandshakeResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.handshake_response_);
      break;
    }
    // .awd.net.CreateLobbyRequest create_lobby_request = 100;
    case kCreateLobbyRequest: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.create_lobby_request_);
      break;
    }
    // .awd.net.CreateLobbyResponse create_lobby_response = 101;
    case kCreateLobbyResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.create_lobby_response_);
      break;
    }
    // .awd.net.JoinLobbyRequest join_lobby_request = 102;
    case kJoinLobbyRequest: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.join_lobby_request_);
      break;
    }
    // .awd.net.JoinLobbyResponse join_lobby_response = 103;
    case kJoinLobbyResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.join_lobby_response_);
      break;
    }
    // .awd.net.LeaveLobbyRequest leave_lobby_request = 104;
    case kLeaveLobbyRequest: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.leave_lobby_request_);
      break;
    }
    // .awd.net.LeaveLobbyResponse leave_lobby_response = 105;
    case kLeaveLobbyResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.leave_lobby_response_);
      break;
    }
    // .awd.net.KickedFromLobby kicked_from_lobby = 106;
    case kKickedFromLobby: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.kicked_from_lobby_);
      break;
    }
    // .awd.net.UpdatedMembersList updated_members_list = 107;
    case kUpdatedMembersList: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.updated_members_list_);
      break;
    }
    // .awd.net.SpawnPlayer spawn_player = 1000;
    case kSpawnPlayer: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.spawn_player_);
      break;
    }
    // .awd.net.ClientRelativeMove client_relative_move = 2000;
    case kClientRelativeMove: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.client_relative_move_);
      break;
    }
    // .awd.net.UpdateEntityPosition update_entity_position = 2001;
    case kUpdateEntityPosition: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packet_.update_entity_position_);
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PacketWrapper::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:awd.net.PacketWrapper)
  GOOGLE_DCHECK_NE(&from, this);
  const PacketWrapper* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PacketWrapper>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:awd.net.PacketWrapper)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:awd.net.PacketWrapper)
    MergeFrom(*source);
  }
}

void PacketWrapper::MergeFrom(const PacketWrapper& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:awd.net.PacketWrapper)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sequence() != 0) {
    _internal_set_sequence(from._internal_sequence());
  }
  if (from.ack() != 0) {
    _internal_set_ack(from._internal_ack());
  }
  if (from.ack_bitfield() != 0) {
    _internal_set_ack_bitfield(from._internal_ack_bitfield());
  }
  switch (from.packet_case()) {
    case kPing: {
      _internal_mutable_ping()->::awd::net::Ping::MergeFrom(from._internal_ping());
      break;
    }
    case kPong: {
      _internal_mutable_pong()->::awd::net::Pong::MergeFrom(from._internal_pong());
      break;
    }
    case kHandshakeRequest: {
      _internal_mutable_handshake_request()->::awd::net::HandshakeRequest::MergeFrom(from._internal_handshake_request());
      break;
    }
    case kHandshakeResponse: {
      _internal_mutable_handshake_response()->::awd::net::HandshakeResponse::MergeFrom(from._internal_handshake_response());
      break;
    }
    case kCreateLobbyRequest: {
      _internal_mutable_create_lobby_request()->::awd::net::CreateLobbyRequest::MergeFrom(from._internal_create_lobby_request());
      break;
    }
    case kCreateLobbyResponse: {
      _internal_mutable_create_lobby_response()->::awd::net::CreateLobbyResponse::MergeFrom(from._internal_create_lobby_response());
      break;
    }
    case kJoinLobbyRequest: {
      _internal_mutable_join_lobby_request()->::awd::net::JoinLobbyRequest::MergeFrom(from._internal_join_lobby_request());
      break;
    }
    case kJoinLobbyResponse: {
      _internal_mutable_join_lobby_response()->::awd::net::JoinLobbyResponse::MergeFrom(from._internal_join_lobby_response());
      break;
    }
    case kLeaveLobbyRequest: {
      _internal_mutable_leave_lobby_request()->::awd::net::LeaveLobbyRequest::MergeFrom(from._internal_leave_lobby_request());
      break;
    }
    case kLeaveLobbyResponse: {
      _internal_mutable_leave_lobby_response()->::awd::net::LeaveLobbyResponse::MergeFrom(from._internal_leave_lobby_response());
      break;
    }
    case kKickedFromLobby: {
      _internal_mutable_kicked_from_lobby()->::awd::net::KickedFromLobby::MergeFrom(from._internal_kicked_from_lobby());
      break;
    }
    case kUpdatedMembersList: {
      _internal_mutable_updated_members_list()->::awd::net::UpdatedMembersList::MergeFrom(from._internal_updated_members_list());
      break;
    }
    case kSpawnPlayer: {
      _internal_mutable_spawn_player()->::awd::net::SpawnPlayer::MergeFrom(from._internal_spawn_player());
      break;
    }
    case kClientRelativeMove: {
      _internal_mutable_client_relative_move()->::awd::net::ClientRelativeMove::MergeFrom(from._internal_client_relative_move());
      break;
    }
    case kUpdateEntityPosition: {
      _internal_mutable_update_entity_position()->::awd::net::UpdateEntityPosition::MergeFrom(from._internal_update_entity_position());
      break;
    }
    case PACKET_NOT_SET: {
      break;
    }
  }
}

void PacketWrapper::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:awd.net.PacketWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PacketWrapper::CopyFrom(const PacketWrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:awd.net.PacketWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketWrapper::IsInitialized() const {
  return true;
}

void PacketWrapper::InternalSwap(PacketWrapper* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PacketWrapper, ack_bitfield_)
      + sizeof(PacketWrapper::ack_bitfield_)
      - PROTOBUF_FIELD_OFFSET(PacketWrapper, sequence_)>(
          reinterpret_cast<char*>(&sequence_),
          reinterpret_cast<char*>(&other->sequence_));
  swap(packet_, other->packet_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PacketWrapper::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace net
}  // namespace awd
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::awd::net::Ping* Arena::CreateMaybeMessage< ::awd::net::Ping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::awd::net::Ping >(arena);
}
template<> PROTOBUF_NOINLINE ::awd::net::Pong* Arena::CreateMaybeMessage< ::awd::net::Pong >(Arena* arena) {
  return Arena::CreateMessageInternal< ::awd::net::Pong >(arena);
}
template<> PROTOBUF_NOINLINE ::awd::net::HandshakeRequest* Arena::CreateMaybeMessage< ::awd::net::HandshakeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::awd::net::HandshakeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::awd::net::HandshakeResponse* Arena::CreateMaybeMessage< ::awd::net::HandshakeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::awd::net::HandshakeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::awd::net::CreateLobbyRequest* Arena::CreateMaybeMessage< ::awd::net::CreateLobbyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::awd::net::CreateLobbyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::awd::net::CreateLobbyResponse* Arena::CreateMaybeMessage< ::awd::net::CreateLobbyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::awd::net::CreateLobbyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::awd::net::JoinLobbyRequest* Arena::CreateMaybeMessage< ::awd::net::JoinLobbyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::awd::net::JoinLobbyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::awd::net::JoinLobbyResponse_OthersNamesEntry_DoNotUse* Arena::CreateMaybeMessage< ::awd::net::JoinLobbyResponse_OthersNamesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::awd::net::JoinLobbyResponse_OthersNamesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::awd::net::JoinLobbyResponse_OthersCharactersEntry_DoNotUse* Arena::CreateMaybeMessage< ::awd::net::JoinLobbyResponse_OthersCharactersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::awd::net::JoinLobbyResponse_OthersCharactersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::awd::net::JoinLobbyResponse* Arena::CreateMaybeMessage< ::awd::net::JoinLobbyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::awd::net::JoinLobbyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::awd::net::LeaveLobbyRequest* Arena::CreateMaybeMessage< ::awd::net::LeaveLobbyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::awd::net::LeaveLobbyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::awd::net::LeaveLobbyResponse* Arena::CreateMaybeMessage< ::awd::net::LeaveLobbyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::awd::net::LeaveLobbyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::awd::net::KickedFromLobby* Arena::CreateMaybeMessage< ::awd::net::KickedFromLobby >(Arena* arena) {
  return Arena::CreateMessageInternal< ::awd::net::KickedFromLobby >(arena);
}
template<> PROTOBUF_NOINLINE ::awd::net::UpdatedMembersList_NewAllNamesEntry_DoNotUse* Arena::CreateMaybeMessage< ::awd::net::UpdatedMembersList_NewAllNamesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::awd::net::UpdatedMembersList_NewAllNamesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::awd::net::UpdatedMembersList_NewAllCharactersEntry_DoNotUse* Arena::CreateMaybeMessage< ::awd::net::UpdatedMembersList_NewAllCharactersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::awd::net::UpdatedMembersList_NewAllCharactersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::awd::net::UpdatedMembersList* Arena::CreateMaybeMessage< ::awd::net::UpdatedMembersList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::awd::net::UpdatedMembersList >(arena);
}
template<> PROTOBUF_NOINLINE ::awd::net::SpawnPlayer* Arena::CreateMaybeMessage< ::awd::net::SpawnPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::awd::net::SpawnPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::awd::net::ClientRelativeMove* Arena::CreateMaybeMessage< ::awd::net::ClientRelativeMove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::awd::net::ClientRelativeMove >(arena);
}
template<> PROTOBUF_NOINLINE ::awd::net::UpdateEntityPosition* Arena::CreateMaybeMessage< ::awd::net::UpdateEntityPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::awd::net::UpdateEntityPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::awd::net::PacketWrapper* Arena::CreateMaybeMessage< ::awd::net::PacketWrapper >(Arena* arena) {
  return Arena::CreateMessageInternal< ::awd::net::PacketWrapper >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
