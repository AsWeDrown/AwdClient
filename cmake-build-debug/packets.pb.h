// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packets.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_packets_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_packets_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_packets_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_packets_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_packets_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_packets_2eproto_metadata_getter(int index);
namespace awd {
namespace net {
class CreateLobbyRequest;
struct CreateLobbyRequestDefaultTypeInternal;
extern CreateLobbyRequestDefaultTypeInternal _CreateLobbyRequest_default_instance_;
class CreateLobbyResponse;
struct CreateLobbyResponseDefaultTypeInternal;
extern CreateLobbyResponseDefaultTypeInternal _CreateLobbyResponse_default_instance_;
class HandshakeRequest;
struct HandshakeRequestDefaultTypeInternal;
extern HandshakeRequestDefaultTypeInternal _HandshakeRequest_default_instance_;
class HandshakeResponse;
struct HandshakeResponseDefaultTypeInternal;
extern HandshakeResponseDefaultTypeInternal _HandshakeResponse_default_instance_;
class JoinLobbyRequest;
struct JoinLobbyRequestDefaultTypeInternal;
extern JoinLobbyRequestDefaultTypeInternal _JoinLobbyRequest_default_instance_;
class JoinLobbyResponse;
struct JoinLobbyResponseDefaultTypeInternal;
extern JoinLobbyResponseDefaultTypeInternal _JoinLobbyResponse_default_instance_;
class JoinLobbyResponse_OtherPlayersEntry_DoNotUse;
struct JoinLobbyResponse_OtherPlayersEntry_DoNotUseDefaultTypeInternal;
extern JoinLobbyResponse_OtherPlayersEntry_DoNotUseDefaultTypeInternal _JoinLobbyResponse_OtherPlayersEntry_DoNotUse_default_instance_;
class KeepAlive;
struct KeepAliveDefaultTypeInternal;
extern KeepAliveDefaultTypeInternal _KeepAlive_default_instance_;
class KickedFromLobby;
struct KickedFromLobbyDefaultTypeInternal;
extern KickedFromLobbyDefaultTypeInternal _KickedFromLobby_default_instance_;
class LeaveLobbyRequest;
struct LeaveLobbyRequestDefaultTypeInternal;
extern LeaveLobbyRequestDefaultTypeInternal _LeaveLobbyRequest_default_instance_;
class LeaveLobbyResponse;
struct LeaveLobbyResponseDefaultTypeInternal;
extern LeaveLobbyResponseDefaultTypeInternal _LeaveLobbyResponse_default_instance_;
class PacketWrapper;
struct PacketWrapperDefaultTypeInternal;
extern PacketWrapperDefaultTypeInternal _PacketWrapper_default_instance_;
class Ping;
struct PingDefaultTypeInternal;
extern PingDefaultTypeInternal _Ping_default_instance_;
class Pong;
struct PongDefaultTypeInternal;
extern PongDefaultTypeInternal _Pong_default_instance_;
class UpdatedMembersList;
struct UpdatedMembersListDefaultTypeInternal;
extern UpdatedMembersListDefaultTypeInternal _UpdatedMembersList_default_instance_;
class UpdatedMembersList_MembersEntry_DoNotUse;
struct UpdatedMembersList_MembersEntry_DoNotUseDefaultTypeInternal;
extern UpdatedMembersList_MembersEntry_DoNotUseDefaultTypeInternal _UpdatedMembersList_MembersEntry_DoNotUse_default_instance_;
}  // namespace net
}  // namespace awd
PROTOBUF_NAMESPACE_OPEN
template<> ::awd::net::CreateLobbyRequest* Arena::CreateMaybeMessage<::awd::net::CreateLobbyRequest>(Arena*);
template<> ::awd::net::CreateLobbyResponse* Arena::CreateMaybeMessage<::awd::net::CreateLobbyResponse>(Arena*);
template<> ::awd::net::HandshakeRequest* Arena::CreateMaybeMessage<::awd::net::HandshakeRequest>(Arena*);
template<> ::awd::net::HandshakeResponse* Arena::CreateMaybeMessage<::awd::net::HandshakeResponse>(Arena*);
template<> ::awd::net::JoinLobbyRequest* Arena::CreateMaybeMessage<::awd::net::JoinLobbyRequest>(Arena*);
template<> ::awd::net::JoinLobbyResponse* Arena::CreateMaybeMessage<::awd::net::JoinLobbyResponse>(Arena*);
template<> ::awd::net::JoinLobbyResponse_OtherPlayersEntry_DoNotUse* Arena::CreateMaybeMessage<::awd::net::JoinLobbyResponse_OtherPlayersEntry_DoNotUse>(Arena*);
template<> ::awd::net::KeepAlive* Arena::CreateMaybeMessage<::awd::net::KeepAlive>(Arena*);
template<> ::awd::net::KickedFromLobby* Arena::CreateMaybeMessage<::awd::net::KickedFromLobby>(Arena*);
template<> ::awd::net::LeaveLobbyRequest* Arena::CreateMaybeMessage<::awd::net::LeaveLobbyRequest>(Arena*);
template<> ::awd::net::LeaveLobbyResponse* Arena::CreateMaybeMessage<::awd::net::LeaveLobbyResponse>(Arena*);
template<> ::awd::net::PacketWrapper* Arena::CreateMaybeMessage<::awd::net::PacketWrapper>(Arena*);
template<> ::awd::net::Ping* Arena::CreateMaybeMessage<::awd::net::Ping>(Arena*);
template<> ::awd::net::Pong* Arena::CreateMaybeMessage<::awd::net::Pong>(Arena*);
template<> ::awd::net::UpdatedMembersList* Arena::CreateMaybeMessage<::awd::net::UpdatedMembersList>(Arena*);
template<> ::awd::net::UpdatedMembersList_MembersEntry_DoNotUse* Arena::CreateMaybeMessage<::awd::net::UpdatedMembersList_MembersEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace awd {
namespace net {

// ===================================================================

class HandshakeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:awd.net.HandshakeRequest) */ {
 public:
  inline HandshakeRequest() : HandshakeRequest(nullptr) {}
  virtual ~HandshakeRequest();
  explicit constexpr HandshakeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HandshakeRequest(const HandshakeRequest& from);
  HandshakeRequest(HandshakeRequest&& from) noexcept
    : HandshakeRequest() {
    *this = ::std::move(from);
  }

  inline HandshakeRequest& operator=(const HandshakeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HandshakeRequest& operator=(HandshakeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HandshakeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HandshakeRequest* internal_default_instance() {
    return reinterpret_cast<const HandshakeRequest*>(
               &_HandshakeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HandshakeRequest& a, HandshakeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HandshakeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HandshakeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HandshakeRequest* New() const final {
    return CreateMaybeMessage<HandshakeRequest>(nullptr);
  }

  HandshakeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HandshakeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HandshakeRequest& from);
  void MergeFrom(const HandshakeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HandshakeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "awd.net.HandshakeRequest";
  }
  protected:
  explicit HandshakeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_packets_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtocolVersionFieldNumber = 1,
  };
  // uint32 protocol_version = 1;
  void clear_protocol_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 protocol_version() const;
  void set_protocol_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_protocol_version() const;
  void _internal_set_protocol_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:awd.net.HandshakeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 protocol_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packets_2eproto;
};
// -------------------------------------------------------------------

class HandshakeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:awd.net.HandshakeResponse) */ {
 public:
  inline HandshakeResponse() : HandshakeResponse(nullptr) {}
  virtual ~HandshakeResponse();
  explicit constexpr HandshakeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HandshakeResponse(const HandshakeResponse& from);
  HandshakeResponse(HandshakeResponse&& from) noexcept
    : HandshakeResponse() {
    *this = ::std::move(from);
  }

  inline HandshakeResponse& operator=(const HandshakeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HandshakeResponse& operator=(HandshakeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HandshakeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const HandshakeResponse* internal_default_instance() {
    return reinterpret_cast<const HandshakeResponse*>(
               &_HandshakeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HandshakeResponse& a, HandshakeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HandshakeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HandshakeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HandshakeResponse* New() const final {
    return CreateMaybeMessage<HandshakeResponse>(nullptr);
  }

  HandshakeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HandshakeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HandshakeResponse& from);
  void MergeFrom(const HandshakeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HandshakeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "awd.net.HandshakeResponse";
  }
  protected:
  explicit HandshakeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_packets_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtocolVersionFieldNumber = 1,
  };
  // uint32 protocol_version = 1;
  void clear_protocol_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 protocol_version() const;
  void set_protocol_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_protocol_version() const;
  void _internal_set_protocol_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:awd.net.HandshakeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 protocol_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packets_2eproto;
};
// -------------------------------------------------------------------

class CreateLobbyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:awd.net.CreateLobbyRequest) */ {
 public:
  inline CreateLobbyRequest() : CreateLobbyRequest(nullptr) {}
  virtual ~CreateLobbyRequest();
  explicit constexpr CreateLobbyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateLobbyRequest(const CreateLobbyRequest& from);
  CreateLobbyRequest(CreateLobbyRequest&& from) noexcept
    : CreateLobbyRequest() {
    *this = ::std::move(from);
  }

  inline CreateLobbyRequest& operator=(const CreateLobbyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateLobbyRequest& operator=(CreateLobbyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateLobbyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateLobbyRequest* internal_default_instance() {
    return reinterpret_cast<const CreateLobbyRequest*>(
               &_CreateLobbyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreateLobbyRequest& a, CreateLobbyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateLobbyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateLobbyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateLobbyRequest* New() const final {
    return CreateMaybeMessage<CreateLobbyRequest>(nullptr);
  }

  CreateLobbyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateLobbyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateLobbyRequest& from);
  void MergeFrom(const CreateLobbyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateLobbyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "awd.net.CreateLobbyRequest";
  }
  protected:
  explicit CreateLobbyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_packets_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerNameFieldNumber = 1,
  };
  // string player_name = 1;
  void clear_player_name();
  const std::string& player_name() const;
  void set_player_name(const std::string& value);
  void set_player_name(std::string&& value);
  void set_player_name(const char* value);
  void set_player_name(const char* value, size_t size);
  std::string* mutable_player_name();
  std::string* release_player_name();
  void set_allocated_player_name(std::string* player_name);
  private:
  const std::string& _internal_player_name() const;
  void _internal_set_player_name(const std::string& value);
  std::string* _internal_mutable_player_name();
  public:

  // @@protoc_insertion_point(class_scope:awd.net.CreateLobbyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packets_2eproto;
};
// -------------------------------------------------------------------

class CreateLobbyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:awd.net.CreateLobbyResponse) */ {
 public:
  inline CreateLobbyResponse() : CreateLobbyResponse(nullptr) {}
  virtual ~CreateLobbyResponse();
  explicit constexpr CreateLobbyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateLobbyResponse(const CreateLobbyResponse& from);
  CreateLobbyResponse(CreateLobbyResponse&& from) noexcept
    : CreateLobbyResponse() {
    *this = ::std::move(from);
  }

  inline CreateLobbyResponse& operator=(const CreateLobbyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateLobbyResponse& operator=(CreateLobbyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateLobbyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateLobbyResponse* internal_default_instance() {
    return reinterpret_cast<const CreateLobbyResponse*>(
               &_CreateLobbyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreateLobbyResponse& a, CreateLobbyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateLobbyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateLobbyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateLobbyResponse* New() const final {
    return CreateMaybeMessage<CreateLobbyResponse>(nullptr);
  }

  CreateLobbyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateLobbyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateLobbyResponse& from);
  void MergeFrom(const CreateLobbyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateLobbyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "awd.net.CreateLobbyResponse";
  }
  protected:
  explicit CreateLobbyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_packets_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLobbyIdFieldNumber = 1,
    kPlayerIdFieldNumber = 2,
  };
  // sint32 lobby_id = 1;
  void clear_lobby_id();
  ::PROTOBUF_NAMESPACE_ID::int32 lobby_id() const;
  void set_lobby_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lobby_id() const;
  void _internal_set_lobby_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 player_id = 2;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:awd.net.CreateLobbyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 lobby_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packets_2eproto;
};
// -------------------------------------------------------------------

class JoinLobbyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:awd.net.JoinLobbyRequest) */ {
 public:
  inline JoinLobbyRequest() : JoinLobbyRequest(nullptr) {}
  virtual ~JoinLobbyRequest();
  explicit constexpr JoinLobbyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JoinLobbyRequest(const JoinLobbyRequest& from);
  JoinLobbyRequest(JoinLobbyRequest&& from) noexcept
    : JoinLobbyRequest() {
    *this = ::std::move(from);
  }

  inline JoinLobbyRequest& operator=(const JoinLobbyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinLobbyRequest& operator=(JoinLobbyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JoinLobbyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinLobbyRequest* internal_default_instance() {
    return reinterpret_cast<const JoinLobbyRequest*>(
               &_JoinLobbyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(JoinLobbyRequest& a, JoinLobbyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinLobbyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinLobbyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JoinLobbyRequest* New() const final {
    return CreateMaybeMessage<JoinLobbyRequest>(nullptr);
  }

  JoinLobbyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JoinLobbyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JoinLobbyRequest& from);
  void MergeFrom(const JoinLobbyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinLobbyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "awd.net.JoinLobbyRequest";
  }
  protected:
  explicit JoinLobbyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_packets_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerNameFieldNumber = 2,
    kLobbyIdFieldNumber = 1,
  };
  // string player_name = 2;
  void clear_player_name();
  const std::string& player_name() const;
  void set_player_name(const std::string& value);
  void set_player_name(std::string&& value);
  void set_player_name(const char* value);
  void set_player_name(const char* value, size_t size);
  std::string* mutable_player_name();
  std::string* release_player_name();
  void set_allocated_player_name(std::string* player_name);
  private:
  const std::string& _internal_player_name() const;
  void _internal_set_player_name(const std::string& value);
  std::string* _internal_mutable_player_name();
  public:

  // uint32 lobby_id = 1;
  void clear_lobby_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 lobby_id() const;
  void set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lobby_id() const;
  void _internal_set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:awd.net.JoinLobbyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lobby_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packets_2eproto;
};
// -------------------------------------------------------------------

class JoinLobbyResponse_OtherPlayersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<JoinLobbyResponse_OtherPlayersEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<JoinLobbyResponse_OtherPlayersEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  JoinLobbyResponse_OtherPlayersEntry_DoNotUse();
  explicit constexpr JoinLobbyResponse_OtherPlayersEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit JoinLobbyResponse_OtherPlayersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const JoinLobbyResponse_OtherPlayersEntry_DoNotUse& other);
  static const JoinLobbyResponse_OtherPlayersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const JoinLobbyResponse_OtherPlayersEntry_DoNotUse*>(&_JoinLobbyResponse_OtherPlayersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "awd.net.JoinLobbyResponse.OtherPlayersEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_packets_2eproto);
    return ::descriptor_table_packets_2eproto.file_level_metadata[5];
  }

  public:
};

// -------------------------------------------------------------------

class JoinLobbyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:awd.net.JoinLobbyResponse) */ {
 public:
  inline JoinLobbyResponse() : JoinLobbyResponse(nullptr) {}
  virtual ~JoinLobbyResponse();
  explicit constexpr JoinLobbyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JoinLobbyResponse(const JoinLobbyResponse& from);
  JoinLobbyResponse(JoinLobbyResponse&& from) noexcept
    : JoinLobbyResponse() {
    *this = ::std::move(from);
  }

  inline JoinLobbyResponse& operator=(const JoinLobbyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinLobbyResponse& operator=(JoinLobbyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JoinLobbyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinLobbyResponse* internal_default_instance() {
    return reinterpret_cast<const JoinLobbyResponse*>(
               &_JoinLobbyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(JoinLobbyResponse& a, JoinLobbyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinLobbyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinLobbyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JoinLobbyResponse* New() const final {
    return CreateMaybeMessage<JoinLobbyResponse>(nullptr);
  }

  JoinLobbyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JoinLobbyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JoinLobbyResponse& from);
  void MergeFrom(const JoinLobbyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinLobbyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "awd.net.JoinLobbyResponse";
  }
  protected:
  explicit JoinLobbyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_packets_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kOtherPlayersFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // map<int32, string> other_players = 2;
  int other_players_size() const;
  private:
  int _internal_other_players_size() const;
  public:
  void clear_other_players();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
      _internal_other_players() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
      _internal_mutable_other_players();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
      other_players() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
      mutable_other_players();

  // sint32 player_id = 1;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::int32 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:awd.net.JoinLobbyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      JoinLobbyResponse_OtherPlayersEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> other_players_;
  ::PROTOBUF_NAMESPACE_ID::int32 player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packets_2eproto;
};
// -------------------------------------------------------------------

class LeaveLobbyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:awd.net.LeaveLobbyRequest) */ {
 public:
  inline LeaveLobbyRequest() : LeaveLobbyRequest(nullptr) {}
  virtual ~LeaveLobbyRequest();
  explicit constexpr LeaveLobbyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LeaveLobbyRequest(const LeaveLobbyRequest& from);
  LeaveLobbyRequest(LeaveLobbyRequest&& from) noexcept
    : LeaveLobbyRequest() {
    *this = ::std::move(from);
  }

  inline LeaveLobbyRequest& operator=(const LeaveLobbyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaveLobbyRequest& operator=(LeaveLobbyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LeaveLobbyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LeaveLobbyRequest* internal_default_instance() {
    return reinterpret_cast<const LeaveLobbyRequest*>(
               &_LeaveLobbyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LeaveLobbyRequest& a, LeaveLobbyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaveLobbyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LeaveLobbyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LeaveLobbyRequest* New() const final {
    return CreateMaybeMessage<LeaveLobbyRequest>(nullptr);
  }

  LeaveLobbyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LeaveLobbyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LeaveLobbyRequest& from);
  void MergeFrom(const LeaveLobbyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaveLobbyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "awd.net.LeaveLobbyRequest";
  }
  protected:
  explicit LeaveLobbyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_packets_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLobbyIdFieldNumber = 1,
    kPlayerIdFieldNumber = 2,
  };
  // uint32 lobby_id = 1;
  void clear_lobby_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 lobby_id() const;
  void set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lobby_id() const;
  void _internal_set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 player_id = 2;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:awd.net.LeaveLobbyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lobby_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packets_2eproto;
};
// -------------------------------------------------------------------

class LeaveLobbyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:awd.net.LeaveLobbyResponse) */ {
 public:
  inline LeaveLobbyResponse() : LeaveLobbyResponse(nullptr) {}
  virtual ~LeaveLobbyResponse();
  explicit constexpr LeaveLobbyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LeaveLobbyResponse(const LeaveLobbyResponse& from);
  LeaveLobbyResponse(LeaveLobbyResponse&& from) noexcept
    : LeaveLobbyResponse() {
    *this = ::std::move(from);
  }

  inline LeaveLobbyResponse& operator=(const LeaveLobbyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaveLobbyResponse& operator=(LeaveLobbyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LeaveLobbyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LeaveLobbyResponse* internal_default_instance() {
    return reinterpret_cast<const LeaveLobbyResponse*>(
               &_LeaveLobbyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(LeaveLobbyResponse& a, LeaveLobbyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaveLobbyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LeaveLobbyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LeaveLobbyResponse* New() const final {
    return CreateMaybeMessage<LeaveLobbyResponse>(nullptr);
  }

  LeaveLobbyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LeaveLobbyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LeaveLobbyResponse& from);
  void MergeFrom(const LeaveLobbyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaveLobbyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "awd.net.LeaveLobbyResponse";
  }
  protected:
  explicit LeaveLobbyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_packets_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusCodeFieldNumber = 1,
  };
  // sint32 status_code = 1;
  void clear_status_code();
  ::PROTOBUF_NAMESPACE_ID::int32 status_code() const;
  void set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status_code() const;
  void _internal_set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:awd.net.LeaveLobbyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packets_2eproto;
};
// -------------------------------------------------------------------

class KickedFromLobby PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:awd.net.KickedFromLobby) */ {
 public:
  inline KickedFromLobby() : KickedFromLobby(nullptr) {}
  virtual ~KickedFromLobby();
  explicit constexpr KickedFromLobby(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KickedFromLobby(const KickedFromLobby& from);
  KickedFromLobby(KickedFromLobby&& from) noexcept
    : KickedFromLobby() {
    *this = ::std::move(from);
  }

  inline KickedFromLobby& operator=(const KickedFromLobby& from) {
    CopyFrom(from);
    return *this;
  }
  inline KickedFromLobby& operator=(KickedFromLobby&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KickedFromLobby& default_instance() {
    return *internal_default_instance();
  }
  static inline const KickedFromLobby* internal_default_instance() {
    return reinterpret_cast<const KickedFromLobby*>(
               &_KickedFromLobby_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(KickedFromLobby& a, KickedFromLobby& b) {
    a.Swap(&b);
  }
  inline void Swap(KickedFromLobby* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KickedFromLobby* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KickedFromLobby* New() const final {
    return CreateMaybeMessage<KickedFromLobby>(nullptr);
  }

  KickedFromLobby* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KickedFromLobby>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KickedFromLobby& from);
  void MergeFrom(const KickedFromLobby& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KickedFromLobby* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "awd.net.KickedFromLobby";
  }
  protected:
  explicit KickedFromLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_packets_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 1,
  };
  // uint32 reason = 1;
  void clear_reason();
  ::PROTOBUF_NAMESPACE_ID::uint32 reason() const;
  void set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_reason() const;
  void _internal_set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:awd.net.KickedFromLobby)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packets_2eproto;
};
// -------------------------------------------------------------------

class UpdatedMembersList_MembersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UpdatedMembersList_MembersEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UpdatedMembersList_MembersEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  UpdatedMembersList_MembersEntry_DoNotUse();
  explicit constexpr UpdatedMembersList_MembersEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit UpdatedMembersList_MembersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const UpdatedMembersList_MembersEntry_DoNotUse& other);
  static const UpdatedMembersList_MembersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const UpdatedMembersList_MembersEntry_DoNotUse*>(&_UpdatedMembersList_MembersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "awd.net.UpdatedMembersList.MembersEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_packets_2eproto);
    return ::descriptor_table_packets_2eproto.file_level_metadata[10];
  }

  public:
};

// -------------------------------------------------------------------

class UpdatedMembersList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:awd.net.UpdatedMembersList) */ {
 public:
  inline UpdatedMembersList() : UpdatedMembersList(nullptr) {}
  virtual ~UpdatedMembersList();
  explicit constexpr UpdatedMembersList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdatedMembersList(const UpdatedMembersList& from);
  UpdatedMembersList(UpdatedMembersList&& from) noexcept
    : UpdatedMembersList() {
    *this = ::std::move(from);
  }

  inline UpdatedMembersList& operator=(const UpdatedMembersList& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdatedMembersList& operator=(UpdatedMembersList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdatedMembersList& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdatedMembersList* internal_default_instance() {
    return reinterpret_cast<const UpdatedMembersList*>(
               &_UpdatedMembersList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(UpdatedMembersList& a, UpdatedMembersList& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdatedMembersList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdatedMembersList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdatedMembersList* New() const final {
    return CreateMaybeMessage<UpdatedMembersList>(nullptr);
  }

  UpdatedMembersList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdatedMembersList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdatedMembersList& from);
  void MergeFrom(const UpdatedMembersList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdatedMembersList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "awd.net.UpdatedMembersList";
  }
  protected:
  explicit UpdatedMembersList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_packets_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 1,
  };
  // map<uint32, string> members = 1;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >&
      _internal_members() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >*
      _internal_mutable_members();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >&
      members() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >*
      mutable_members();

  // @@protoc_insertion_point(class_scope:awd.net.UpdatedMembersList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      UpdatedMembersList_MembersEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint32, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> members_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packets_2eproto;
};
// -------------------------------------------------------------------

class KeepAlive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:awd.net.KeepAlive) */ {
 public:
  inline KeepAlive() : KeepAlive(nullptr) {}
  virtual ~KeepAlive();
  explicit constexpr KeepAlive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeepAlive(const KeepAlive& from);
  KeepAlive(KeepAlive&& from) noexcept
    : KeepAlive() {
    *this = ::std::move(from);
  }

  inline KeepAlive& operator=(const KeepAlive& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeepAlive& operator=(KeepAlive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeepAlive& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeepAlive* internal_default_instance() {
    return reinterpret_cast<const KeepAlive*>(
               &_KeepAlive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(KeepAlive& a, KeepAlive& b) {
    a.Swap(&b);
  }
  inline void Swap(KeepAlive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeepAlive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeepAlive* New() const final {
    return CreateMaybeMessage<KeepAlive>(nullptr);
  }

  KeepAlive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeepAlive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeepAlive& from);
  void MergeFrom(const KeepAlive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeepAlive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "awd.net.KeepAlive";
  }
  protected:
  explicit KeepAlive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_packets_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kTestIdFieldNumber = 2,
  };
  // int32 player_id = 1;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::int32 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 test_id = 2;
  void clear_test_id();
  ::PROTOBUF_NAMESPACE_ID::int32 test_id() const;
  void set_test_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_test_id() const;
  void _internal_set_test_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:awd.net.KeepAlive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 test_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packets_2eproto;
};
// -------------------------------------------------------------------

class Ping PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:awd.net.Ping) */ {
 public:
  inline Ping() : Ping(nullptr) {}
  virtual ~Ping();
  explicit constexpr Ping(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ping(const Ping& from);
  Ping(Ping&& from) noexcept
    : Ping() {
    *this = ::std::move(from);
  }

  inline Ping& operator=(const Ping& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ping& operator=(Ping&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ping& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ping* internal_default_instance() {
    return reinterpret_cast<const Ping*>(
               &_Ping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Ping& a, Ping& b) {
    a.Swap(&b);
  }
  inline void Swap(Ping* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ping* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ping* New() const final {
    return CreateMaybeMessage<Ping>(nullptr);
  }

  Ping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ping>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ping& from);
  void MergeFrom(const Ping& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ping* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "awd.net.Ping";
  }
  protected:
  explicit Ping(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_packets_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerTimeFieldNumber = 1,
  };
  // uint64 server_time = 1;
  void clear_server_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 server_time() const;
  void set_server_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_server_time() const;
  void _internal_set_server_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:awd.net.Ping)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 server_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packets_2eproto;
};
// -------------------------------------------------------------------

class Pong PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:awd.net.Pong) */ {
 public:
  inline Pong() : Pong(nullptr) {}
  virtual ~Pong();
  explicit constexpr Pong(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pong(const Pong& from);
  Pong(Pong&& from) noexcept
    : Pong() {
    *this = ::std::move(from);
  }

  inline Pong& operator=(const Pong& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pong& operator=(Pong&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pong& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pong* internal_default_instance() {
    return reinterpret_cast<const Pong*>(
               &_Pong_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Pong& a, Pong& b) {
    a.Swap(&b);
  }
  inline void Swap(Pong* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pong* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pong* New() const final {
    return CreateMaybeMessage<Pong>(nullptr);
  }

  Pong* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pong>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pong& from);
  void MergeFrom(const Pong& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pong* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "awd.net.Pong";
  }
  protected:
  explicit Pong(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_packets_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientTimeFieldNumber = 1,
  };
  // uint64 client_time = 1;
  void clear_client_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 client_time() const;
  void set_client_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_client_time() const;
  void _internal_set_client_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:awd.net.Pong)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 client_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packets_2eproto;
};
// -------------------------------------------------------------------

class PacketWrapper PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:awd.net.PacketWrapper) */ {
 public:
  inline PacketWrapper() : PacketWrapper(nullptr) {}
  virtual ~PacketWrapper();
  explicit constexpr PacketWrapper(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PacketWrapper(const PacketWrapper& from);
  PacketWrapper(PacketWrapper&& from) noexcept
    : PacketWrapper() {
    *this = ::std::move(from);
  }

  inline PacketWrapper& operator=(const PacketWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline PacketWrapper& operator=(PacketWrapper&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PacketWrapper& default_instance() {
    return *internal_default_instance();
  }
  enum PacketCase {
    kHandshakeRequest = 10,
    kHandshakeResponse = 11,
    kCreateLobbyRequest = 100,
    kCreateLobbyResponse = 101,
    kJoinLobbyRequest = 102,
    kJoinLobbyResponse = 103,
    kLeaveLobbyRequest = 104,
    kLeaveLobbyResponse = 105,
    kKickedFromLobby = 106,
    kUpdatedMembersList = 107,
    kKeepAlive = 1000,
    kPing = 10000,
    kPong = 10001,
    PACKET_NOT_SET = 0,
  };

  static inline const PacketWrapper* internal_default_instance() {
    return reinterpret_cast<const PacketWrapper*>(
               &_PacketWrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(PacketWrapper& a, PacketWrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(PacketWrapper* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PacketWrapper* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PacketWrapper* New() const final {
    return CreateMaybeMessage<PacketWrapper>(nullptr);
  }

  PacketWrapper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PacketWrapper>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PacketWrapper& from);
  void MergeFrom(const PacketWrapper& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PacketWrapper* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "awd.net.PacketWrapper";
  }
  protected:
  explicit PacketWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_packets_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSequenceFieldNumber = 1,
    kAckFieldNumber = 2,
    kAckBitfieldFieldNumber = 3,
    kHandshakeRequestFieldNumber = 10,
    kHandshakeResponseFieldNumber = 11,
    kCreateLobbyRequestFieldNumber = 100,
    kCreateLobbyResponseFieldNumber = 101,
    kJoinLobbyRequestFieldNumber = 102,
    kJoinLobbyResponseFieldNumber = 103,
    kLeaveLobbyRequestFieldNumber = 104,
    kLeaveLobbyResponseFieldNumber = 105,
    kKickedFromLobbyFieldNumber = 106,
    kUpdatedMembersListFieldNumber = 107,
    kKeepAliveFieldNumber = 1000,
    kPingFieldNumber = 10000,
    kPongFieldNumber = 10001,
  };
  // uint32 sequence = 1;
  void clear_sequence();
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence() const;
  void set_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sequence() const;
  void _internal_set_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ack = 2;
  void clear_ack();
  ::PROTOBUF_NAMESPACE_ID::uint32 ack() const;
  void set_ack(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ack() const;
  void _internal_set_ack(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ack_bitfield = 3;
  void clear_ack_bitfield();
  ::PROTOBUF_NAMESPACE_ID::uint32 ack_bitfield() const;
  void set_ack_bitfield(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ack_bitfield() const;
  void _internal_set_ack_bitfield(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .awd.net.HandshakeRequest handshake_request = 10;
  bool has_handshake_request() const;
  private:
  bool _internal_has_handshake_request() const;
  public:
  void clear_handshake_request();
  const ::awd::net::HandshakeRequest& handshake_request() const;
  ::awd::net::HandshakeRequest* release_handshake_request();
  ::awd::net::HandshakeRequest* mutable_handshake_request();
  void set_allocated_handshake_request(::awd::net::HandshakeRequest* handshake_request);
  private:
  const ::awd::net::HandshakeRequest& _internal_handshake_request() const;
  ::awd::net::HandshakeRequest* _internal_mutable_handshake_request();
  public:
  void unsafe_arena_set_allocated_handshake_request(
      ::awd::net::HandshakeRequest* handshake_request);
  ::awd::net::HandshakeRequest* unsafe_arena_release_handshake_request();

  // .awd.net.HandshakeResponse handshake_response = 11;
  bool has_handshake_response() const;
  private:
  bool _internal_has_handshake_response() const;
  public:
  void clear_handshake_response();
  const ::awd::net::HandshakeResponse& handshake_response() const;
  ::awd::net::HandshakeResponse* release_handshake_response();
  ::awd::net::HandshakeResponse* mutable_handshake_response();
  void set_allocated_handshake_response(::awd::net::HandshakeResponse* handshake_response);
  private:
  const ::awd::net::HandshakeResponse& _internal_handshake_response() const;
  ::awd::net::HandshakeResponse* _internal_mutable_handshake_response();
  public:
  void unsafe_arena_set_allocated_handshake_response(
      ::awd::net::HandshakeResponse* handshake_response);
  ::awd::net::HandshakeResponse* unsafe_arena_release_handshake_response();

  // .awd.net.CreateLobbyRequest create_lobby_request = 100;
  bool has_create_lobby_request() const;
  private:
  bool _internal_has_create_lobby_request() const;
  public:
  void clear_create_lobby_request();
  const ::awd::net::CreateLobbyRequest& create_lobby_request() const;
  ::awd::net::CreateLobbyRequest* release_create_lobby_request();
  ::awd::net::CreateLobbyRequest* mutable_create_lobby_request();
  void set_allocated_create_lobby_request(::awd::net::CreateLobbyRequest* create_lobby_request);
  private:
  const ::awd::net::CreateLobbyRequest& _internal_create_lobby_request() const;
  ::awd::net::CreateLobbyRequest* _internal_mutable_create_lobby_request();
  public:
  void unsafe_arena_set_allocated_create_lobby_request(
      ::awd::net::CreateLobbyRequest* create_lobby_request);
  ::awd::net::CreateLobbyRequest* unsafe_arena_release_create_lobby_request();

  // .awd.net.CreateLobbyResponse create_lobby_response = 101;
  bool has_create_lobby_response() const;
  private:
  bool _internal_has_create_lobby_response() const;
  public:
  void clear_create_lobby_response();
  const ::awd::net::CreateLobbyResponse& create_lobby_response() const;
  ::awd::net::CreateLobbyResponse* release_create_lobby_response();
  ::awd::net::CreateLobbyResponse* mutable_create_lobby_response();
  void set_allocated_create_lobby_response(::awd::net::CreateLobbyResponse* create_lobby_response);
  private:
  const ::awd::net::CreateLobbyResponse& _internal_create_lobby_response() const;
  ::awd::net::CreateLobbyResponse* _internal_mutable_create_lobby_response();
  public:
  void unsafe_arena_set_allocated_create_lobby_response(
      ::awd::net::CreateLobbyResponse* create_lobby_response);
  ::awd::net::CreateLobbyResponse* unsafe_arena_release_create_lobby_response();

  // .awd.net.JoinLobbyRequest join_lobby_request = 102;
  bool has_join_lobby_request() const;
  private:
  bool _internal_has_join_lobby_request() const;
  public:
  void clear_join_lobby_request();
  const ::awd::net::JoinLobbyRequest& join_lobby_request() const;
  ::awd::net::JoinLobbyRequest* release_join_lobby_request();
  ::awd::net::JoinLobbyRequest* mutable_join_lobby_request();
  void set_allocated_join_lobby_request(::awd::net::JoinLobbyRequest* join_lobby_request);
  private:
  const ::awd::net::JoinLobbyRequest& _internal_join_lobby_request() const;
  ::awd::net::JoinLobbyRequest* _internal_mutable_join_lobby_request();
  public:
  void unsafe_arena_set_allocated_join_lobby_request(
      ::awd::net::JoinLobbyRequest* join_lobby_request);
  ::awd::net::JoinLobbyRequest* unsafe_arena_release_join_lobby_request();

  // .awd.net.JoinLobbyResponse join_lobby_response = 103;
  bool has_join_lobby_response() const;
  private:
  bool _internal_has_join_lobby_response() const;
  public:
  void clear_join_lobby_response();
  const ::awd::net::JoinLobbyResponse& join_lobby_response() const;
  ::awd::net::JoinLobbyResponse* release_join_lobby_response();
  ::awd::net::JoinLobbyResponse* mutable_join_lobby_response();
  void set_allocated_join_lobby_response(::awd::net::JoinLobbyResponse* join_lobby_response);
  private:
  const ::awd::net::JoinLobbyResponse& _internal_join_lobby_response() const;
  ::awd::net::JoinLobbyResponse* _internal_mutable_join_lobby_response();
  public:
  void unsafe_arena_set_allocated_join_lobby_response(
      ::awd::net::JoinLobbyResponse* join_lobby_response);
  ::awd::net::JoinLobbyResponse* unsafe_arena_release_join_lobby_response();

  // .awd.net.LeaveLobbyRequest leave_lobby_request = 104;
  bool has_leave_lobby_request() const;
  private:
  bool _internal_has_leave_lobby_request() const;
  public:
  void clear_leave_lobby_request();
  const ::awd::net::LeaveLobbyRequest& leave_lobby_request() const;
  ::awd::net::LeaveLobbyRequest* release_leave_lobby_request();
  ::awd::net::LeaveLobbyRequest* mutable_leave_lobby_request();
  void set_allocated_leave_lobby_request(::awd::net::LeaveLobbyRequest* leave_lobby_request);
  private:
  const ::awd::net::LeaveLobbyRequest& _internal_leave_lobby_request() const;
  ::awd::net::LeaveLobbyRequest* _internal_mutable_leave_lobby_request();
  public:
  void unsafe_arena_set_allocated_leave_lobby_request(
      ::awd::net::LeaveLobbyRequest* leave_lobby_request);
  ::awd::net::LeaveLobbyRequest* unsafe_arena_release_leave_lobby_request();

  // .awd.net.LeaveLobbyResponse leave_lobby_response = 105;
  bool has_leave_lobby_response() const;
  private:
  bool _internal_has_leave_lobby_response() const;
  public:
  void clear_leave_lobby_response();
  const ::awd::net::LeaveLobbyResponse& leave_lobby_response() const;
  ::awd::net::LeaveLobbyResponse* release_leave_lobby_response();
  ::awd::net::LeaveLobbyResponse* mutable_leave_lobby_response();
  void set_allocated_leave_lobby_response(::awd::net::LeaveLobbyResponse* leave_lobby_response);
  private:
  const ::awd::net::LeaveLobbyResponse& _internal_leave_lobby_response() const;
  ::awd::net::LeaveLobbyResponse* _internal_mutable_leave_lobby_response();
  public:
  void unsafe_arena_set_allocated_leave_lobby_response(
      ::awd::net::LeaveLobbyResponse* leave_lobby_response);
  ::awd::net::LeaveLobbyResponse* unsafe_arena_release_leave_lobby_response();

  // .awd.net.KickedFromLobby kicked_from_lobby = 106;
  bool has_kicked_from_lobby() const;
  private:
  bool _internal_has_kicked_from_lobby() const;
  public:
  void clear_kicked_from_lobby();
  const ::awd::net::KickedFromLobby& kicked_from_lobby() const;
  ::awd::net::KickedFromLobby* release_kicked_from_lobby();
  ::awd::net::KickedFromLobby* mutable_kicked_from_lobby();
  void set_allocated_kicked_from_lobby(::awd::net::KickedFromLobby* kicked_from_lobby);
  private:
  const ::awd::net::KickedFromLobby& _internal_kicked_from_lobby() const;
  ::awd::net::KickedFromLobby* _internal_mutable_kicked_from_lobby();
  public:
  void unsafe_arena_set_allocated_kicked_from_lobby(
      ::awd::net::KickedFromLobby* kicked_from_lobby);
  ::awd::net::KickedFromLobby* unsafe_arena_release_kicked_from_lobby();

  // .awd.net.UpdatedMembersList updated_members_list = 107;
  bool has_updated_members_list() const;
  private:
  bool _internal_has_updated_members_list() const;
  public:
  void clear_updated_members_list();
  const ::awd::net::UpdatedMembersList& updated_members_list() const;
  ::awd::net::UpdatedMembersList* release_updated_members_list();
  ::awd::net::UpdatedMembersList* mutable_updated_members_list();
  void set_allocated_updated_members_list(::awd::net::UpdatedMembersList* updated_members_list);
  private:
  const ::awd::net::UpdatedMembersList& _internal_updated_members_list() const;
  ::awd::net::UpdatedMembersList* _internal_mutable_updated_members_list();
  public:
  void unsafe_arena_set_allocated_updated_members_list(
      ::awd::net::UpdatedMembersList* updated_members_list);
  ::awd::net::UpdatedMembersList* unsafe_arena_release_updated_members_list();

  // .awd.net.KeepAlive keep_alive = 1000;
  bool has_keep_alive() const;
  private:
  bool _internal_has_keep_alive() const;
  public:
  void clear_keep_alive();
  const ::awd::net::KeepAlive& keep_alive() const;
  ::awd::net::KeepAlive* release_keep_alive();
  ::awd::net::KeepAlive* mutable_keep_alive();
  void set_allocated_keep_alive(::awd::net::KeepAlive* keep_alive);
  private:
  const ::awd::net::KeepAlive& _internal_keep_alive() const;
  ::awd::net::KeepAlive* _internal_mutable_keep_alive();
  public:
  void unsafe_arena_set_allocated_keep_alive(
      ::awd::net::KeepAlive* keep_alive);
  ::awd::net::KeepAlive* unsafe_arena_release_keep_alive();

  // .awd.net.Ping ping = 10000;
  bool has_ping() const;
  private:
  bool _internal_has_ping() const;
  public:
  void clear_ping();
  const ::awd::net::Ping& ping() const;
  ::awd::net::Ping* release_ping();
  ::awd::net::Ping* mutable_ping();
  void set_allocated_ping(::awd::net::Ping* ping);
  private:
  const ::awd::net::Ping& _internal_ping() const;
  ::awd::net::Ping* _internal_mutable_ping();
  public:
  void unsafe_arena_set_allocated_ping(
      ::awd::net::Ping* ping);
  ::awd::net::Ping* unsafe_arena_release_ping();

  // .awd.net.Pong pong = 10001;
  bool has_pong() const;
  private:
  bool _internal_has_pong() const;
  public:
  void clear_pong();
  const ::awd::net::Pong& pong() const;
  ::awd::net::Pong* release_pong();
  ::awd::net::Pong* mutable_pong();
  void set_allocated_pong(::awd::net::Pong* pong);
  private:
  const ::awd::net::Pong& _internal_pong() const;
  ::awd::net::Pong* _internal_mutable_pong();
  public:
  void unsafe_arena_set_allocated_pong(
      ::awd::net::Pong* pong);
  ::awd::net::Pong* unsafe_arena_release_pong();

  void clear_packet();
  PacketCase packet_case() const;
  // @@protoc_insertion_point(class_scope:awd.net.PacketWrapper)
 private:
  class _Internal;
  void set_has_handshake_request();
  void set_has_handshake_response();
  void set_has_create_lobby_request();
  void set_has_create_lobby_response();
  void set_has_join_lobby_request();
  void set_has_join_lobby_response();
  void set_has_leave_lobby_request();
  void set_has_leave_lobby_response();
  void set_has_kicked_from_lobby();
  void set_has_updated_members_list();
  void set_has_keep_alive();
  void set_has_ping();
  void set_has_pong();

  inline bool has_packet() const;
  inline void clear_has_packet();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ack_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ack_bitfield_;
  union PacketUnion {
    constexpr PacketUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::awd::net::HandshakeRequest* handshake_request_;
    ::awd::net::HandshakeResponse* handshake_response_;
    ::awd::net::CreateLobbyRequest* create_lobby_request_;
    ::awd::net::CreateLobbyResponse* create_lobby_response_;
    ::awd::net::JoinLobbyRequest* join_lobby_request_;
    ::awd::net::JoinLobbyResponse* join_lobby_response_;
    ::awd::net::LeaveLobbyRequest* leave_lobby_request_;
    ::awd::net::LeaveLobbyResponse* leave_lobby_response_;
    ::awd::net::KickedFromLobby* kicked_from_lobby_;
    ::awd::net::UpdatedMembersList* updated_members_list_;
    ::awd::net::KeepAlive* keep_alive_;
    ::awd::net::Ping* ping_;
    ::awd::net::Pong* pong_;
  } packet_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_packets_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HandshakeRequest

// uint32 protocol_version = 1;
inline void HandshakeRequest::clear_protocol_version() {
  protocol_version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HandshakeRequest::_internal_protocol_version() const {
  return protocol_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HandshakeRequest::protocol_version() const {
  // @@protoc_insertion_point(field_get:awd.net.HandshakeRequest.protocol_version)
  return _internal_protocol_version();
}
inline void HandshakeRequest::_internal_set_protocol_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  protocol_version_ = value;
}
inline void HandshakeRequest::set_protocol_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_protocol_version(value);
  // @@protoc_insertion_point(field_set:awd.net.HandshakeRequest.protocol_version)
}

// -------------------------------------------------------------------

// HandshakeResponse

// uint32 protocol_version = 1;
inline void HandshakeResponse::clear_protocol_version() {
  protocol_version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HandshakeResponse::_internal_protocol_version() const {
  return protocol_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HandshakeResponse::protocol_version() const {
  // @@protoc_insertion_point(field_get:awd.net.HandshakeResponse.protocol_version)
  return _internal_protocol_version();
}
inline void HandshakeResponse::_internal_set_protocol_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  protocol_version_ = value;
}
inline void HandshakeResponse::set_protocol_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_protocol_version(value);
  // @@protoc_insertion_point(field_set:awd.net.HandshakeResponse.protocol_version)
}

// -------------------------------------------------------------------

// CreateLobbyRequest

// string player_name = 1;
inline void CreateLobbyRequest::clear_player_name() {
  player_name_.ClearToEmpty();
}
inline const std::string& CreateLobbyRequest::player_name() const {
  // @@protoc_insertion_point(field_get:awd.net.CreateLobbyRequest.player_name)
  return _internal_player_name();
}
inline void CreateLobbyRequest::set_player_name(const std::string& value) {
  _internal_set_player_name(value);
  // @@protoc_insertion_point(field_set:awd.net.CreateLobbyRequest.player_name)
}
inline std::string* CreateLobbyRequest::mutable_player_name() {
  // @@protoc_insertion_point(field_mutable:awd.net.CreateLobbyRequest.player_name)
  return _internal_mutable_player_name();
}
inline const std::string& CreateLobbyRequest::_internal_player_name() const {
  return player_name_.Get();
}
inline void CreateLobbyRequest::_internal_set_player_name(const std::string& value) {
  
  player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateLobbyRequest::set_player_name(std::string&& value) {
  
  player_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:awd.net.CreateLobbyRequest.player_name)
}
inline void CreateLobbyRequest::set_player_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:awd.net.CreateLobbyRequest.player_name)
}
inline void CreateLobbyRequest::set_player_name(const char* value,
    size_t size) {
  
  player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:awd.net.CreateLobbyRequest.player_name)
}
inline std::string* CreateLobbyRequest::_internal_mutable_player_name() {
  
  return player_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateLobbyRequest::release_player_name() {
  // @@protoc_insertion_point(field_release:awd.net.CreateLobbyRequest.player_name)
  return player_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateLobbyRequest::set_allocated_player_name(std::string* player_name) {
  if (player_name != nullptr) {
    
  } else {
    
  }
  player_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:awd.net.CreateLobbyRequest.player_name)
}

// -------------------------------------------------------------------

// CreateLobbyResponse

// sint32 lobby_id = 1;
inline void CreateLobbyResponse::clear_lobby_id() {
  lobby_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateLobbyResponse::_internal_lobby_id() const {
  return lobby_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateLobbyResponse::lobby_id() const {
  // @@protoc_insertion_point(field_get:awd.net.CreateLobbyResponse.lobby_id)
  return _internal_lobby_id();
}
inline void CreateLobbyResponse::_internal_set_lobby_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lobby_id_ = value;
}
inline void CreateLobbyResponse::set_lobby_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lobby_id(value);
  // @@protoc_insertion_point(field_set:awd.net.CreateLobbyResponse.lobby_id)
}

// uint32 player_id = 2;
inline void CreateLobbyResponse::clear_player_id() {
  player_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateLobbyResponse::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateLobbyResponse::player_id() const {
  // @@protoc_insertion_point(field_get:awd.net.CreateLobbyResponse.player_id)
  return _internal_player_id();
}
inline void CreateLobbyResponse::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  player_id_ = value;
}
inline void CreateLobbyResponse::set_player_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:awd.net.CreateLobbyResponse.player_id)
}

// -------------------------------------------------------------------

// JoinLobbyRequest

// uint32 lobby_id = 1;
inline void JoinLobbyRequest::clear_lobby_id() {
  lobby_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JoinLobbyRequest::_internal_lobby_id() const {
  return lobby_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JoinLobbyRequest::lobby_id() const {
  // @@protoc_insertion_point(field_get:awd.net.JoinLobbyRequest.lobby_id)
  return _internal_lobby_id();
}
inline void JoinLobbyRequest::_internal_set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lobby_id_ = value;
}
inline void JoinLobbyRequest::set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lobby_id(value);
  // @@protoc_insertion_point(field_set:awd.net.JoinLobbyRequest.lobby_id)
}

// string player_name = 2;
inline void JoinLobbyRequest::clear_player_name() {
  player_name_.ClearToEmpty();
}
inline const std::string& JoinLobbyRequest::player_name() const {
  // @@protoc_insertion_point(field_get:awd.net.JoinLobbyRequest.player_name)
  return _internal_player_name();
}
inline void JoinLobbyRequest::set_player_name(const std::string& value) {
  _internal_set_player_name(value);
  // @@protoc_insertion_point(field_set:awd.net.JoinLobbyRequest.player_name)
}
inline std::string* JoinLobbyRequest::mutable_player_name() {
  // @@protoc_insertion_point(field_mutable:awd.net.JoinLobbyRequest.player_name)
  return _internal_mutable_player_name();
}
inline const std::string& JoinLobbyRequest::_internal_player_name() const {
  return player_name_.Get();
}
inline void JoinLobbyRequest::_internal_set_player_name(const std::string& value) {
  
  player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void JoinLobbyRequest::set_player_name(std::string&& value) {
  
  player_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:awd.net.JoinLobbyRequest.player_name)
}
inline void JoinLobbyRequest::set_player_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:awd.net.JoinLobbyRequest.player_name)
}
inline void JoinLobbyRequest::set_player_name(const char* value,
    size_t size) {
  
  player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:awd.net.JoinLobbyRequest.player_name)
}
inline std::string* JoinLobbyRequest::_internal_mutable_player_name() {
  
  return player_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* JoinLobbyRequest::release_player_name() {
  // @@protoc_insertion_point(field_release:awd.net.JoinLobbyRequest.player_name)
  return player_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JoinLobbyRequest::set_allocated_player_name(std::string* player_name) {
  if (player_name != nullptr) {
    
  } else {
    
  }
  player_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:awd.net.JoinLobbyRequest.player_name)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// JoinLobbyResponse

// sint32 player_id = 1;
inline void JoinLobbyResponse::clear_player_id() {
  player_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JoinLobbyResponse::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JoinLobbyResponse::player_id() const {
  // @@protoc_insertion_point(field_get:awd.net.JoinLobbyResponse.player_id)
  return _internal_player_id();
}
inline void JoinLobbyResponse::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  player_id_ = value;
}
inline void JoinLobbyResponse::set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:awd.net.JoinLobbyResponse.player_id)
}

// map<int32, string> other_players = 2;
inline int JoinLobbyResponse::_internal_other_players_size() const {
  return other_players_.size();
}
inline int JoinLobbyResponse::other_players_size() const {
  return _internal_other_players_size();
}
inline void JoinLobbyResponse::clear_other_players() {
  other_players_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
JoinLobbyResponse::_internal_other_players() const {
  return other_players_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
JoinLobbyResponse::other_players() const {
  // @@protoc_insertion_point(field_map:awd.net.JoinLobbyResponse.other_players)
  return _internal_other_players();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
JoinLobbyResponse::_internal_mutable_other_players() {
  return other_players_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
JoinLobbyResponse::mutable_other_players() {
  // @@protoc_insertion_point(field_mutable_map:awd.net.JoinLobbyResponse.other_players)
  return _internal_mutable_other_players();
}

// -------------------------------------------------------------------

// LeaveLobbyRequest

// uint32 lobby_id = 1;
inline void LeaveLobbyRequest::clear_lobby_id() {
  lobby_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LeaveLobbyRequest::_internal_lobby_id() const {
  return lobby_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LeaveLobbyRequest::lobby_id() const {
  // @@protoc_insertion_point(field_get:awd.net.LeaveLobbyRequest.lobby_id)
  return _internal_lobby_id();
}
inline void LeaveLobbyRequest::_internal_set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lobby_id_ = value;
}
inline void LeaveLobbyRequest::set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lobby_id(value);
  // @@protoc_insertion_point(field_set:awd.net.LeaveLobbyRequest.lobby_id)
}

// uint32 player_id = 2;
inline void LeaveLobbyRequest::clear_player_id() {
  player_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LeaveLobbyRequest::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LeaveLobbyRequest::player_id() const {
  // @@protoc_insertion_point(field_get:awd.net.LeaveLobbyRequest.player_id)
  return _internal_player_id();
}
inline void LeaveLobbyRequest::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  player_id_ = value;
}
inline void LeaveLobbyRequest::set_player_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:awd.net.LeaveLobbyRequest.player_id)
}

// -------------------------------------------------------------------

// LeaveLobbyResponse

// sint32 status_code = 1;
inline void LeaveLobbyResponse::clear_status_code() {
  status_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LeaveLobbyResponse::_internal_status_code() const {
  return status_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LeaveLobbyResponse::status_code() const {
  // @@protoc_insertion_point(field_get:awd.net.LeaveLobbyResponse.status_code)
  return _internal_status_code();
}
inline void LeaveLobbyResponse::_internal_set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_code_ = value;
}
inline void LeaveLobbyResponse::set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:awd.net.LeaveLobbyResponse.status_code)
}

// -------------------------------------------------------------------

// KickedFromLobby

// uint32 reason = 1;
inline void KickedFromLobby::clear_reason() {
  reason_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KickedFromLobby::_internal_reason() const {
  return reason_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KickedFromLobby::reason() const {
  // @@protoc_insertion_point(field_get:awd.net.KickedFromLobby.reason)
  return _internal_reason();
}
inline void KickedFromLobby::_internal_set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  reason_ = value;
}
inline void KickedFromLobby::set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:awd.net.KickedFromLobby.reason)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// UpdatedMembersList

// map<uint32, string> members = 1;
inline int UpdatedMembersList::_internal_members_size() const {
  return members_.size();
}
inline int UpdatedMembersList::members_size() const {
  return _internal_members_size();
}
inline void UpdatedMembersList::clear_members() {
  members_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >&
UpdatedMembersList::_internal_members() const {
  return members_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >&
UpdatedMembersList::members() const {
  // @@protoc_insertion_point(field_map:awd.net.UpdatedMembersList.members)
  return _internal_members();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >*
UpdatedMembersList::_internal_mutable_members() {
  return members_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >*
UpdatedMembersList::mutable_members() {
  // @@protoc_insertion_point(field_mutable_map:awd.net.UpdatedMembersList.members)
  return _internal_mutable_members();
}

// -------------------------------------------------------------------

// KeepAlive

// int32 player_id = 1;
inline void KeepAlive::clear_player_id() {
  player_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KeepAlive::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KeepAlive::player_id() const {
  // @@protoc_insertion_point(field_get:awd.net.KeepAlive.player_id)
  return _internal_player_id();
}
inline void KeepAlive::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  player_id_ = value;
}
inline void KeepAlive::set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:awd.net.KeepAlive.player_id)
}

// int32 test_id = 2;
inline void KeepAlive::clear_test_id() {
  test_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KeepAlive::_internal_test_id() const {
  return test_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KeepAlive::test_id() const {
  // @@protoc_insertion_point(field_get:awd.net.KeepAlive.test_id)
  return _internal_test_id();
}
inline void KeepAlive::_internal_set_test_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  test_id_ = value;
}
inline void KeepAlive::set_test_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_test_id(value);
  // @@protoc_insertion_point(field_set:awd.net.KeepAlive.test_id)
}

// -------------------------------------------------------------------

// Ping

// uint64 server_time = 1;
inline void Ping::clear_server_time() {
  server_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ping::_internal_server_time() const {
  return server_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Ping::server_time() const {
  // @@protoc_insertion_point(field_get:awd.net.Ping.server_time)
  return _internal_server_time();
}
inline void Ping::_internal_set_server_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  server_time_ = value;
}
inline void Ping::set_server_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_server_time(value);
  // @@protoc_insertion_point(field_set:awd.net.Ping.server_time)
}

// -------------------------------------------------------------------

// Pong

// uint64 client_time = 1;
inline void Pong::clear_client_time() {
  client_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Pong::_internal_client_time() const {
  return client_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Pong::client_time() const {
  // @@protoc_insertion_point(field_get:awd.net.Pong.client_time)
  return _internal_client_time();
}
inline void Pong::_internal_set_client_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  client_time_ = value;
}
inline void Pong::set_client_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_client_time(value);
  // @@protoc_insertion_point(field_set:awd.net.Pong.client_time)
}

// -------------------------------------------------------------------

// PacketWrapper

// uint32 sequence = 1;
inline void PacketWrapper::clear_sequence() {
  sequence_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PacketWrapper::_internal_sequence() const {
  return sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PacketWrapper::sequence() const {
  // @@protoc_insertion_point(field_get:awd.net.PacketWrapper.sequence)
  return _internal_sequence();
}
inline void PacketWrapper::_internal_set_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sequence_ = value;
}
inline void PacketWrapper::set_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:awd.net.PacketWrapper.sequence)
}

// uint32 ack = 2;
inline void PacketWrapper::clear_ack() {
  ack_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PacketWrapper::_internal_ack() const {
  return ack_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PacketWrapper::ack() const {
  // @@protoc_insertion_point(field_get:awd.net.PacketWrapper.ack)
  return _internal_ack();
}
inline void PacketWrapper::_internal_set_ack(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ack_ = value;
}
inline void PacketWrapper::set_ack(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ack(value);
  // @@protoc_insertion_point(field_set:awd.net.PacketWrapper.ack)
}

// uint32 ack_bitfield = 3;
inline void PacketWrapper::clear_ack_bitfield() {
  ack_bitfield_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PacketWrapper::_internal_ack_bitfield() const {
  return ack_bitfield_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PacketWrapper::ack_bitfield() const {
  // @@protoc_insertion_point(field_get:awd.net.PacketWrapper.ack_bitfield)
  return _internal_ack_bitfield();
}
inline void PacketWrapper::_internal_set_ack_bitfield(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ack_bitfield_ = value;
}
inline void PacketWrapper::set_ack_bitfield(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ack_bitfield(value);
  // @@protoc_insertion_point(field_set:awd.net.PacketWrapper.ack_bitfield)
}

// .awd.net.HandshakeRequest handshake_request = 10;
inline bool PacketWrapper::_internal_has_handshake_request() const {
  return packet_case() == kHandshakeRequest;
}
inline bool PacketWrapper::has_handshake_request() const {
  return _internal_has_handshake_request();
}
inline void PacketWrapper::set_has_handshake_request() {
  _oneof_case_[0] = kHandshakeRequest;
}
inline void PacketWrapper::clear_handshake_request() {
  if (_internal_has_handshake_request()) {
    if (GetArena() == nullptr) {
      delete packet_.handshake_request_;
    }
    clear_has_packet();
  }
}
inline ::awd::net::HandshakeRequest* PacketWrapper::release_handshake_request() {
  // @@protoc_insertion_point(field_release:awd.net.PacketWrapper.handshake_request)
  if (_internal_has_handshake_request()) {
    clear_has_packet();
      ::awd::net::HandshakeRequest* temp = packet_.handshake_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    packet_.handshake_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::awd::net::HandshakeRequest& PacketWrapper::_internal_handshake_request() const {
  return _internal_has_handshake_request()
      ? *packet_.handshake_request_
      : reinterpret_cast< ::awd::net::HandshakeRequest&>(::awd::net::_HandshakeRequest_default_instance_);
}
inline const ::awd::net::HandshakeRequest& PacketWrapper::handshake_request() const {
  // @@protoc_insertion_point(field_get:awd.net.PacketWrapper.handshake_request)
  return _internal_handshake_request();
}
inline ::awd::net::HandshakeRequest* PacketWrapper::unsafe_arena_release_handshake_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:awd.net.PacketWrapper.handshake_request)
  if (_internal_has_handshake_request()) {
    clear_has_packet();
    ::awd::net::HandshakeRequest* temp = packet_.handshake_request_;
    packet_.handshake_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketWrapper::unsafe_arena_set_allocated_handshake_request(::awd::net::HandshakeRequest* handshake_request) {
  clear_packet();
  if (handshake_request) {
    set_has_handshake_request();
    packet_.handshake_request_ = handshake_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:awd.net.PacketWrapper.handshake_request)
}
inline ::awd::net::HandshakeRequest* PacketWrapper::_internal_mutable_handshake_request() {
  if (!_internal_has_handshake_request()) {
    clear_packet();
    set_has_handshake_request();
    packet_.handshake_request_ = CreateMaybeMessage< ::awd::net::HandshakeRequest >(GetArena());
  }
  return packet_.handshake_request_;
}
inline ::awd::net::HandshakeRequest* PacketWrapper::mutable_handshake_request() {
  // @@protoc_insertion_point(field_mutable:awd.net.PacketWrapper.handshake_request)
  return _internal_mutable_handshake_request();
}

// .awd.net.HandshakeResponse handshake_response = 11;
inline bool PacketWrapper::_internal_has_handshake_response() const {
  return packet_case() == kHandshakeResponse;
}
inline bool PacketWrapper::has_handshake_response() const {
  return _internal_has_handshake_response();
}
inline void PacketWrapper::set_has_handshake_response() {
  _oneof_case_[0] = kHandshakeResponse;
}
inline void PacketWrapper::clear_handshake_response() {
  if (_internal_has_handshake_response()) {
    if (GetArena() == nullptr) {
      delete packet_.handshake_response_;
    }
    clear_has_packet();
  }
}
inline ::awd::net::HandshakeResponse* PacketWrapper::release_handshake_response() {
  // @@protoc_insertion_point(field_release:awd.net.PacketWrapper.handshake_response)
  if (_internal_has_handshake_response()) {
    clear_has_packet();
      ::awd::net::HandshakeResponse* temp = packet_.handshake_response_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    packet_.handshake_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::awd::net::HandshakeResponse& PacketWrapper::_internal_handshake_response() const {
  return _internal_has_handshake_response()
      ? *packet_.handshake_response_
      : reinterpret_cast< ::awd::net::HandshakeResponse&>(::awd::net::_HandshakeResponse_default_instance_);
}
inline const ::awd::net::HandshakeResponse& PacketWrapper::handshake_response() const {
  // @@protoc_insertion_point(field_get:awd.net.PacketWrapper.handshake_response)
  return _internal_handshake_response();
}
inline ::awd::net::HandshakeResponse* PacketWrapper::unsafe_arena_release_handshake_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:awd.net.PacketWrapper.handshake_response)
  if (_internal_has_handshake_response()) {
    clear_has_packet();
    ::awd::net::HandshakeResponse* temp = packet_.handshake_response_;
    packet_.handshake_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketWrapper::unsafe_arena_set_allocated_handshake_response(::awd::net::HandshakeResponse* handshake_response) {
  clear_packet();
  if (handshake_response) {
    set_has_handshake_response();
    packet_.handshake_response_ = handshake_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:awd.net.PacketWrapper.handshake_response)
}
inline ::awd::net::HandshakeResponse* PacketWrapper::_internal_mutable_handshake_response() {
  if (!_internal_has_handshake_response()) {
    clear_packet();
    set_has_handshake_response();
    packet_.handshake_response_ = CreateMaybeMessage< ::awd::net::HandshakeResponse >(GetArena());
  }
  return packet_.handshake_response_;
}
inline ::awd::net::HandshakeResponse* PacketWrapper::mutable_handshake_response() {
  // @@protoc_insertion_point(field_mutable:awd.net.PacketWrapper.handshake_response)
  return _internal_mutable_handshake_response();
}

// .awd.net.CreateLobbyRequest create_lobby_request = 100;
inline bool PacketWrapper::_internal_has_create_lobby_request() const {
  return packet_case() == kCreateLobbyRequest;
}
inline bool PacketWrapper::has_create_lobby_request() const {
  return _internal_has_create_lobby_request();
}
inline void PacketWrapper::set_has_create_lobby_request() {
  _oneof_case_[0] = kCreateLobbyRequest;
}
inline void PacketWrapper::clear_create_lobby_request() {
  if (_internal_has_create_lobby_request()) {
    if (GetArena() == nullptr) {
      delete packet_.create_lobby_request_;
    }
    clear_has_packet();
  }
}
inline ::awd::net::CreateLobbyRequest* PacketWrapper::release_create_lobby_request() {
  // @@protoc_insertion_point(field_release:awd.net.PacketWrapper.create_lobby_request)
  if (_internal_has_create_lobby_request()) {
    clear_has_packet();
      ::awd::net::CreateLobbyRequest* temp = packet_.create_lobby_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    packet_.create_lobby_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::awd::net::CreateLobbyRequest& PacketWrapper::_internal_create_lobby_request() const {
  return _internal_has_create_lobby_request()
      ? *packet_.create_lobby_request_
      : reinterpret_cast< ::awd::net::CreateLobbyRequest&>(::awd::net::_CreateLobbyRequest_default_instance_);
}
inline const ::awd::net::CreateLobbyRequest& PacketWrapper::create_lobby_request() const {
  // @@protoc_insertion_point(field_get:awd.net.PacketWrapper.create_lobby_request)
  return _internal_create_lobby_request();
}
inline ::awd::net::CreateLobbyRequest* PacketWrapper::unsafe_arena_release_create_lobby_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:awd.net.PacketWrapper.create_lobby_request)
  if (_internal_has_create_lobby_request()) {
    clear_has_packet();
    ::awd::net::CreateLobbyRequest* temp = packet_.create_lobby_request_;
    packet_.create_lobby_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketWrapper::unsafe_arena_set_allocated_create_lobby_request(::awd::net::CreateLobbyRequest* create_lobby_request) {
  clear_packet();
  if (create_lobby_request) {
    set_has_create_lobby_request();
    packet_.create_lobby_request_ = create_lobby_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:awd.net.PacketWrapper.create_lobby_request)
}
inline ::awd::net::CreateLobbyRequest* PacketWrapper::_internal_mutable_create_lobby_request() {
  if (!_internal_has_create_lobby_request()) {
    clear_packet();
    set_has_create_lobby_request();
    packet_.create_lobby_request_ = CreateMaybeMessage< ::awd::net::CreateLobbyRequest >(GetArena());
  }
  return packet_.create_lobby_request_;
}
inline ::awd::net::CreateLobbyRequest* PacketWrapper::mutable_create_lobby_request() {
  // @@protoc_insertion_point(field_mutable:awd.net.PacketWrapper.create_lobby_request)
  return _internal_mutable_create_lobby_request();
}

// .awd.net.CreateLobbyResponse create_lobby_response = 101;
inline bool PacketWrapper::_internal_has_create_lobby_response() const {
  return packet_case() == kCreateLobbyResponse;
}
inline bool PacketWrapper::has_create_lobby_response() const {
  return _internal_has_create_lobby_response();
}
inline void PacketWrapper::set_has_create_lobby_response() {
  _oneof_case_[0] = kCreateLobbyResponse;
}
inline void PacketWrapper::clear_create_lobby_response() {
  if (_internal_has_create_lobby_response()) {
    if (GetArena() == nullptr) {
      delete packet_.create_lobby_response_;
    }
    clear_has_packet();
  }
}
inline ::awd::net::CreateLobbyResponse* PacketWrapper::release_create_lobby_response() {
  // @@protoc_insertion_point(field_release:awd.net.PacketWrapper.create_lobby_response)
  if (_internal_has_create_lobby_response()) {
    clear_has_packet();
      ::awd::net::CreateLobbyResponse* temp = packet_.create_lobby_response_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    packet_.create_lobby_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::awd::net::CreateLobbyResponse& PacketWrapper::_internal_create_lobby_response() const {
  return _internal_has_create_lobby_response()
      ? *packet_.create_lobby_response_
      : reinterpret_cast< ::awd::net::CreateLobbyResponse&>(::awd::net::_CreateLobbyResponse_default_instance_);
}
inline const ::awd::net::CreateLobbyResponse& PacketWrapper::create_lobby_response() const {
  // @@protoc_insertion_point(field_get:awd.net.PacketWrapper.create_lobby_response)
  return _internal_create_lobby_response();
}
inline ::awd::net::CreateLobbyResponse* PacketWrapper::unsafe_arena_release_create_lobby_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:awd.net.PacketWrapper.create_lobby_response)
  if (_internal_has_create_lobby_response()) {
    clear_has_packet();
    ::awd::net::CreateLobbyResponse* temp = packet_.create_lobby_response_;
    packet_.create_lobby_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketWrapper::unsafe_arena_set_allocated_create_lobby_response(::awd::net::CreateLobbyResponse* create_lobby_response) {
  clear_packet();
  if (create_lobby_response) {
    set_has_create_lobby_response();
    packet_.create_lobby_response_ = create_lobby_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:awd.net.PacketWrapper.create_lobby_response)
}
inline ::awd::net::CreateLobbyResponse* PacketWrapper::_internal_mutable_create_lobby_response() {
  if (!_internal_has_create_lobby_response()) {
    clear_packet();
    set_has_create_lobby_response();
    packet_.create_lobby_response_ = CreateMaybeMessage< ::awd::net::CreateLobbyResponse >(GetArena());
  }
  return packet_.create_lobby_response_;
}
inline ::awd::net::CreateLobbyResponse* PacketWrapper::mutable_create_lobby_response() {
  // @@protoc_insertion_point(field_mutable:awd.net.PacketWrapper.create_lobby_response)
  return _internal_mutable_create_lobby_response();
}

// .awd.net.JoinLobbyRequest join_lobby_request = 102;
inline bool PacketWrapper::_internal_has_join_lobby_request() const {
  return packet_case() == kJoinLobbyRequest;
}
inline bool PacketWrapper::has_join_lobby_request() const {
  return _internal_has_join_lobby_request();
}
inline void PacketWrapper::set_has_join_lobby_request() {
  _oneof_case_[0] = kJoinLobbyRequest;
}
inline void PacketWrapper::clear_join_lobby_request() {
  if (_internal_has_join_lobby_request()) {
    if (GetArena() == nullptr) {
      delete packet_.join_lobby_request_;
    }
    clear_has_packet();
  }
}
inline ::awd::net::JoinLobbyRequest* PacketWrapper::release_join_lobby_request() {
  // @@protoc_insertion_point(field_release:awd.net.PacketWrapper.join_lobby_request)
  if (_internal_has_join_lobby_request()) {
    clear_has_packet();
      ::awd::net::JoinLobbyRequest* temp = packet_.join_lobby_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    packet_.join_lobby_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::awd::net::JoinLobbyRequest& PacketWrapper::_internal_join_lobby_request() const {
  return _internal_has_join_lobby_request()
      ? *packet_.join_lobby_request_
      : reinterpret_cast< ::awd::net::JoinLobbyRequest&>(::awd::net::_JoinLobbyRequest_default_instance_);
}
inline const ::awd::net::JoinLobbyRequest& PacketWrapper::join_lobby_request() const {
  // @@protoc_insertion_point(field_get:awd.net.PacketWrapper.join_lobby_request)
  return _internal_join_lobby_request();
}
inline ::awd::net::JoinLobbyRequest* PacketWrapper::unsafe_arena_release_join_lobby_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:awd.net.PacketWrapper.join_lobby_request)
  if (_internal_has_join_lobby_request()) {
    clear_has_packet();
    ::awd::net::JoinLobbyRequest* temp = packet_.join_lobby_request_;
    packet_.join_lobby_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketWrapper::unsafe_arena_set_allocated_join_lobby_request(::awd::net::JoinLobbyRequest* join_lobby_request) {
  clear_packet();
  if (join_lobby_request) {
    set_has_join_lobby_request();
    packet_.join_lobby_request_ = join_lobby_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:awd.net.PacketWrapper.join_lobby_request)
}
inline ::awd::net::JoinLobbyRequest* PacketWrapper::_internal_mutable_join_lobby_request() {
  if (!_internal_has_join_lobby_request()) {
    clear_packet();
    set_has_join_lobby_request();
    packet_.join_lobby_request_ = CreateMaybeMessage< ::awd::net::JoinLobbyRequest >(GetArena());
  }
  return packet_.join_lobby_request_;
}
inline ::awd::net::JoinLobbyRequest* PacketWrapper::mutable_join_lobby_request() {
  // @@protoc_insertion_point(field_mutable:awd.net.PacketWrapper.join_lobby_request)
  return _internal_mutable_join_lobby_request();
}

// .awd.net.JoinLobbyResponse join_lobby_response = 103;
inline bool PacketWrapper::_internal_has_join_lobby_response() const {
  return packet_case() == kJoinLobbyResponse;
}
inline bool PacketWrapper::has_join_lobby_response() const {
  return _internal_has_join_lobby_response();
}
inline void PacketWrapper::set_has_join_lobby_response() {
  _oneof_case_[0] = kJoinLobbyResponse;
}
inline void PacketWrapper::clear_join_lobby_response() {
  if (_internal_has_join_lobby_response()) {
    if (GetArena() == nullptr) {
      delete packet_.join_lobby_response_;
    }
    clear_has_packet();
  }
}
inline ::awd::net::JoinLobbyResponse* PacketWrapper::release_join_lobby_response() {
  // @@protoc_insertion_point(field_release:awd.net.PacketWrapper.join_lobby_response)
  if (_internal_has_join_lobby_response()) {
    clear_has_packet();
      ::awd::net::JoinLobbyResponse* temp = packet_.join_lobby_response_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    packet_.join_lobby_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::awd::net::JoinLobbyResponse& PacketWrapper::_internal_join_lobby_response() const {
  return _internal_has_join_lobby_response()
      ? *packet_.join_lobby_response_
      : reinterpret_cast< ::awd::net::JoinLobbyResponse&>(::awd::net::_JoinLobbyResponse_default_instance_);
}
inline const ::awd::net::JoinLobbyResponse& PacketWrapper::join_lobby_response() const {
  // @@protoc_insertion_point(field_get:awd.net.PacketWrapper.join_lobby_response)
  return _internal_join_lobby_response();
}
inline ::awd::net::JoinLobbyResponse* PacketWrapper::unsafe_arena_release_join_lobby_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:awd.net.PacketWrapper.join_lobby_response)
  if (_internal_has_join_lobby_response()) {
    clear_has_packet();
    ::awd::net::JoinLobbyResponse* temp = packet_.join_lobby_response_;
    packet_.join_lobby_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketWrapper::unsafe_arena_set_allocated_join_lobby_response(::awd::net::JoinLobbyResponse* join_lobby_response) {
  clear_packet();
  if (join_lobby_response) {
    set_has_join_lobby_response();
    packet_.join_lobby_response_ = join_lobby_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:awd.net.PacketWrapper.join_lobby_response)
}
inline ::awd::net::JoinLobbyResponse* PacketWrapper::_internal_mutable_join_lobby_response() {
  if (!_internal_has_join_lobby_response()) {
    clear_packet();
    set_has_join_lobby_response();
    packet_.join_lobby_response_ = CreateMaybeMessage< ::awd::net::JoinLobbyResponse >(GetArena());
  }
  return packet_.join_lobby_response_;
}
inline ::awd::net::JoinLobbyResponse* PacketWrapper::mutable_join_lobby_response() {
  // @@protoc_insertion_point(field_mutable:awd.net.PacketWrapper.join_lobby_response)
  return _internal_mutable_join_lobby_response();
}

// .awd.net.LeaveLobbyRequest leave_lobby_request = 104;
inline bool PacketWrapper::_internal_has_leave_lobby_request() const {
  return packet_case() == kLeaveLobbyRequest;
}
inline bool PacketWrapper::has_leave_lobby_request() const {
  return _internal_has_leave_lobby_request();
}
inline void PacketWrapper::set_has_leave_lobby_request() {
  _oneof_case_[0] = kLeaveLobbyRequest;
}
inline void PacketWrapper::clear_leave_lobby_request() {
  if (_internal_has_leave_lobby_request()) {
    if (GetArena() == nullptr) {
      delete packet_.leave_lobby_request_;
    }
    clear_has_packet();
  }
}
inline ::awd::net::LeaveLobbyRequest* PacketWrapper::release_leave_lobby_request() {
  // @@protoc_insertion_point(field_release:awd.net.PacketWrapper.leave_lobby_request)
  if (_internal_has_leave_lobby_request()) {
    clear_has_packet();
      ::awd::net::LeaveLobbyRequest* temp = packet_.leave_lobby_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    packet_.leave_lobby_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::awd::net::LeaveLobbyRequest& PacketWrapper::_internal_leave_lobby_request() const {
  return _internal_has_leave_lobby_request()
      ? *packet_.leave_lobby_request_
      : reinterpret_cast< ::awd::net::LeaveLobbyRequest&>(::awd::net::_LeaveLobbyRequest_default_instance_);
}
inline const ::awd::net::LeaveLobbyRequest& PacketWrapper::leave_lobby_request() const {
  // @@protoc_insertion_point(field_get:awd.net.PacketWrapper.leave_lobby_request)
  return _internal_leave_lobby_request();
}
inline ::awd::net::LeaveLobbyRequest* PacketWrapper::unsafe_arena_release_leave_lobby_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:awd.net.PacketWrapper.leave_lobby_request)
  if (_internal_has_leave_lobby_request()) {
    clear_has_packet();
    ::awd::net::LeaveLobbyRequest* temp = packet_.leave_lobby_request_;
    packet_.leave_lobby_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketWrapper::unsafe_arena_set_allocated_leave_lobby_request(::awd::net::LeaveLobbyRequest* leave_lobby_request) {
  clear_packet();
  if (leave_lobby_request) {
    set_has_leave_lobby_request();
    packet_.leave_lobby_request_ = leave_lobby_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:awd.net.PacketWrapper.leave_lobby_request)
}
inline ::awd::net::LeaveLobbyRequest* PacketWrapper::_internal_mutable_leave_lobby_request() {
  if (!_internal_has_leave_lobby_request()) {
    clear_packet();
    set_has_leave_lobby_request();
    packet_.leave_lobby_request_ = CreateMaybeMessage< ::awd::net::LeaveLobbyRequest >(GetArena());
  }
  return packet_.leave_lobby_request_;
}
inline ::awd::net::LeaveLobbyRequest* PacketWrapper::mutable_leave_lobby_request() {
  // @@protoc_insertion_point(field_mutable:awd.net.PacketWrapper.leave_lobby_request)
  return _internal_mutable_leave_lobby_request();
}

// .awd.net.LeaveLobbyResponse leave_lobby_response = 105;
inline bool PacketWrapper::_internal_has_leave_lobby_response() const {
  return packet_case() == kLeaveLobbyResponse;
}
inline bool PacketWrapper::has_leave_lobby_response() const {
  return _internal_has_leave_lobby_response();
}
inline void PacketWrapper::set_has_leave_lobby_response() {
  _oneof_case_[0] = kLeaveLobbyResponse;
}
inline void PacketWrapper::clear_leave_lobby_response() {
  if (_internal_has_leave_lobby_response()) {
    if (GetArena() == nullptr) {
      delete packet_.leave_lobby_response_;
    }
    clear_has_packet();
  }
}
inline ::awd::net::LeaveLobbyResponse* PacketWrapper::release_leave_lobby_response() {
  // @@protoc_insertion_point(field_release:awd.net.PacketWrapper.leave_lobby_response)
  if (_internal_has_leave_lobby_response()) {
    clear_has_packet();
      ::awd::net::LeaveLobbyResponse* temp = packet_.leave_lobby_response_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    packet_.leave_lobby_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::awd::net::LeaveLobbyResponse& PacketWrapper::_internal_leave_lobby_response() const {
  return _internal_has_leave_lobby_response()
      ? *packet_.leave_lobby_response_
      : reinterpret_cast< ::awd::net::LeaveLobbyResponse&>(::awd::net::_LeaveLobbyResponse_default_instance_);
}
inline const ::awd::net::LeaveLobbyResponse& PacketWrapper::leave_lobby_response() const {
  // @@protoc_insertion_point(field_get:awd.net.PacketWrapper.leave_lobby_response)
  return _internal_leave_lobby_response();
}
inline ::awd::net::LeaveLobbyResponse* PacketWrapper::unsafe_arena_release_leave_lobby_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:awd.net.PacketWrapper.leave_lobby_response)
  if (_internal_has_leave_lobby_response()) {
    clear_has_packet();
    ::awd::net::LeaveLobbyResponse* temp = packet_.leave_lobby_response_;
    packet_.leave_lobby_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketWrapper::unsafe_arena_set_allocated_leave_lobby_response(::awd::net::LeaveLobbyResponse* leave_lobby_response) {
  clear_packet();
  if (leave_lobby_response) {
    set_has_leave_lobby_response();
    packet_.leave_lobby_response_ = leave_lobby_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:awd.net.PacketWrapper.leave_lobby_response)
}
inline ::awd::net::LeaveLobbyResponse* PacketWrapper::_internal_mutable_leave_lobby_response() {
  if (!_internal_has_leave_lobby_response()) {
    clear_packet();
    set_has_leave_lobby_response();
    packet_.leave_lobby_response_ = CreateMaybeMessage< ::awd::net::LeaveLobbyResponse >(GetArena());
  }
  return packet_.leave_lobby_response_;
}
inline ::awd::net::LeaveLobbyResponse* PacketWrapper::mutable_leave_lobby_response() {
  // @@protoc_insertion_point(field_mutable:awd.net.PacketWrapper.leave_lobby_response)
  return _internal_mutable_leave_lobby_response();
}

// .awd.net.KickedFromLobby kicked_from_lobby = 106;
inline bool PacketWrapper::_internal_has_kicked_from_lobby() const {
  return packet_case() == kKickedFromLobby;
}
inline bool PacketWrapper::has_kicked_from_lobby() const {
  return _internal_has_kicked_from_lobby();
}
inline void PacketWrapper::set_has_kicked_from_lobby() {
  _oneof_case_[0] = kKickedFromLobby;
}
inline void PacketWrapper::clear_kicked_from_lobby() {
  if (_internal_has_kicked_from_lobby()) {
    if (GetArena() == nullptr) {
      delete packet_.kicked_from_lobby_;
    }
    clear_has_packet();
  }
}
inline ::awd::net::KickedFromLobby* PacketWrapper::release_kicked_from_lobby() {
  // @@protoc_insertion_point(field_release:awd.net.PacketWrapper.kicked_from_lobby)
  if (_internal_has_kicked_from_lobby()) {
    clear_has_packet();
      ::awd::net::KickedFromLobby* temp = packet_.kicked_from_lobby_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    packet_.kicked_from_lobby_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::awd::net::KickedFromLobby& PacketWrapper::_internal_kicked_from_lobby() const {
  return _internal_has_kicked_from_lobby()
      ? *packet_.kicked_from_lobby_
      : reinterpret_cast< ::awd::net::KickedFromLobby&>(::awd::net::_KickedFromLobby_default_instance_);
}
inline const ::awd::net::KickedFromLobby& PacketWrapper::kicked_from_lobby() const {
  // @@protoc_insertion_point(field_get:awd.net.PacketWrapper.kicked_from_lobby)
  return _internal_kicked_from_lobby();
}
inline ::awd::net::KickedFromLobby* PacketWrapper::unsafe_arena_release_kicked_from_lobby() {
  // @@protoc_insertion_point(field_unsafe_arena_release:awd.net.PacketWrapper.kicked_from_lobby)
  if (_internal_has_kicked_from_lobby()) {
    clear_has_packet();
    ::awd::net::KickedFromLobby* temp = packet_.kicked_from_lobby_;
    packet_.kicked_from_lobby_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketWrapper::unsafe_arena_set_allocated_kicked_from_lobby(::awd::net::KickedFromLobby* kicked_from_lobby) {
  clear_packet();
  if (kicked_from_lobby) {
    set_has_kicked_from_lobby();
    packet_.kicked_from_lobby_ = kicked_from_lobby;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:awd.net.PacketWrapper.kicked_from_lobby)
}
inline ::awd::net::KickedFromLobby* PacketWrapper::_internal_mutable_kicked_from_lobby() {
  if (!_internal_has_kicked_from_lobby()) {
    clear_packet();
    set_has_kicked_from_lobby();
    packet_.kicked_from_lobby_ = CreateMaybeMessage< ::awd::net::KickedFromLobby >(GetArena());
  }
  return packet_.kicked_from_lobby_;
}
inline ::awd::net::KickedFromLobby* PacketWrapper::mutable_kicked_from_lobby() {
  // @@protoc_insertion_point(field_mutable:awd.net.PacketWrapper.kicked_from_lobby)
  return _internal_mutable_kicked_from_lobby();
}

// .awd.net.UpdatedMembersList updated_members_list = 107;
inline bool PacketWrapper::_internal_has_updated_members_list() const {
  return packet_case() == kUpdatedMembersList;
}
inline bool PacketWrapper::has_updated_members_list() const {
  return _internal_has_updated_members_list();
}
inline void PacketWrapper::set_has_updated_members_list() {
  _oneof_case_[0] = kUpdatedMembersList;
}
inline void PacketWrapper::clear_updated_members_list() {
  if (_internal_has_updated_members_list()) {
    if (GetArena() == nullptr) {
      delete packet_.updated_members_list_;
    }
    clear_has_packet();
  }
}
inline ::awd::net::UpdatedMembersList* PacketWrapper::release_updated_members_list() {
  // @@protoc_insertion_point(field_release:awd.net.PacketWrapper.updated_members_list)
  if (_internal_has_updated_members_list()) {
    clear_has_packet();
      ::awd::net::UpdatedMembersList* temp = packet_.updated_members_list_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    packet_.updated_members_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::awd::net::UpdatedMembersList& PacketWrapper::_internal_updated_members_list() const {
  return _internal_has_updated_members_list()
      ? *packet_.updated_members_list_
      : reinterpret_cast< ::awd::net::UpdatedMembersList&>(::awd::net::_UpdatedMembersList_default_instance_);
}
inline const ::awd::net::UpdatedMembersList& PacketWrapper::updated_members_list() const {
  // @@protoc_insertion_point(field_get:awd.net.PacketWrapper.updated_members_list)
  return _internal_updated_members_list();
}
inline ::awd::net::UpdatedMembersList* PacketWrapper::unsafe_arena_release_updated_members_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:awd.net.PacketWrapper.updated_members_list)
  if (_internal_has_updated_members_list()) {
    clear_has_packet();
    ::awd::net::UpdatedMembersList* temp = packet_.updated_members_list_;
    packet_.updated_members_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketWrapper::unsafe_arena_set_allocated_updated_members_list(::awd::net::UpdatedMembersList* updated_members_list) {
  clear_packet();
  if (updated_members_list) {
    set_has_updated_members_list();
    packet_.updated_members_list_ = updated_members_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:awd.net.PacketWrapper.updated_members_list)
}
inline ::awd::net::UpdatedMembersList* PacketWrapper::_internal_mutable_updated_members_list() {
  if (!_internal_has_updated_members_list()) {
    clear_packet();
    set_has_updated_members_list();
    packet_.updated_members_list_ = CreateMaybeMessage< ::awd::net::UpdatedMembersList >(GetArena());
  }
  return packet_.updated_members_list_;
}
inline ::awd::net::UpdatedMembersList* PacketWrapper::mutable_updated_members_list() {
  // @@protoc_insertion_point(field_mutable:awd.net.PacketWrapper.updated_members_list)
  return _internal_mutable_updated_members_list();
}

// .awd.net.KeepAlive keep_alive = 1000;
inline bool PacketWrapper::_internal_has_keep_alive() const {
  return packet_case() == kKeepAlive;
}
inline bool PacketWrapper::has_keep_alive() const {
  return _internal_has_keep_alive();
}
inline void PacketWrapper::set_has_keep_alive() {
  _oneof_case_[0] = kKeepAlive;
}
inline void PacketWrapper::clear_keep_alive() {
  if (_internal_has_keep_alive()) {
    if (GetArena() == nullptr) {
      delete packet_.keep_alive_;
    }
    clear_has_packet();
  }
}
inline ::awd::net::KeepAlive* PacketWrapper::release_keep_alive() {
  // @@protoc_insertion_point(field_release:awd.net.PacketWrapper.keep_alive)
  if (_internal_has_keep_alive()) {
    clear_has_packet();
      ::awd::net::KeepAlive* temp = packet_.keep_alive_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    packet_.keep_alive_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::awd::net::KeepAlive& PacketWrapper::_internal_keep_alive() const {
  return _internal_has_keep_alive()
      ? *packet_.keep_alive_
      : reinterpret_cast< ::awd::net::KeepAlive&>(::awd::net::_KeepAlive_default_instance_);
}
inline const ::awd::net::KeepAlive& PacketWrapper::keep_alive() const {
  // @@protoc_insertion_point(field_get:awd.net.PacketWrapper.keep_alive)
  return _internal_keep_alive();
}
inline ::awd::net::KeepAlive* PacketWrapper::unsafe_arena_release_keep_alive() {
  // @@protoc_insertion_point(field_unsafe_arena_release:awd.net.PacketWrapper.keep_alive)
  if (_internal_has_keep_alive()) {
    clear_has_packet();
    ::awd::net::KeepAlive* temp = packet_.keep_alive_;
    packet_.keep_alive_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketWrapper::unsafe_arena_set_allocated_keep_alive(::awd::net::KeepAlive* keep_alive) {
  clear_packet();
  if (keep_alive) {
    set_has_keep_alive();
    packet_.keep_alive_ = keep_alive;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:awd.net.PacketWrapper.keep_alive)
}
inline ::awd::net::KeepAlive* PacketWrapper::_internal_mutable_keep_alive() {
  if (!_internal_has_keep_alive()) {
    clear_packet();
    set_has_keep_alive();
    packet_.keep_alive_ = CreateMaybeMessage< ::awd::net::KeepAlive >(GetArena());
  }
  return packet_.keep_alive_;
}
inline ::awd::net::KeepAlive* PacketWrapper::mutable_keep_alive() {
  // @@protoc_insertion_point(field_mutable:awd.net.PacketWrapper.keep_alive)
  return _internal_mutable_keep_alive();
}

// .awd.net.Ping ping = 10000;
inline bool PacketWrapper::_internal_has_ping() const {
  return packet_case() == kPing;
}
inline bool PacketWrapper::has_ping() const {
  return _internal_has_ping();
}
inline void PacketWrapper::set_has_ping() {
  _oneof_case_[0] = kPing;
}
inline void PacketWrapper::clear_ping() {
  if (_internal_has_ping()) {
    if (GetArena() == nullptr) {
      delete packet_.ping_;
    }
    clear_has_packet();
  }
}
inline ::awd::net::Ping* PacketWrapper::release_ping() {
  // @@protoc_insertion_point(field_release:awd.net.PacketWrapper.ping)
  if (_internal_has_ping()) {
    clear_has_packet();
      ::awd::net::Ping* temp = packet_.ping_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    packet_.ping_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::awd::net::Ping& PacketWrapper::_internal_ping() const {
  return _internal_has_ping()
      ? *packet_.ping_
      : reinterpret_cast< ::awd::net::Ping&>(::awd::net::_Ping_default_instance_);
}
inline const ::awd::net::Ping& PacketWrapper::ping() const {
  // @@protoc_insertion_point(field_get:awd.net.PacketWrapper.ping)
  return _internal_ping();
}
inline ::awd::net::Ping* PacketWrapper::unsafe_arena_release_ping() {
  // @@protoc_insertion_point(field_unsafe_arena_release:awd.net.PacketWrapper.ping)
  if (_internal_has_ping()) {
    clear_has_packet();
    ::awd::net::Ping* temp = packet_.ping_;
    packet_.ping_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketWrapper::unsafe_arena_set_allocated_ping(::awd::net::Ping* ping) {
  clear_packet();
  if (ping) {
    set_has_ping();
    packet_.ping_ = ping;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:awd.net.PacketWrapper.ping)
}
inline ::awd::net::Ping* PacketWrapper::_internal_mutable_ping() {
  if (!_internal_has_ping()) {
    clear_packet();
    set_has_ping();
    packet_.ping_ = CreateMaybeMessage< ::awd::net::Ping >(GetArena());
  }
  return packet_.ping_;
}
inline ::awd::net::Ping* PacketWrapper::mutable_ping() {
  // @@protoc_insertion_point(field_mutable:awd.net.PacketWrapper.ping)
  return _internal_mutable_ping();
}

// .awd.net.Pong pong = 10001;
inline bool PacketWrapper::_internal_has_pong() const {
  return packet_case() == kPong;
}
inline bool PacketWrapper::has_pong() const {
  return _internal_has_pong();
}
inline void PacketWrapper::set_has_pong() {
  _oneof_case_[0] = kPong;
}
inline void PacketWrapper::clear_pong() {
  if (_internal_has_pong()) {
    if (GetArena() == nullptr) {
      delete packet_.pong_;
    }
    clear_has_packet();
  }
}
inline ::awd::net::Pong* PacketWrapper::release_pong() {
  // @@protoc_insertion_point(field_release:awd.net.PacketWrapper.pong)
  if (_internal_has_pong()) {
    clear_has_packet();
      ::awd::net::Pong* temp = packet_.pong_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    packet_.pong_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::awd::net::Pong& PacketWrapper::_internal_pong() const {
  return _internal_has_pong()
      ? *packet_.pong_
      : reinterpret_cast< ::awd::net::Pong&>(::awd::net::_Pong_default_instance_);
}
inline const ::awd::net::Pong& PacketWrapper::pong() const {
  // @@protoc_insertion_point(field_get:awd.net.PacketWrapper.pong)
  return _internal_pong();
}
inline ::awd::net::Pong* PacketWrapper::unsafe_arena_release_pong() {
  // @@protoc_insertion_point(field_unsafe_arena_release:awd.net.PacketWrapper.pong)
  if (_internal_has_pong()) {
    clear_has_packet();
    ::awd::net::Pong* temp = packet_.pong_;
    packet_.pong_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketWrapper::unsafe_arena_set_allocated_pong(::awd::net::Pong* pong) {
  clear_packet();
  if (pong) {
    set_has_pong();
    packet_.pong_ = pong;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:awd.net.PacketWrapper.pong)
}
inline ::awd::net::Pong* PacketWrapper::_internal_mutable_pong() {
  if (!_internal_has_pong()) {
    clear_packet();
    set_has_pong();
    packet_.pong_ = CreateMaybeMessage< ::awd::net::Pong >(GetArena());
  }
  return packet_.pong_;
}
inline ::awd::net::Pong* PacketWrapper::mutable_pong() {
  // @@protoc_insertion_point(field_mutable:awd.net.PacketWrapper.pong)
  return _internal_mutable_pong();
}

inline bool PacketWrapper::has_packet() const {
  return packet_case() != PACKET_NOT_SET;
}
inline void PacketWrapper::clear_has_packet() {
  _oneof_case_[0] = PACKET_NOT_SET;
}
inline PacketWrapper::PacketCase PacketWrapper::packet_case() const {
  return PacketWrapper::PacketCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace net
}  // namespace awd

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_packets_2eproto
