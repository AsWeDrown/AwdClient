// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packets.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_packets_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_packets_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_packets_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_packets_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_packets_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_packets_2eproto_metadata_getter(int index);
namespace awd {
namespace net {
class CreateLobbyRequest;
struct CreateLobbyRequestDefaultTypeInternal;
extern CreateLobbyRequestDefaultTypeInternal _CreateLobbyRequest_default_instance_;
class KeepAlive;
struct KeepAliveDefaultTypeInternal;
extern KeepAliveDefaultTypeInternal _KeepAlive_default_instance_;
class PacketWrapper;
struct PacketWrapperDefaultTypeInternal;
extern PacketWrapperDefaultTypeInternal _PacketWrapper_default_instance_;
}  // namespace net
}  // namespace awd
PROTOBUF_NAMESPACE_OPEN
template<> ::awd::net::CreateLobbyRequest* Arena::CreateMaybeMessage<::awd::net::CreateLobbyRequest>(Arena*);
template<> ::awd::net::KeepAlive* Arena::CreateMaybeMessage<::awd::net::KeepAlive>(Arena*);
template<> ::awd::net::PacketWrapper* Arena::CreateMaybeMessage<::awd::net::PacketWrapper>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace awd {
namespace net {

// ===================================================================

class CreateLobbyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:awd.net.CreateLobbyRequest) */ {
 public:
  inline CreateLobbyRequest() : CreateLobbyRequest(nullptr) {}
  virtual ~CreateLobbyRequest();
  explicit constexpr CreateLobbyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateLobbyRequest(const CreateLobbyRequest& from);
  CreateLobbyRequest(CreateLobbyRequest&& from) noexcept
    : CreateLobbyRequest() {
    *this = ::std::move(from);
  }

  inline CreateLobbyRequest& operator=(const CreateLobbyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateLobbyRequest& operator=(CreateLobbyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateLobbyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateLobbyRequest* internal_default_instance() {
    return reinterpret_cast<const CreateLobbyRequest*>(
               &_CreateLobbyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateLobbyRequest& a, CreateLobbyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateLobbyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateLobbyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateLobbyRequest* New() const final {
    return CreateMaybeMessage<CreateLobbyRequest>(nullptr);
  }

  CreateLobbyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateLobbyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateLobbyRequest& from);
  void MergeFrom(const CreateLobbyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateLobbyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "awd.net.CreateLobbyRequest";
  }
  protected:
  explicit CreateLobbyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_packets_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerNameFieldNumber = 1,
  };
  // string playerName = 1;
  void clear_playername();
  const std::string& playername() const;
  void set_playername(const std::string& value);
  void set_playername(std::string&& value);
  void set_playername(const char* value);
  void set_playername(const char* value, size_t size);
  std::string* mutable_playername();
  std::string* release_playername();
  void set_allocated_playername(std::string* playername);
  private:
  const std::string& _internal_playername() const;
  void _internal_set_playername(const std::string& value);
  std::string* _internal_mutable_playername();
  public:

  // @@protoc_insertion_point(class_scope:awd.net.CreateLobbyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playername_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packets_2eproto;
};
// -------------------------------------------------------------------

class KeepAlive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:awd.net.KeepAlive) */ {
 public:
  inline KeepAlive() : KeepAlive(nullptr) {}
  virtual ~KeepAlive();
  explicit constexpr KeepAlive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeepAlive(const KeepAlive& from);
  KeepAlive(KeepAlive&& from) noexcept
    : KeepAlive() {
    *this = ::std::move(from);
  }

  inline KeepAlive& operator=(const KeepAlive& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeepAlive& operator=(KeepAlive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeepAlive& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeepAlive* internal_default_instance() {
    return reinterpret_cast<const KeepAlive*>(
               &_KeepAlive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(KeepAlive& a, KeepAlive& b) {
    a.Swap(&b);
  }
  inline void Swap(KeepAlive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeepAlive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeepAlive* New() const final {
    return CreateMaybeMessage<KeepAlive>(nullptr);
  }

  KeepAlive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeepAlive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeepAlive& from);
  void MergeFrom(const KeepAlive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeepAlive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "awd.net.KeepAlive";
  }
  protected:
  explicit KeepAlive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_packets_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kTestIdFieldNumber = 2,
  };
  // int32 playerId = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::int32 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 testId = 2;
  void clear_testid();
  ::PROTOBUF_NAMESPACE_ID::int32 testid() const;
  void set_testid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_testid() const;
  void _internal_set_testid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:awd.net.KeepAlive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 playerid_;
  ::PROTOBUF_NAMESPACE_ID::int32 testid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packets_2eproto;
};
// -------------------------------------------------------------------

class PacketWrapper PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:awd.net.PacketWrapper) */ {
 public:
  inline PacketWrapper() : PacketWrapper(nullptr) {}
  virtual ~PacketWrapper();
  explicit constexpr PacketWrapper(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PacketWrapper(const PacketWrapper& from);
  PacketWrapper(PacketWrapper&& from) noexcept
    : PacketWrapper() {
    *this = ::std::move(from);
  }

  inline PacketWrapper& operator=(const PacketWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline PacketWrapper& operator=(PacketWrapper&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PacketWrapper& default_instance() {
    return *internal_default_instance();
  }
  enum PacketCase {
    kCreateLobbyRequest = 1,
    kKeepAlive = 1000,
    PACKET_NOT_SET = 0,
  };

  static inline const PacketWrapper* internal_default_instance() {
    return reinterpret_cast<const PacketWrapper*>(
               &_PacketWrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PacketWrapper& a, PacketWrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(PacketWrapper* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PacketWrapper* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PacketWrapper* New() const final {
    return CreateMaybeMessage<PacketWrapper>(nullptr);
  }

  PacketWrapper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PacketWrapper>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PacketWrapper& from);
  void MergeFrom(const PacketWrapper& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PacketWrapper* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "awd.net.PacketWrapper";
  }
  protected:
  explicit PacketWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_packets_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreateLobbyRequestFieldNumber = 1,
    kKeepAliveFieldNumber = 1000,
  };
  // .awd.net.CreateLobbyRequest createLobbyRequest = 1;
  bool has_createlobbyrequest() const;
  private:
  bool _internal_has_createlobbyrequest() const;
  public:
  void clear_createlobbyrequest();
  const ::awd::net::CreateLobbyRequest& createlobbyrequest() const;
  ::awd::net::CreateLobbyRequest* release_createlobbyrequest();
  ::awd::net::CreateLobbyRequest* mutable_createlobbyrequest();
  void set_allocated_createlobbyrequest(::awd::net::CreateLobbyRequest* createlobbyrequest);
  private:
  const ::awd::net::CreateLobbyRequest& _internal_createlobbyrequest() const;
  ::awd::net::CreateLobbyRequest* _internal_mutable_createlobbyrequest();
  public:
  void unsafe_arena_set_allocated_createlobbyrequest(
      ::awd::net::CreateLobbyRequest* createlobbyrequest);
  ::awd::net::CreateLobbyRequest* unsafe_arena_release_createlobbyrequest();

  // .awd.net.KeepAlive keepAlive = 1000;
  bool has_keepalive() const;
  private:
  bool _internal_has_keepalive() const;
  public:
  void clear_keepalive();
  const ::awd::net::KeepAlive& keepalive() const;
  ::awd::net::KeepAlive* release_keepalive();
  ::awd::net::KeepAlive* mutable_keepalive();
  void set_allocated_keepalive(::awd::net::KeepAlive* keepalive);
  private:
  const ::awd::net::KeepAlive& _internal_keepalive() const;
  ::awd::net::KeepAlive* _internal_mutable_keepalive();
  public:
  void unsafe_arena_set_allocated_keepalive(
      ::awd::net::KeepAlive* keepalive);
  ::awd::net::KeepAlive* unsafe_arena_release_keepalive();

  void clear_packet();
  PacketCase packet_case() const;
  // @@protoc_insertion_point(class_scope:awd.net.PacketWrapper)
 private:
  class _Internal;
  void set_has_createlobbyrequest();
  void set_has_keepalive();

  inline bool has_packet() const;
  inline void clear_has_packet();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union PacketUnion {
    constexpr PacketUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::awd::net::CreateLobbyRequest* createlobbyrequest_;
    ::awd::net::KeepAlive* keepalive_;
  } packet_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_packets_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateLobbyRequest

// string playerName = 1;
inline void CreateLobbyRequest::clear_playername() {
  playername_.ClearToEmpty();
}
inline const std::string& CreateLobbyRequest::playername() const {
  // @@protoc_insertion_point(field_get:awd.net.CreateLobbyRequest.playerName)
  return _internal_playername();
}
inline void CreateLobbyRequest::set_playername(const std::string& value) {
  _internal_set_playername(value);
  // @@protoc_insertion_point(field_set:awd.net.CreateLobbyRequest.playerName)
}
inline std::string* CreateLobbyRequest::mutable_playername() {
  // @@protoc_insertion_point(field_mutable:awd.net.CreateLobbyRequest.playerName)
  return _internal_mutable_playername();
}
inline const std::string& CreateLobbyRequest::_internal_playername() const {
  return playername_.Get();
}
inline void CreateLobbyRequest::_internal_set_playername(const std::string& value) {
  
  playername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateLobbyRequest::set_playername(std::string&& value) {
  
  playername_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:awd.net.CreateLobbyRequest.playerName)
}
inline void CreateLobbyRequest::set_playername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  playername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:awd.net.CreateLobbyRequest.playerName)
}
inline void CreateLobbyRequest::set_playername(const char* value,
    size_t size) {
  
  playername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:awd.net.CreateLobbyRequest.playerName)
}
inline std::string* CreateLobbyRequest::_internal_mutable_playername() {
  
  return playername_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateLobbyRequest::release_playername() {
  // @@protoc_insertion_point(field_release:awd.net.CreateLobbyRequest.playerName)
  return playername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateLobbyRequest::set_allocated_playername(std::string* playername) {
  if (playername != nullptr) {
    
  } else {
    
  }
  playername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playername,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:awd.net.CreateLobbyRequest.playerName)
}

// -------------------------------------------------------------------

// KeepAlive

// int32 playerId = 1;
inline void KeepAlive::clear_playerid() {
  playerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KeepAlive::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KeepAlive::playerid() const {
  // @@protoc_insertion_point(field_get:awd.net.KeepAlive.playerId)
  return _internal_playerid();
}
inline void KeepAlive::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  playerid_ = value;
}
inline void KeepAlive::set_playerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:awd.net.KeepAlive.playerId)
}

// int32 testId = 2;
inline void KeepAlive::clear_testid() {
  testid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KeepAlive::_internal_testid() const {
  return testid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KeepAlive::testid() const {
  // @@protoc_insertion_point(field_get:awd.net.KeepAlive.testId)
  return _internal_testid();
}
inline void KeepAlive::_internal_set_testid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  testid_ = value;
}
inline void KeepAlive::set_testid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_testid(value);
  // @@protoc_insertion_point(field_set:awd.net.KeepAlive.testId)
}

// -------------------------------------------------------------------

// PacketWrapper

// .awd.net.CreateLobbyRequest createLobbyRequest = 1;
inline bool PacketWrapper::_internal_has_createlobbyrequest() const {
  return packet_case() == kCreateLobbyRequest;
}
inline bool PacketWrapper::has_createlobbyrequest() const {
  return _internal_has_createlobbyrequest();
}
inline void PacketWrapper::set_has_createlobbyrequest() {
  _oneof_case_[0] = kCreateLobbyRequest;
}
inline void PacketWrapper::clear_createlobbyrequest() {
  if (_internal_has_createlobbyrequest()) {
    if (GetArena() == nullptr) {
      delete packet_.createlobbyrequest_;
    }
    clear_has_packet();
  }
}
inline ::awd::net::CreateLobbyRequest* PacketWrapper::release_createlobbyrequest() {
  // @@protoc_insertion_point(field_release:awd.net.PacketWrapper.createLobbyRequest)
  if (_internal_has_createlobbyrequest()) {
    clear_has_packet();
      ::awd::net::CreateLobbyRequest* temp = packet_.createlobbyrequest_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    packet_.createlobbyrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::awd::net::CreateLobbyRequest& PacketWrapper::_internal_createlobbyrequest() const {
  return _internal_has_createlobbyrequest()
      ? *packet_.createlobbyrequest_
      : reinterpret_cast< ::awd::net::CreateLobbyRequest&>(::awd::net::_CreateLobbyRequest_default_instance_);
}
inline const ::awd::net::CreateLobbyRequest& PacketWrapper::createlobbyrequest() const {
  // @@protoc_insertion_point(field_get:awd.net.PacketWrapper.createLobbyRequest)
  return _internal_createlobbyrequest();
}
inline ::awd::net::CreateLobbyRequest* PacketWrapper::unsafe_arena_release_createlobbyrequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:awd.net.PacketWrapper.createLobbyRequest)
  if (_internal_has_createlobbyrequest()) {
    clear_has_packet();
    ::awd::net::CreateLobbyRequest* temp = packet_.createlobbyrequest_;
    packet_.createlobbyrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketWrapper::unsafe_arena_set_allocated_createlobbyrequest(::awd::net::CreateLobbyRequest* createlobbyrequest) {
  clear_packet();
  if (createlobbyrequest) {
    set_has_createlobbyrequest();
    packet_.createlobbyrequest_ = createlobbyrequest;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:awd.net.PacketWrapper.createLobbyRequest)
}
inline ::awd::net::CreateLobbyRequest* PacketWrapper::_internal_mutable_createlobbyrequest() {
  if (!_internal_has_createlobbyrequest()) {
    clear_packet();
    set_has_createlobbyrequest();
    packet_.createlobbyrequest_ = CreateMaybeMessage< ::awd::net::CreateLobbyRequest >(GetArena());
  }
  return packet_.createlobbyrequest_;
}
inline ::awd::net::CreateLobbyRequest* PacketWrapper::mutable_createlobbyrequest() {
  // @@protoc_insertion_point(field_mutable:awd.net.PacketWrapper.createLobbyRequest)
  return _internal_mutable_createlobbyrequest();
}

// .awd.net.KeepAlive keepAlive = 1000;
inline bool PacketWrapper::_internal_has_keepalive() const {
  return packet_case() == kKeepAlive;
}
inline bool PacketWrapper::has_keepalive() const {
  return _internal_has_keepalive();
}
inline void PacketWrapper::set_has_keepalive() {
  _oneof_case_[0] = kKeepAlive;
}
inline void PacketWrapper::clear_keepalive() {
  if (_internal_has_keepalive()) {
    if (GetArena() == nullptr) {
      delete packet_.keepalive_;
    }
    clear_has_packet();
  }
}
inline ::awd::net::KeepAlive* PacketWrapper::release_keepalive() {
  // @@protoc_insertion_point(field_release:awd.net.PacketWrapper.keepAlive)
  if (_internal_has_keepalive()) {
    clear_has_packet();
      ::awd::net::KeepAlive* temp = packet_.keepalive_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    packet_.keepalive_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::awd::net::KeepAlive& PacketWrapper::_internal_keepalive() const {
  return _internal_has_keepalive()
      ? *packet_.keepalive_
      : reinterpret_cast< ::awd::net::KeepAlive&>(::awd::net::_KeepAlive_default_instance_);
}
inline const ::awd::net::KeepAlive& PacketWrapper::keepalive() const {
  // @@protoc_insertion_point(field_get:awd.net.PacketWrapper.keepAlive)
  return _internal_keepalive();
}
inline ::awd::net::KeepAlive* PacketWrapper::unsafe_arena_release_keepalive() {
  // @@protoc_insertion_point(field_unsafe_arena_release:awd.net.PacketWrapper.keepAlive)
  if (_internal_has_keepalive()) {
    clear_has_packet();
    ::awd::net::KeepAlive* temp = packet_.keepalive_;
    packet_.keepalive_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketWrapper::unsafe_arena_set_allocated_keepalive(::awd::net::KeepAlive* keepalive) {
  clear_packet();
  if (keepalive) {
    set_has_keepalive();
    packet_.keepalive_ = keepalive;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:awd.net.PacketWrapper.keepAlive)
}
inline ::awd::net::KeepAlive* PacketWrapper::_internal_mutable_keepalive() {
  if (!_internal_has_keepalive()) {
    clear_packet();
    set_has_keepalive();
    packet_.keepalive_ = CreateMaybeMessage< ::awd::net::KeepAlive >(GetArena());
  }
  return packet_.keepalive_;
}
inline ::awd::net::KeepAlive* PacketWrapper::mutable_keepalive() {
  // @@protoc_insertion_point(field_mutable:awd.net.PacketWrapper.keepAlive)
  return _internal_mutable_keepalive();
}

inline bool PacketWrapper::has_packet() const {
  return packet_case() != PACKET_NOT_SET;
}
inline void PacketWrapper::clear_has_packet() {
  _oneof_case_[0] = PACKET_NOT_SET;
}
inline PacketWrapper::PacketCase PacketWrapper::packet_case() const {
  return PacketWrapper::PacketCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace net
}  // namespace awd

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_packets_2eproto
