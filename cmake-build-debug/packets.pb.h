// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packets.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_packets_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_packets_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_packets_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_packets_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[26]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_packets_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_packets_2eproto_metadata_getter(int index);
namespace awd {
namespace net {
class BeginPlayStateRequest;
struct BeginPlayStateRequestDefaultTypeInternal;
extern BeginPlayStateRequestDefaultTypeInternal _BeginPlayStateRequest_default_instance_;
class BeginPlayStateResponse;
struct BeginPlayStateResponseDefaultTypeInternal;
extern BeginPlayStateResponseDefaultTypeInternal _BeginPlayStateResponse_default_instance_;
class CreateLobbyRequest;
struct CreateLobbyRequestDefaultTypeInternal;
extern CreateLobbyRequestDefaultTypeInternal _CreateLobbyRequest_default_instance_;
class CreateLobbyResponse;
struct CreateLobbyResponseDefaultTypeInternal;
extern CreateLobbyResponseDefaultTypeInternal _CreateLobbyResponse_default_instance_;
class HandshakeRequest;
struct HandshakeRequestDefaultTypeInternal;
extern HandshakeRequestDefaultTypeInternal _HandshakeRequest_default_instance_;
class HandshakeResponse;
struct HandshakeResponseDefaultTypeInternal;
extern HandshakeResponseDefaultTypeInternal _HandshakeResponse_default_instance_;
class JoinLobbyRequest;
struct JoinLobbyRequestDefaultTypeInternal;
extern JoinLobbyRequestDefaultTypeInternal _JoinLobbyRequest_default_instance_;
class JoinLobbyResponse;
struct JoinLobbyResponseDefaultTypeInternal;
extern JoinLobbyResponseDefaultTypeInternal _JoinLobbyResponse_default_instance_;
class JoinLobbyResponse_OthersCharactersEntry_DoNotUse;
struct JoinLobbyResponse_OthersCharactersEntry_DoNotUseDefaultTypeInternal;
extern JoinLobbyResponse_OthersCharactersEntry_DoNotUseDefaultTypeInternal _JoinLobbyResponse_OthersCharactersEntry_DoNotUse_default_instance_;
class JoinLobbyResponse_OthersNamesEntry_DoNotUse;
struct JoinLobbyResponse_OthersNamesEntry_DoNotUseDefaultTypeInternal;
extern JoinLobbyResponse_OthersNamesEntry_DoNotUseDefaultTypeInternal _JoinLobbyResponse_OthersNamesEntry_DoNotUse_default_instance_;
class JoinWorldCommand;
struct JoinWorldCommandDefaultTypeInternal;
extern JoinWorldCommandDefaultTypeInternal _JoinWorldCommand_default_instance_;
class JoinWorldComplete;
struct JoinWorldCompleteDefaultTypeInternal;
extern JoinWorldCompleteDefaultTypeInternal _JoinWorldComplete_default_instance_;
class KickedFromLobby;
struct KickedFromLobbyDefaultTypeInternal;
extern KickedFromLobbyDefaultTypeInternal _KickedFromLobby_default_instance_;
class LeaveLobbyRequest;
struct LeaveLobbyRequestDefaultTypeInternal;
extern LeaveLobbyRequestDefaultTypeInternal _LeaveLobbyRequest_default_instance_;
class LeaveLobbyResponse;
struct LeaveLobbyResponseDefaultTypeInternal;
extern LeaveLobbyResponseDefaultTypeInternal _LeaveLobbyResponse_default_instance_;
class PacketWrapper;
struct PacketWrapperDefaultTypeInternal;
extern PacketWrapperDefaultTypeInternal _PacketWrapper_default_instance_;
class Ping;
struct PingDefaultTypeInternal;
extern PingDefaultTypeInternal _Ping_default_instance_;
class Pong;
struct PongDefaultTypeInternal;
extern PongDefaultTypeInternal _Pong_default_instance_;
class SpawnPlayer;
struct SpawnPlayerDefaultTypeInternal;
extern SpawnPlayerDefaultTypeInternal _SpawnPlayer_default_instance_;
class UpdateDimensionCommand;
struct UpdateDimensionCommandDefaultTypeInternal;
extern UpdateDimensionCommandDefaultTypeInternal _UpdateDimensionCommand_default_instance_;
class UpdateDimensionComplete;
struct UpdateDimensionCompleteDefaultTypeInternal;
extern UpdateDimensionCompleteDefaultTypeInternal _UpdateDimensionComplete_default_instance_;
class UpdateEntityPosition;
struct UpdateEntityPositionDefaultTypeInternal;
extern UpdateEntityPositionDefaultTypeInternal _UpdateEntityPosition_default_instance_;
class UpdatePlayerInputs;
struct UpdatePlayerInputsDefaultTypeInternal;
extern UpdatePlayerInputsDefaultTypeInternal _UpdatePlayerInputs_default_instance_;
class UpdatedMembersList;
struct UpdatedMembersListDefaultTypeInternal;
extern UpdatedMembersListDefaultTypeInternal _UpdatedMembersList_default_instance_;
class UpdatedMembersList_NewAllCharactersEntry_DoNotUse;
struct UpdatedMembersList_NewAllCharactersEntry_DoNotUseDefaultTypeInternal;
extern UpdatedMembersList_NewAllCharactersEntry_DoNotUseDefaultTypeInternal _UpdatedMembersList_NewAllCharactersEntry_DoNotUse_default_instance_;
class UpdatedMembersList_NewAllNamesEntry_DoNotUse;
struct UpdatedMembersList_NewAllNamesEntry_DoNotUseDefaultTypeInternal;
extern UpdatedMembersList_NewAllNamesEntry_DoNotUseDefaultTypeInternal _UpdatedMembersList_NewAllNamesEntry_DoNotUse_default_instance_;
}  // namespace net
}  // namespace awd
PROTOBUF_NAMESPACE_OPEN
template<> ::awd::net::BeginPlayStateRequest* Arena::CreateMaybeMessage<::awd::net::BeginPlayStateRequest>(Arena*);
template<> ::awd::net::BeginPlayStateResponse* Arena::CreateMaybeMessage<::awd::net::BeginPlayStateResponse>(Arena*);
template<> ::awd::net::CreateLobbyRequest* Arena::CreateMaybeMessage<::awd::net::CreateLobbyRequest>(Arena*);
template<> ::awd::net::CreateLobbyResponse* Arena::CreateMaybeMessage<::awd::net::CreateLobbyResponse>(Arena*);
template<> ::awd::net::HandshakeRequest* Arena::CreateMaybeMessage<::awd::net::HandshakeRequest>(Arena*);
template<> ::awd::net::HandshakeResponse* Arena::CreateMaybeMessage<::awd::net::HandshakeResponse>(Arena*);
template<> ::awd::net::JoinLobbyRequest* Arena::CreateMaybeMessage<::awd::net::JoinLobbyRequest>(Arena*);
template<> ::awd::net::JoinLobbyResponse* Arena::CreateMaybeMessage<::awd::net::JoinLobbyResponse>(Arena*);
template<> ::awd::net::JoinLobbyResponse_OthersCharactersEntry_DoNotUse* Arena::CreateMaybeMessage<::awd::net::JoinLobbyResponse_OthersCharactersEntry_DoNotUse>(Arena*);
template<> ::awd::net::JoinLobbyResponse_OthersNamesEntry_DoNotUse* Arena::CreateMaybeMessage<::awd::net::JoinLobbyResponse_OthersNamesEntry_DoNotUse>(Arena*);
template<> ::awd::net::JoinWorldCommand* Arena::CreateMaybeMessage<::awd::net::JoinWorldCommand>(Arena*);
template<> ::awd::net::JoinWorldComplete* Arena::CreateMaybeMessage<::awd::net::JoinWorldComplete>(Arena*);
template<> ::awd::net::KickedFromLobby* Arena::CreateMaybeMessage<::awd::net::KickedFromLobby>(Arena*);
template<> ::awd::net::LeaveLobbyRequest* Arena::CreateMaybeMessage<::awd::net::LeaveLobbyRequest>(Arena*);
template<> ::awd::net::LeaveLobbyResponse* Arena::CreateMaybeMessage<::awd::net::LeaveLobbyResponse>(Arena*);
template<> ::awd::net::PacketWrapper* Arena::CreateMaybeMessage<::awd::net::PacketWrapper>(Arena*);
template<> ::awd::net::Ping* Arena::CreateMaybeMessage<::awd::net::Ping>(Arena*);
template<> ::awd::net::Pong* Arena::CreateMaybeMessage<::awd::net::Pong>(Arena*);
template<> ::awd::net::SpawnPlayer* Arena::CreateMaybeMessage<::awd::net::SpawnPlayer>(Arena*);
template<> ::awd::net::UpdateDimensionCommand* Arena::CreateMaybeMessage<::awd::net::UpdateDimensionCommand>(Arena*);
template<> ::awd::net::UpdateDimensionComplete* Arena::CreateMaybeMessage<::awd::net::UpdateDimensionComplete>(Arena*);
template<> ::awd::net::UpdateEntityPosition* Arena::CreateMaybeMessage<::awd::net::UpdateEntityPosition>(Arena*);
template<> ::awd::net::UpdatePlayerInputs* Arena::CreateMaybeMessage<::awd::net::UpdatePlayerInputs>(Arena*);
template<> ::awd::net::UpdatedMembersList* Arena::CreateMaybeMessage<::awd::net::UpdatedMembersList>(Arena*);
template<> ::awd::net::UpdatedMembersList_NewAllCharactersEntry_DoNotUse* Arena::CreateMaybeMessage<::awd::net::UpdatedMembersList_NewAllCharactersEntry_DoNotUse>(Arena*);
template<> ::awd::net::UpdatedMembersList_NewAllNamesEntry_DoNotUse* Arena::CreateMaybeMessage<::awd::net::UpdatedMembersList_NewAllNamesEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace awd {
namespace net {

// ===================================================================

class Ping PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:awd.net.Ping) */ {
 public:
  inline Ping() : Ping(nullptr) {}
  virtual ~Ping();
  explicit constexpr Ping(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ping(const Ping& from);
  Ping(Ping&& from) noexcept
    : Ping() {
    *this = ::std::move(from);
  }

  inline Ping& operator=(const Ping& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ping& operator=(Ping&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ping& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ping* internal_default_instance() {
    return reinterpret_cast<const Ping*>(
               &_Ping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Ping& a, Ping& b) {
    a.Swap(&b);
  }
  inline void Swap(Ping* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ping* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ping* New() const final {
    return CreateMaybeMessage<Ping>(nullptr);
  }

  Ping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ping>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ping& from);
  void MergeFrom(const Ping& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ping* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "awd.net.Ping";
  }
  protected:
  explicit Ping(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_packets_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestIdFieldNumber = 1,
    kRttFieldNumber = 2,
  };
  // uint32 test_id = 1;
  void clear_test_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 test_id() const;
  void set_test_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_test_id() const;
  void _internal_set_test_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 rtt = 2;
  void clear_rtt();
  ::PROTOBUF_NAMESPACE_ID::uint32 rtt() const;
  void set_rtt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rtt() const;
  void _internal_set_rtt(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:awd.net.Ping)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 test_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rtt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packets_2eproto;
};
// -------------------------------------------------------------------

class Pong PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:awd.net.Pong) */ {
 public:
  inline Pong() : Pong(nullptr) {}
  virtual ~Pong();
  explicit constexpr Pong(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pong(const Pong& from);
  Pong(Pong&& from) noexcept
    : Pong() {
    *this = ::std::move(from);
  }

  inline Pong& operator=(const Pong& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pong& operator=(Pong&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pong& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pong* internal_default_instance() {
    return reinterpret_cast<const Pong*>(
               &_Pong_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Pong& a, Pong& b) {
    a.Swap(&b);
  }
  inline void Swap(Pong* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pong* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pong* New() const final {
    return CreateMaybeMessage<Pong>(nullptr);
  }

  Pong* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pong>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pong& from);
  void MergeFrom(const Pong& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pong* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "awd.net.Pong";
  }
  protected:
  explicit Pong(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_packets_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestIdFieldNumber = 1,
  };
  // uint32 test_id = 1;
  void clear_test_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 test_id() const;
  void set_test_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_test_id() const;
  void _internal_set_test_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:awd.net.Pong)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 test_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packets_2eproto;
};
// -------------------------------------------------------------------

class HandshakeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:awd.net.HandshakeRequest) */ {
 public:
  inline HandshakeRequest() : HandshakeRequest(nullptr) {}
  virtual ~HandshakeRequest();
  explicit constexpr HandshakeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HandshakeRequest(const HandshakeRequest& from);
  HandshakeRequest(HandshakeRequest&& from) noexcept
    : HandshakeRequest() {
    *this = ::std::move(from);
  }

  inline HandshakeRequest& operator=(const HandshakeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HandshakeRequest& operator=(HandshakeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HandshakeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HandshakeRequest* internal_default_instance() {
    return reinterpret_cast<const HandshakeRequest*>(
               &_HandshakeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HandshakeRequest& a, HandshakeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HandshakeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HandshakeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HandshakeRequest* New() const final {
    return CreateMaybeMessage<HandshakeRequest>(nullptr);
  }

  HandshakeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HandshakeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HandshakeRequest& from);
  void MergeFrom(const HandshakeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HandshakeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "awd.net.HandshakeRequest";
  }
  protected:
  explicit HandshakeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_packets_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtocolVersionFieldNumber = 1,
  };
  // uint32 protocol_version = 1;
  void clear_protocol_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 protocol_version() const;
  void set_protocol_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_protocol_version() const;
  void _internal_set_protocol_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:awd.net.HandshakeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 protocol_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packets_2eproto;
};
// -------------------------------------------------------------------

class HandshakeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:awd.net.HandshakeResponse) */ {
 public:
  inline HandshakeResponse() : HandshakeResponse(nullptr) {}
  virtual ~HandshakeResponse();
  explicit constexpr HandshakeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HandshakeResponse(const HandshakeResponse& from);
  HandshakeResponse(HandshakeResponse&& from) noexcept
    : HandshakeResponse() {
    *this = ::std::move(from);
  }

  inline HandshakeResponse& operator=(const HandshakeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HandshakeResponse& operator=(HandshakeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HandshakeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const HandshakeResponse* internal_default_instance() {
    return reinterpret_cast<const HandshakeResponse*>(
               &_HandshakeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(HandshakeResponse& a, HandshakeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HandshakeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HandshakeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HandshakeResponse* New() const final {
    return CreateMaybeMessage<HandshakeResponse>(nullptr);
  }

  HandshakeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HandshakeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HandshakeResponse& from);
  void MergeFrom(const HandshakeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HandshakeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "awd.net.HandshakeResponse";
  }
  protected:
  explicit HandshakeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_packets_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtocolVersionFieldNumber = 1,
  };
  // sint32 protocol_version = 1;
  void clear_protocol_version();
  ::PROTOBUF_NAMESPACE_ID::int32 protocol_version() const;
  void set_protocol_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_protocol_version() const;
  void _internal_set_protocol_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:awd.net.HandshakeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 protocol_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packets_2eproto;
};
// -------------------------------------------------------------------

class CreateLobbyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:awd.net.CreateLobbyRequest) */ {
 public:
  inline CreateLobbyRequest() : CreateLobbyRequest(nullptr) {}
  virtual ~CreateLobbyRequest();
  explicit constexpr CreateLobbyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateLobbyRequest(const CreateLobbyRequest& from);
  CreateLobbyRequest(CreateLobbyRequest&& from) noexcept
    : CreateLobbyRequest() {
    *this = ::std::move(from);
  }

  inline CreateLobbyRequest& operator=(const CreateLobbyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateLobbyRequest& operator=(CreateLobbyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateLobbyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateLobbyRequest* internal_default_instance() {
    return reinterpret_cast<const CreateLobbyRequest*>(
               &_CreateLobbyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CreateLobbyRequest& a, CreateLobbyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateLobbyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateLobbyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateLobbyRequest* New() const final {
    return CreateMaybeMessage<CreateLobbyRequest>(nullptr);
  }

  CreateLobbyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateLobbyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateLobbyRequest& from);
  void MergeFrom(const CreateLobbyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateLobbyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "awd.net.CreateLobbyRequest";
  }
  protected:
  explicit CreateLobbyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_packets_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerNameFieldNumber = 1,
  };
  // string player_name = 1;
  void clear_player_name();
  const std::string& player_name() const;
  void set_player_name(const std::string& value);
  void set_player_name(std::string&& value);
  void set_player_name(const char* value);
  void set_player_name(const char* value, size_t size);
  std::string* mutable_player_name();
  std::string* release_player_name();
  void set_allocated_player_name(std::string* player_name);
  private:
  const std::string& _internal_player_name() const;
  void _internal_set_player_name(const std::string& value);
  std::string* _internal_mutable_player_name();
  public:

  // @@protoc_insertion_point(class_scope:awd.net.CreateLobbyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packets_2eproto;
};
// -------------------------------------------------------------------

class CreateLobbyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:awd.net.CreateLobbyResponse) */ {
 public:
  inline CreateLobbyResponse() : CreateLobbyResponse(nullptr) {}
  virtual ~CreateLobbyResponse();
  explicit constexpr CreateLobbyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateLobbyResponse(const CreateLobbyResponse& from);
  CreateLobbyResponse(CreateLobbyResponse&& from) noexcept
    : CreateLobbyResponse() {
    *this = ::std::move(from);
  }

  inline CreateLobbyResponse& operator=(const CreateLobbyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateLobbyResponse& operator=(CreateLobbyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateLobbyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateLobbyResponse* internal_default_instance() {
    return reinterpret_cast<const CreateLobbyResponse*>(
               &_CreateLobbyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CreateLobbyResponse& a, CreateLobbyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateLobbyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateLobbyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateLobbyResponse* New() const final {
    return CreateMaybeMessage<CreateLobbyResponse>(nullptr);
  }

  CreateLobbyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateLobbyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateLobbyResponse& from);
  void MergeFrom(const CreateLobbyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateLobbyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "awd.net.CreateLobbyResponse";
  }
  protected:
  explicit CreateLobbyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_packets_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLobbyIdFieldNumber = 1,
    kPlayerIdFieldNumber = 2,
    kCharacterFieldNumber = 3,
  };
  // sint32 lobby_id = 1;
  void clear_lobby_id();
  ::PROTOBUF_NAMESPACE_ID::int32 lobby_id() const;
  void set_lobby_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lobby_id() const;
  void _internal_set_lobby_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 player_id = 2;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 character = 3;
  void clear_character();
  ::PROTOBUF_NAMESPACE_ID::uint32 character() const;
  void set_character(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_character() const;
  void _internal_set_character(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:awd.net.CreateLobbyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 lobby_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 player_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 character_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packets_2eproto;
};
// -------------------------------------------------------------------

class JoinLobbyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:awd.net.JoinLobbyRequest) */ {
 public:
  inline JoinLobbyRequest() : JoinLobbyRequest(nullptr) {}
  virtual ~JoinLobbyRequest();
  explicit constexpr JoinLobbyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JoinLobbyRequest(const JoinLobbyRequest& from);
  JoinLobbyRequest(JoinLobbyRequest&& from) noexcept
    : JoinLobbyRequest() {
    *this = ::std::move(from);
  }

  inline JoinLobbyRequest& operator=(const JoinLobbyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinLobbyRequest& operator=(JoinLobbyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JoinLobbyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinLobbyRequest* internal_default_instance() {
    return reinterpret_cast<const JoinLobbyRequest*>(
               &_JoinLobbyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(JoinLobbyRequest& a, JoinLobbyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinLobbyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinLobbyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JoinLobbyRequest* New() const final {
    return CreateMaybeMessage<JoinLobbyRequest>(nullptr);
  }

  JoinLobbyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JoinLobbyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JoinLobbyRequest& from);
  void MergeFrom(const JoinLobbyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinLobbyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "awd.net.JoinLobbyRequest";
  }
  protected:
  explicit JoinLobbyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_packets_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerNameFieldNumber = 2,
    kLobbyIdFieldNumber = 1,
  };
  // string player_name = 2;
  void clear_player_name();
  const std::string& player_name() const;
  void set_player_name(const std::string& value);
  void set_player_name(std::string&& value);
  void set_player_name(const char* value);
  void set_player_name(const char* value, size_t size);
  std::string* mutable_player_name();
  std::string* release_player_name();
  void set_allocated_player_name(std::string* player_name);
  private:
  const std::string& _internal_player_name() const;
  void _internal_set_player_name(const std::string& value);
  std::string* _internal_mutable_player_name();
  public:

  // uint32 lobby_id = 1;
  void clear_lobby_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 lobby_id() const;
  void set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lobby_id() const;
  void _internal_set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:awd.net.JoinLobbyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lobby_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packets_2eproto;
};
// -------------------------------------------------------------------

class JoinLobbyResponse_OthersNamesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<JoinLobbyResponse_OthersNamesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<JoinLobbyResponse_OthersNamesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  JoinLobbyResponse_OthersNamesEntry_DoNotUse();
  explicit constexpr JoinLobbyResponse_OthersNamesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit JoinLobbyResponse_OthersNamesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const JoinLobbyResponse_OthersNamesEntry_DoNotUse& other);
  static const JoinLobbyResponse_OthersNamesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const JoinLobbyResponse_OthersNamesEntry_DoNotUse*>(&_JoinLobbyResponse_OthersNamesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "awd.net.JoinLobbyResponse.OthersNamesEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_packets_2eproto);
    return ::descriptor_table_packets_2eproto.file_level_metadata[7];
  }

  public:
};

// -------------------------------------------------------------------

class JoinLobbyResponse_OthersCharactersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<JoinLobbyResponse_OthersCharactersEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<JoinLobbyResponse_OthersCharactersEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  JoinLobbyResponse_OthersCharactersEntry_DoNotUse();
  explicit constexpr JoinLobbyResponse_OthersCharactersEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit JoinLobbyResponse_OthersCharactersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const JoinLobbyResponse_OthersCharactersEntry_DoNotUse& other);
  static const JoinLobbyResponse_OthersCharactersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const JoinLobbyResponse_OthersCharactersEntry_DoNotUse*>(&_JoinLobbyResponse_OthersCharactersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_packets_2eproto);
    return ::descriptor_table_packets_2eproto.file_level_metadata[8];
  }

  public:
};

// -------------------------------------------------------------------

class JoinLobbyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:awd.net.JoinLobbyResponse) */ {
 public:
  inline JoinLobbyResponse() : JoinLobbyResponse(nullptr) {}
  virtual ~JoinLobbyResponse();
  explicit constexpr JoinLobbyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JoinLobbyResponse(const JoinLobbyResponse& from);
  JoinLobbyResponse(JoinLobbyResponse&& from) noexcept
    : JoinLobbyResponse() {
    *this = ::std::move(from);
  }

  inline JoinLobbyResponse& operator=(const JoinLobbyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinLobbyResponse& operator=(JoinLobbyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JoinLobbyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinLobbyResponse* internal_default_instance() {
    return reinterpret_cast<const JoinLobbyResponse*>(
               &_JoinLobbyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(JoinLobbyResponse& a, JoinLobbyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinLobbyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinLobbyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JoinLobbyResponse* New() const final {
    return CreateMaybeMessage<JoinLobbyResponse>(nullptr);
  }

  JoinLobbyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JoinLobbyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JoinLobbyResponse& from);
  void MergeFrom(const JoinLobbyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinLobbyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "awd.net.JoinLobbyResponse";
  }
  protected:
  explicit JoinLobbyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_packets_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kOthersNamesFieldNumber = 4,
    kOthersCharactersFieldNumber = 5,
    kPlayerIdFieldNumber = 1,
    kCharacterFieldNumber = 2,
    kHostIdFieldNumber = 3,
  };
  // map<uint32, string> others_names = 4;
  int others_names_size() const;
  private:
  int _internal_others_names_size() const;
  public:
  void clear_others_names();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >&
      _internal_others_names() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >*
      _internal_mutable_others_names();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >&
      others_names() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >*
      mutable_others_names();

  // map<uint32, uint32> others_characters = 5;
  int others_characters_size() const;
  private:
  int _internal_others_characters_size() const;
  public:
  void clear_others_characters();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_others_characters() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_others_characters();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >&
      others_characters() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_others_characters();

  // sint32 player_id = 1;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::int32 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 character = 2;
  void clear_character();
  ::PROTOBUF_NAMESPACE_ID::uint32 character() const;
  void set_character(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_character() const;
  void _internal_set_character(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 host_id = 3;
  void clear_host_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 host_id() const;
  void set_host_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_host_id() const;
  void _internal_set_host_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:awd.net.JoinLobbyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      JoinLobbyResponse_OthersNamesEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint32, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> others_names_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      JoinLobbyResponse_OthersCharactersEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> others_characters_;
  ::PROTOBUF_NAMESPACE_ID::int32 player_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 character_;
  ::PROTOBUF_NAMESPACE_ID::uint32 host_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packets_2eproto;
};
// -------------------------------------------------------------------

class LeaveLobbyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:awd.net.LeaveLobbyRequest) */ {
 public:
  inline LeaveLobbyRequest() : LeaveLobbyRequest(nullptr) {}
  virtual ~LeaveLobbyRequest();
  explicit constexpr LeaveLobbyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LeaveLobbyRequest(const LeaveLobbyRequest& from);
  LeaveLobbyRequest(LeaveLobbyRequest&& from) noexcept
    : LeaveLobbyRequest() {
    *this = ::std::move(from);
  }

  inline LeaveLobbyRequest& operator=(const LeaveLobbyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaveLobbyRequest& operator=(LeaveLobbyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LeaveLobbyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LeaveLobbyRequest* internal_default_instance() {
    return reinterpret_cast<const LeaveLobbyRequest*>(
               &_LeaveLobbyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(LeaveLobbyRequest& a, LeaveLobbyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaveLobbyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LeaveLobbyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LeaveLobbyRequest* New() const final {
    return CreateMaybeMessage<LeaveLobbyRequest>(nullptr);
  }

  LeaveLobbyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LeaveLobbyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LeaveLobbyRequest& from);
  void MergeFrom(const LeaveLobbyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaveLobbyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "awd.net.LeaveLobbyRequest";
  }
  protected:
  explicit LeaveLobbyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_packets_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:awd.net.LeaveLobbyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packets_2eproto;
};
// -------------------------------------------------------------------

class LeaveLobbyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:awd.net.LeaveLobbyResponse) */ {
 public:
  inline LeaveLobbyResponse() : LeaveLobbyResponse(nullptr) {}
  virtual ~LeaveLobbyResponse();
  explicit constexpr LeaveLobbyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LeaveLobbyResponse(const LeaveLobbyResponse& from);
  LeaveLobbyResponse(LeaveLobbyResponse&& from) noexcept
    : LeaveLobbyResponse() {
    *this = ::std::move(from);
  }

  inline LeaveLobbyResponse& operator=(const LeaveLobbyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaveLobbyResponse& operator=(LeaveLobbyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LeaveLobbyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LeaveLobbyResponse* internal_default_instance() {
    return reinterpret_cast<const LeaveLobbyResponse*>(
               &_LeaveLobbyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(LeaveLobbyResponse& a, LeaveLobbyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaveLobbyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LeaveLobbyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LeaveLobbyResponse* New() const final {
    return CreateMaybeMessage<LeaveLobbyResponse>(nullptr);
  }

  LeaveLobbyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LeaveLobbyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LeaveLobbyResponse& from);
  void MergeFrom(const LeaveLobbyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaveLobbyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "awd.net.LeaveLobbyResponse";
  }
  protected:
  explicit LeaveLobbyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_packets_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusCodeFieldNumber = 1,
  };
  // sint32 status_code = 1;
  void clear_status_code();
  ::PROTOBUF_NAMESPACE_ID::int32 status_code() const;
  void set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status_code() const;
  void _internal_set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:awd.net.LeaveLobbyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packets_2eproto;
};
// -------------------------------------------------------------------

class KickedFromLobby PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:awd.net.KickedFromLobby) */ {
 public:
  inline KickedFromLobby() : KickedFromLobby(nullptr) {}
  virtual ~KickedFromLobby();
  explicit constexpr KickedFromLobby(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KickedFromLobby(const KickedFromLobby& from);
  KickedFromLobby(KickedFromLobby&& from) noexcept
    : KickedFromLobby() {
    *this = ::std::move(from);
  }

  inline KickedFromLobby& operator=(const KickedFromLobby& from) {
    CopyFrom(from);
    return *this;
  }
  inline KickedFromLobby& operator=(KickedFromLobby&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KickedFromLobby& default_instance() {
    return *internal_default_instance();
  }
  static inline const KickedFromLobby* internal_default_instance() {
    return reinterpret_cast<const KickedFromLobby*>(
               &_KickedFromLobby_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(KickedFromLobby& a, KickedFromLobby& b) {
    a.Swap(&b);
  }
  inline void Swap(KickedFromLobby* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KickedFromLobby* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KickedFromLobby* New() const final {
    return CreateMaybeMessage<KickedFromLobby>(nullptr);
  }

  KickedFromLobby* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KickedFromLobby>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KickedFromLobby& from);
  void MergeFrom(const KickedFromLobby& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KickedFromLobby* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "awd.net.KickedFromLobby";
  }
  protected:
  explicit KickedFromLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_packets_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 1,
  };
  // uint32 reason = 1;
  void clear_reason();
  ::PROTOBUF_NAMESPACE_ID::uint32 reason() const;
  void set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_reason() const;
  void _internal_set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:awd.net.KickedFromLobby)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packets_2eproto;
};
// -------------------------------------------------------------------

class UpdatedMembersList_NewAllNamesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UpdatedMembersList_NewAllNamesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UpdatedMembersList_NewAllNamesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  UpdatedMembersList_NewAllNamesEntry_DoNotUse();
  explicit constexpr UpdatedMembersList_NewAllNamesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit UpdatedMembersList_NewAllNamesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const UpdatedMembersList_NewAllNamesEntry_DoNotUse& other);
  static const UpdatedMembersList_NewAllNamesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const UpdatedMembersList_NewAllNamesEntry_DoNotUse*>(&_UpdatedMembersList_NewAllNamesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "awd.net.UpdatedMembersList.NewAllNamesEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_packets_2eproto);
    return ::descriptor_table_packets_2eproto.file_level_metadata[13];
  }

  public:
};

// -------------------------------------------------------------------

class UpdatedMembersList_NewAllCharactersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UpdatedMembersList_NewAllCharactersEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UpdatedMembersList_NewAllCharactersEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  UpdatedMembersList_NewAllCharactersEntry_DoNotUse();
  explicit constexpr UpdatedMembersList_NewAllCharactersEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit UpdatedMembersList_NewAllCharactersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const UpdatedMembersList_NewAllCharactersEntry_DoNotUse& other);
  static const UpdatedMembersList_NewAllCharactersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const UpdatedMembersList_NewAllCharactersEntry_DoNotUse*>(&_UpdatedMembersList_NewAllCharactersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_packets_2eproto);
    return ::descriptor_table_packets_2eproto.file_level_metadata[14];
  }

  public:
};

// -------------------------------------------------------------------

class UpdatedMembersList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:awd.net.UpdatedMembersList) */ {
 public:
  inline UpdatedMembersList() : UpdatedMembersList(nullptr) {}
  virtual ~UpdatedMembersList();
  explicit constexpr UpdatedMembersList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdatedMembersList(const UpdatedMembersList& from);
  UpdatedMembersList(UpdatedMembersList&& from) noexcept
    : UpdatedMembersList() {
    *this = ::std::move(from);
  }

  inline UpdatedMembersList& operator=(const UpdatedMembersList& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdatedMembersList& operator=(UpdatedMembersList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdatedMembersList& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdatedMembersList* internal_default_instance() {
    return reinterpret_cast<const UpdatedMembersList*>(
               &_UpdatedMembersList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(UpdatedMembersList& a, UpdatedMembersList& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdatedMembersList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdatedMembersList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdatedMembersList* New() const final {
    return CreateMaybeMessage<UpdatedMembersList>(nullptr);
  }

  UpdatedMembersList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdatedMembersList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdatedMembersList& from);
  void MergeFrom(const UpdatedMembersList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdatedMembersList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "awd.net.UpdatedMembersList";
  }
  protected:
  explicit UpdatedMembersList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_packets_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kNewAllNamesFieldNumber = 1,
    kNewAllCharactersFieldNumber = 2,
  };
  // map<uint32, string> new_all_names = 1;
  int new_all_names_size() const;
  private:
  int _internal_new_all_names_size() const;
  public:
  void clear_new_all_names();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >&
      _internal_new_all_names() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >*
      _internal_mutable_new_all_names();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >&
      new_all_names() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >*
      mutable_new_all_names();

  // map<uint32, uint32> new_all_characters = 2;
  int new_all_characters_size() const;
  private:
  int _internal_new_all_characters_size() const;
  public:
  void clear_new_all_characters();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_new_all_characters() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_new_all_characters();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >&
      new_all_characters() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_new_all_characters();

  // @@protoc_insertion_point(class_scope:awd.net.UpdatedMembersList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      UpdatedMembersList_NewAllNamesEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint32, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> new_all_names_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      UpdatedMembersList_NewAllCharactersEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> new_all_characters_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packets_2eproto;
};
// -------------------------------------------------------------------

class BeginPlayStateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:awd.net.BeginPlayStateRequest) */ {
 public:
  inline BeginPlayStateRequest() : BeginPlayStateRequest(nullptr) {}
  virtual ~BeginPlayStateRequest();
  explicit constexpr BeginPlayStateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BeginPlayStateRequest(const BeginPlayStateRequest& from);
  BeginPlayStateRequest(BeginPlayStateRequest&& from) noexcept
    : BeginPlayStateRequest() {
    *this = ::std::move(from);
  }

  inline BeginPlayStateRequest& operator=(const BeginPlayStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BeginPlayStateRequest& operator=(BeginPlayStateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BeginPlayStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BeginPlayStateRequest* internal_default_instance() {
    return reinterpret_cast<const BeginPlayStateRequest*>(
               &_BeginPlayStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(BeginPlayStateRequest& a, BeginPlayStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BeginPlayStateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BeginPlayStateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BeginPlayStateRequest* New() const final {
    return CreateMaybeMessage<BeginPlayStateRequest>(nullptr);
  }

  BeginPlayStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BeginPlayStateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BeginPlayStateRequest& from);
  void MergeFrom(const BeginPlayStateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeginPlayStateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "awd.net.BeginPlayStateRequest";
  }
  protected:
  explicit BeginPlayStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_packets_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSaveIdFieldNumber = 1,
  };
  // string save_id = 1;
  void clear_save_id();
  const std::string& save_id() const;
  void set_save_id(const std::string& value);
  void set_save_id(std::string&& value);
  void set_save_id(const char* value);
  void set_save_id(const char* value, size_t size);
  std::string* mutable_save_id();
  std::string* release_save_id();
  void set_allocated_save_id(std::string* save_id);
  private:
  const std::string& _internal_save_id() const;
  void _internal_set_save_id(const std::string& value);
  std::string* _internal_mutable_save_id();
  public:

  // @@protoc_insertion_point(class_scope:awd.net.BeginPlayStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr save_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packets_2eproto;
};
// -------------------------------------------------------------------

class BeginPlayStateResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:awd.net.BeginPlayStateResponse) */ {
 public:
  inline BeginPlayStateResponse() : BeginPlayStateResponse(nullptr) {}
  virtual ~BeginPlayStateResponse();
  explicit constexpr BeginPlayStateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BeginPlayStateResponse(const BeginPlayStateResponse& from);
  BeginPlayStateResponse(BeginPlayStateResponse&& from) noexcept
    : BeginPlayStateResponse() {
    *this = ::std::move(from);
  }

  inline BeginPlayStateResponse& operator=(const BeginPlayStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BeginPlayStateResponse& operator=(BeginPlayStateResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BeginPlayStateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BeginPlayStateResponse* internal_default_instance() {
    return reinterpret_cast<const BeginPlayStateResponse*>(
               &_BeginPlayStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(BeginPlayStateResponse& a, BeginPlayStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BeginPlayStateResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BeginPlayStateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BeginPlayStateResponse* New() const final {
    return CreateMaybeMessage<BeginPlayStateResponse>(nullptr);
  }

  BeginPlayStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BeginPlayStateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BeginPlayStateResponse& from);
  void MergeFrom(const BeginPlayStateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BeginPlayStateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "awd.net.BeginPlayStateResponse";
  }
  protected:
  explicit BeginPlayStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_packets_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusCodeFieldNumber = 1,
  };
  // sint32 status_code = 1;
  void clear_status_code();
  ::PROTOBUF_NAMESPACE_ID::int32 status_code() const;
  void set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status_code() const;
  void _internal_set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:awd.net.BeginPlayStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packets_2eproto;
};
// -------------------------------------------------------------------

class UpdateDimensionCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:awd.net.UpdateDimensionCommand) */ {
 public:
  inline UpdateDimensionCommand() : UpdateDimensionCommand(nullptr) {}
  virtual ~UpdateDimensionCommand();
  explicit constexpr UpdateDimensionCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateDimensionCommand(const UpdateDimensionCommand& from);
  UpdateDimensionCommand(UpdateDimensionCommand&& from) noexcept
    : UpdateDimensionCommand() {
    *this = ::std::move(from);
  }

  inline UpdateDimensionCommand& operator=(const UpdateDimensionCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateDimensionCommand& operator=(UpdateDimensionCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateDimensionCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateDimensionCommand* internal_default_instance() {
    return reinterpret_cast<const UpdateDimensionCommand*>(
               &_UpdateDimensionCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(UpdateDimensionCommand& a, UpdateDimensionCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateDimensionCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateDimensionCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateDimensionCommand* New() const final {
    return CreateMaybeMessage<UpdateDimensionCommand>(nullptr);
  }

  UpdateDimensionCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateDimensionCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateDimensionCommand& from);
  void MergeFrom(const UpdateDimensionCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateDimensionCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "awd.net.UpdateDimensionCommand";
  }
  protected:
  explicit UpdateDimensionCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_packets_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimensionFieldNumber = 1,
  };
  // uint32 dimension = 1;
  void clear_dimension();
  ::PROTOBUF_NAMESPACE_ID::uint32 dimension() const;
  void set_dimension(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dimension() const;
  void _internal_set_dimension(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:awd.net.UpdateDimensionCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dimension_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packets_2eproto;
};
// -------------------------------------------------------------------

class UpdateDimensionComplete PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:awd.net.UpdateDimensionComplete) */ {
 public:
  inline UpdateDimensionComplete() : UpdateDimensionComplete(nullptr) {}
  virtual ~UpdateDimensionComplete();
  explicit constexpr UpdateDimensionComplete(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateDimensionComplete(const UpdateDimensionComplete& from);
  UpdateDimensionComplete(UpdateDimensionComplete&& from) noexcept
    : UpdateDimensionComplete() {
    *this = ::std::move(from);
  }

  inline UpdateDimensionComplete& operator=(const UpdateDimensionComplete& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateDimensionComplete& operator=(UpdateDimensionComplete&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateDimensionComplete& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateDimensionComplete* internal_default_instance() {
    return reinterpret_cast<const UpdateDimensionComplete*>(
               &_UpdateDimensionComplete_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(UpdateDimensionComplete& a, UpdateDimensionComplete& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateDimensionComplete* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateDimensionComplete* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateDimensionComplete* New() const final {
    return CreateMaybeMessage<UpdateDimensionComplete>(nullptr);
  }

  UpdateDimensionComplete* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateDimensionComplete>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateDimensionComplete& from);
  void MergeFrom(const UpdateDimensionComplete& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateDimensionComplete* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "awd.net.UpdateDimensionComplete";
  }
  protected:
  explicit UpdateDimensionComplete(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_packets_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:awd.net.UpdateDimensionComplete)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packets_2eproto;
};
// -------------------------------------------------------------------

class JoinWorldCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:awd.net.JoinWorldCommand) */ {
 public:
  inline JoinWorldCommand() : JoinWorldCommand(nullptr) {}
  virtual ~JoinWorldCommand();
  explicit constexpr JoinWorldCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JoinWorldCommand(const JoinWorldCommand& from);
  JoinWorldCommand(JoinWorldCommand&& from) noexcept
    : JoinWorldCommand() {
    *this = ::std::move(from);
  }

  inline JoinWorldCommand& operator=(const JoinWorldCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinWorldCommand& operator=(JoinWorldCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JoinWorldCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinWorldCommand* internal_default_instance() {
    return reinterpret_cast<const JoinWorldCommand*>(
               &_JoinWorldCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(JoinWorldCommand& a, JoinWorldCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinWorldCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinWorldCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JoinWorldCommand* New() const final {
    return CreateMaybeMessage<JoinWorldCommand>(nullptr);
  }

  JoinWorldCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JoinWorldCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JoinWorldCommand& from);
  void MergeFrom(const JoinWorldCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinWorldCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "awd.net.JoinWorldCommand";
  }
  protected:
  explicit JoinWorldCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_packets_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:awd.net.JoinWorldCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packets_2eproto;
};
// -------------------------------------------------------------------

class JoinWorldComplete PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:awd.net.JoinWorldComplete) */ {
 public:
  inline JoinWorldComplete() : JoinWorldComplete(nullptr) {}
  virtual ~JoinWorldComplete();
  explicit constexpr JoinWorldComplete(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JoinWorldComplete(const JoinWorldComplete& from);
  JoinWorldComplete(JoinWorldComplete&& from) noexcept
    : JoinWorldComplete() {
    *this = ::std::move(from);
  }

  inline JoinWorldComplete& operator=(const JoinWorldComplete& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinWorldComplete& operator=(JoinWorldComplete&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JoinWorldComplete& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinWorldComplete* internal_default_instance() {
    return reinterpret_cast<const JoinWorldComplete*>(
               &_JoinWorldComplete_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(JoinWorldComplete& a, JoinWorldComplete& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinWorldComplete* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinWorldComplete* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JoinWorldComplete* New() const final {
    return CreateMaybeMessage<JoinWorldComplete>(nullptr);
  }

  JoinWorldComplete* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JoinWorldComplete>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JoinWorldComplete& from);
  void MergeFrom(const JoinWorldComplete& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinWorldComplete* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "awd.net.JoinWorldComplete";
  }
  protected:
  explicit JoinWorldComplete(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_packets_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:awd.net.JoinWorldComplete)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packets_2eproto;
};
// -------------------------------------------------------------------

class SpawnPlayer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:awd.net.SpawnPlayer) */ {
 public:
  inline SpawnPlayer() : SpawnPlayer(nullptr) {}
  virtual ~SpawnPlayer();
  explicit constexpr SpawnPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpawnPlayer(const SpawnPlayer& from);
  SpawnPlayer(SpawnPlayer&& from) noexcept
    : SpawnPlayer() {
    *this = ::std::move(from);
  }

  inline SpawnPlayer& operator=(const SpawnPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpawnPlayer& operator=(SpawnPlayer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpawnPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpawnPlayer* internal_default_instance() {
    return reinterpret_cast<const SpawnPlayer*>(
               &_SpawnPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SpawnPlayer& a, SpawnPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(SpawnPlayer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpawnPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpawnPlayer* New() const final {
    return CreateMaybeMessage<SpawnPlayer>(nullptr);
  }

  SpawnPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpawnPlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpawnPlayer& from);
  void MergeFrom(const SpawnPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpawnPlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "awd.net.SpawnPlayer";
  }
  protected:
  explicit SpawnPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_packets_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kEntityIdFieldNumber = 2,
  };
  // uint32 player_id = 1;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 entity_id = 2;
  void clear_entity_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 entity_id() const;
  void set_entity_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_entity_id() const;
  void _internal_set_entity_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:awd.net.SpawnPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 player_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 entity_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packets_2eproto;
};
// -------------------------------------------------------------------

class UpdatePlayerInputs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:awd.net.UpdatePlayerInputs) */ {
 public:
  inline UpdatePlayerInputs() : UpdatePlayerInputs(nullptr) {}
  virtual ~UpdatePlayerInputs();
  explicit constexpr UpdatePlayerInputs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdatePlayerInputs(const UpdatePlayerInputs& from);
  UpdatePlayerInputs(UpdatePlayerInputs&& from) noexcept
    : UpdatePlayerInputs() {
    *this = ::std::move(from);
  }

  inline UpdatePlayerInputs& operator=(const UpdatePlayerInputs& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdatePlayerInputs& operator=(UpdatePlayerInputs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdatePlayerInputs& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdatePlayerInputs* internal_default_instance() {
    return reinterpret_cast<const UpdatePlayerInputs*>(
               &_UpdatePlayerInputs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(UpdatePlayerInputs& a, UpdatePlayerInputs& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdatePlayerInputs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdatePlayerInputs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdatePlayerInputs* New() const final {
    return CreateMaybeMessage<UpdatePlayerInputs>(nullptr);
  }

  UpdatePlayerInputs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdatePlayerInputs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdatePlayerInputs& from);
  void MergeFrom(const UpdatePlayerInputs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdatePlayerInputs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "awd.net.UpdatePlayerInputs";
  }
  protected:
  explicit UpdatePlayerInputs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_packets_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputsBitfieldFieldNumber = 1,
  };
  // uint64 inputs_bitfield = 1;
  void clear_inputs_bitfield();
  ::PROTOBUF_NAMESPACE_ID::uint64 inputs_bitfield() const;
  void set_inputs_bitfield(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_inputs_bitfield() const;
  void _internal_set_inputs_bitfield(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:awd.net.UpdatePlayerInputs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 inputs_bitfield_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packets_2eproto;
};
// -------------------------------------------------------------------

class UpdateEntityPosition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:awd.net.UpdateEntityPosition) */ {
 public:
  inline UpdateEntityPosition() : UpdateEntityPosition(nullptr) {}
  virtual ~UpdateEntityPosition();
  explicit constexpr UpdateEntityPosition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateEntityPosition(const UpdateEntityPosition& from);
  UpdateEntityPosition(UpdateEntityPosition&& from) noexcept
    : UpdateEntityPosition() {
    *this = ::std::move(from);
  }

  inline UpdateEntityPosition& operator=(const UpdateEntityPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateEntityPosition& operator=(UpdateEntityPosition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateEntityPosition& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateEntityPosition* internal_default_instance() {
    return reinterpret_cast<const UpdateEntityPosition*>(
               &_UpdateEntityPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(UpdateEntityPosition& a, UpdateEntityPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateEntityPosition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateEntityPosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateEntityPosition* New() const final {
    return CreateMaybeMessage<UpdateEntityPosition>(nullptr);
  }

  UpdateEntityPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateEntityPosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateEntityPosition& from);
  void MergeFrom(const UpdateEntityPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateEntityPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "awd.net.UpdateEntityPosition";
  }
  protected:
  explicit UpdateEntityPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_packets_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityIdFieldNumber = 1,
    kPosXFieldNumber = 2,
    kPosYFieldNumber = 3,
    kFaceAngleFieldNumber = 4,
  };
  // uint32 entity_id = 1;
  void clear_entity_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 entity_id() const;
  void set_entity_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_entity_id() const;
  void _internal_set_entity_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float pos_x = 2;
  void clear_pos_x();
  float pos_x() const;
  void set_pos_x(float value);
  private:
  float _internal_pos_x() const;
  void _internal_set_pos_x(float value);
  public:

  // float pos_y = 3;
  void clear_pos_y();
  float pos_y() const;
  void set_pos_y(float value);
  private:
  float _internal_pos_y() const;
  void _internal_set_pos_y(float value);
  public:

  // float face_angle = 4;
  void clear_face_angle();
  float face_angle() const;
  void set_face_angle(float value);
  private:
  float _internal_face_angle() const;
  void _internal_set_face_angle(float value);
  public:

  // @@protoc_insertion_point(class_scope:awd.net.UpdateEntityPosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 entity_id_;
  float pos_x_;
  float pos_y_;
  float face_angle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_packets_2eproto;
};
// -------------------------------------------------------------------

class PacketWrapper PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:awd.net.PacketWrapper) */ {
 public:
  inline PacketWrapper() : PacketWrapper(nullptr) {}
  virtual ~PacketWrapper();
  explicit constexpr PacketWrapper(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PacketWrapper(const PacketWrapper& from);
  PacketWrapper(PacketWrapper&& from) noexcept
    : PacketWrapper() {
    *this = ::std::move(from);
  }

  inline PacketWrapper& operator=(const PacketWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline PacketWrapper& operator=(PacketWrapper&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PacketWrapper& default_instance() {
    return *internal_default_instance();
  }
  enum PacketCase {
    kPing = 4,
    kPong = 5,
    kHandshakeRequest = 10,
    kHandshakeResponse = 11,
    kCreateLobbyRequest = 100,
    kCreateLobbyResponse = 101,
    kJoinLobbyRequest = 102,
    kJoinLobbyResponse = 103,
    kLeaveLobbyRequest = 104,
    kLeaveLobbyResponse = 105,
    kKickedFromLobby = 106,
    kUpdatedMembersList = 107,
    kBeginPlayStateRequest = 901,
    kBeginPlayStateResponse = 902,
    kUpdateDimensionCommand = 1000,
    kUpdateDimensionComplete = 1001,
    kJoinWorldCommand = 1002,
    kJoinWorldComplete = 1003,
    kSpawnPlayer = 2000,
    kUpdatePlayerInputs = 3000,
    kUpdateEntityPosition = 3001,
    PACKET_NOT_SET = 0,
  };

  static inline const PacketWrapper* internal_default_instance() {
    return reinterpret_cast<const PacketWrapper*>(
               &_PacketWrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(PacketWrapper& a, PacketWrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(PacketWrapper* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PacketWrapper* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PacketWrapper* New() const final {
    return CreateMaybeMessage<PacketWrapper>(nullptr);
  }

  PacketWrapper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PacketWrapper>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PacketWrapper& from);
  void MergeFrom(const PacketWrapper& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PacketWrapper* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "awd.net.PacketWrapper";
  }
  protected:
  explicit PacketWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_packets_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSequenceFieldNumber = 1,
    kAckFieldNumber = 2,
    kAckBitfieldFieldNumber = 3,
    kPingFieldNumber = 4,
    kPongFieldNumber = 5,
    kHandshakeRequestFieldNumber = 10,
    kHandshakeResponseFieldNumber = 11,
    kCreateLobbyRequestFieldNumber = 100,
    kCreateLobbyResponseFieldNumber = 101,
    kJoinLobbyRequestFieldNumber = 102,
    kJoinLobbyResponseFieldNumber = 103,
    kLeaveLobbyRequestFieldNumber = 104,
    kLeaveLobbyResponseFieldNumber = 105,
    kKickedFromLobbyFieldNumber = 106,
    kUpdatedMembersListFieldNumber = 107,
    kBeginPlayStateRequestFieldNumber = 901,
    kBeginPlayStateResponseFieldNumber = 902,
    kUpdateDimensionCommandFieldNumber = 1000,
    kUpdateDimensionCompleteFieldNumber = 1001,
    kJoinWorldCommandFieldNumber = 1002,
    kJoinWorldCompleteFieldNumber = 1003,
    kSpawnPlayerFieldNumber = 2000,
    kUpdatePlayerInputsFieldNumber = 3000,
    kUpdateEntityPositionFieldNumber = 3001,
  };
  // uint32 sequence = 1;
  void clear_sequence();
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence() const;
  void set_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sequence() const;
  void _internal_set_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 ack = 2;
  void clear_ack();
  ::PROTOBUF_NAMESPACE_ID::uint32 ack() const;
  void set_ack(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ack() const;
  void _internal_set_ack(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 ack_bitfield = 3;
  void clear_ack_bitfield();
  ::PROTOBUF_NAMESPACE_ID::uint64 ack_bitfield() const;
  void set_ack_bitfield(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ack_bitfield() const;
  void _internal_set_ack_bitfield(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .awd.net.Ping ping = 4;
  bool has_ping() const;
  private:
  bool _internal_has_ping() const;
  public:
  void clear_ping();
  const ::awd::net::Ping& ping() const;
  ::awd::net::Ping* release_ping();
  ::awd::net::Ping* mutable_ping();
  void set_allocated_ping(::awd::net::Ping* ping);
  private:
  const ::awd::net::Ping& _internal_ping() const;
  ::awd::net::Ping* _internal_mutable_ping();
  public:
  void unsafe_arena_set_allocated_ping(
      ::awd::net::Ping* ping);
  ::awd::net::Ping* unsafe_arena_release_ping();

  // .awd.net.Pong pong = 5;
  bool has_pong() const;
  private:
  bool _internal_has_pong() const;
  public:
  void clear_pong();
  const ::awd::net::Pong& pong() const;
  ::awd::net::Pong* release_pong();
  ::awd::net::Pong* mutable_pong();
  void set_allocated_pong(::awd::net::Pong* pong);
  private:
  const ::awd::net::Pong& _internal_pong() const;
  ::awd::net::Pong* _internal_mutable_pong();
  public:
  void unsafe_arena_set_allocated_pong(
      ::awd::net::Pong* pong);
  ::awd::net::Pong* unsafe_arena_release_pong();

  // .awd.net.HandshakeRequest handshake_request = 10;
  bool has_handshake_request() const;
  private:
  bool _internal_has_handshake_request() const;
  public:
  void clear_handshake_request();
  const ::awd::net::HandshakeRequest& handshake_request() const;
  ::awd::net::HandshakeRequest* release_handshake_request();
  ::awd::net::HandshakeRequest* mutable_handshake_request();
  void set_allocated_handshake_request(::awd::net::HandshakeRequest* handshake_request);
  private:
  const ::awd::net::HandshakeRequest& _internal_handshake_request() const;
  ::awd::net::HandshakeRequest* _internal_mutable_handshake_request();
  public:
  void unsafe_arena_set_allocated_handshake_request(
      ::awd::net::HandshakeRequest* handshake_request);
  ::awd::net::HandshakeRequest* unsafe_arena_release_handshake_request();

  // .awd.net.HandshakeResponse handshake_response = 11;
  bool has_handshake_response() const;
  private:
  bool _internal_has_handshake_response() const;
  public:
  void clear_handshake_response();
  const ::awd::net::HandshakeResponse& handshake_response() const;
  ::awd::net::HandshakeResponse* release_handshake_response();
  ::awd::net::HandshakeResponse* mutable_handshake_response();
  void set_allocated_handshake_response(::awd::net::HandshakeResponse* handshake_response);
  private:
  const ::awd::net::HandshakeResponse& _internal_handshake_response() const;
  ::awd::net::HandshakeResponse* _internal_mutable_handshake_response();
  public:
  void unsafe_arena_set_allocated_handshake_response(
      ::awd::net::HandshakeResponse* handshake_response);
  ::awd::net::HandshakeResponse* unsafe_arena_release_handshake_response();

  // .awd.net.CreateLobbyRequest create_lobby_request = 100;
  bool has_create_lobby_request() const;
  private:
  bool _internal_has_create_lobby_request() const;
  public:
  void clear_create_lobby_request();
  const ::awd::net::CreateLobbyRequest& create_lobby_request() const;
  ::awd::net::CreateLobbyRequest* release_create_lobby_request();
  ::awd::net::CreateLobbyRequest* mutable_create_lobby_request();
  void set_allocated_create_lobby_request(::awd::net::CreateLobbyRequest* create_lobby_request);
  private:
  const ::awd::net::CreateLobbyRequest& _internal_create_lobby_request() const;
  ::awd::net::CreateLobbyRequest* _internal_mutable_create_lobby_request();
  public:
  void unsafe_arena_set_allocated_create_lobby_request(
      ::awd::net::CreateLobbyRequest* create_lobby_request);
  ::awd::net::CreateLobbyRequest* unsafe_arena_release_create_lobby_request();

  // .awd.net.CreateLobbyResponse create_lobby_response = 101;
  bool has_create_lobby_response() const;
  private:
  bool _internal_has_create_lobby_response() const;
  public:
  void clear_create_lobby_response();
  const ::awd::net::CreateLobbyResponse& create_lobby_response() const;
  ::awd::net::CreateLobbyResponse* release_create_lobby_response();
  ::awd::net::CreateLobbyResponse* mutable_create_lobby_response();
  void set_allocated_create_lobby_response(::awd::net::CreateLobbyResponse* create_lobby_response);
  private:
  const ::awd::net::CreateLobbyResponse& _internal_create_lobby_response() const;
  ::awd::net::CreateLobbyResponse* _internal_mutable_create_lobby_response();
  public:
  void unsafe_arena_set_allocated_create_lobby_response(
      ::awd::net::CreateLobbyResponse* create_lobby_response);
  ::awd::net::CreateLobbyResponse* unsafe_arena_release_create_lobby_response();

  // .awd.net.JoinLobbyRequest join_lobby_request = 102;
  bool has_join_lobby_request() const;
  private:
  bool _internal_has_join_lobby_request() const;
  public:
  void clear_join_lobby_request();
  const ::awd::net::JoinLobbyRequest& join_lobby_request() const;
  ::awd::net::JoinLobbyRequest* release_join_lobby_request();
  ::awd::net::JoinLobbyRequest* mutable_join_lobby_request();
  void set_allocated_join_lobby_request(::awd::net::JoinLobbyRequest* join_lobby_request);
  private:
  const ::awd::net::JoinLobbyRequest& _internal_join_lobby_request() const;
  ::awd::net::JoinLobbyRequest* _internal_mutable_join_lobby_request();
  public:
  void unsafe_arena_set_allocated_join_lobby_request(
      ::awd::net::JoinLobbyRequest* join_lobby_request);
  ::awd::net::JoinLobbyRequest* unsafe_arena_release_join_lobby_request();

  // .awd.net.JoinLobbyResponse join_lobby_response = 103;
  bool has_join_lobby_response() const;
  private:
  bool _internal_has_join_lobby_response() const;
  public:
  void clear_join_lobby_response();
  const ::awd::net::JoinLobbyResponse& join_lobby_response() const;
  ::awd::net::JoinLobbyResponse* release_join_lobby_response();
  ::awd::net::JoinLobbyResponse* mutable_join_lobby_response();
  void set_allocated_join_lobby_response(::awd::net::JoinLobbyResponse* join_lobby_response);
  private:
  const ::awd::net::JoinLobbyResponse& _internal_join_lobby_response() const;
  ::awd::net::JoinLobbyResponse* _internal_mutable_join_lobby_response();
  public:
  void unsafe_arena_set_allocated_join_lobby_response(
      ::awd::net::JoinLobbyResponse* join_lobby_response);
  ::awd::net::JoinLobbyResponse* unsafe_arena_release_join_lobby_response();

  // .awd.net.LeaveLobbyRequest leave_lobby_request = 104;
  bool has_leave_lobby_request() const;
  private:
  bool _internal_has_leave_lobby_request() const;
  public:
  void clear_leave_lobby_request();
  const ::awd::net::LeaveLobbyRequest& leave_lobby_request() const;
  ::awd::net::LeaveLobbyRequest* release_leave_lobby_request();
  ::awd::net::LeaveLobbyRequest* mutable_leave_lobby_request();
  void set_allocated_leave_lobby_request(::awd::net::LeaveLobbyRequest* leave_lobby_request);
  private:
  const ::awd::net::LeaveLobbyRequest& _internal_leave_lobby_request() const;
  ::awd::net::LeaveLobbyRequest* _internal_mutable_leave_lobby_request();
  public:
  void unsafe_arena_set_allocated_leave_lobby_request(
      ::awd::net::LeaveLobbyRequest* leave_lobby_request);
  ::awd::net::LeaveLobbyRequest* unsafe_arena_release_leave_lobby_request();

  // .awd.net.LeaveLobbyResponse leave_lobby_response = 105;
  bool has_leave_lobby_response() const;
  private:
  bool _internal_has_leave_lobby_response() const;
  public:
  void clear_leave_lobby_response();
  const ::awd::net::LeaveLobbyResponse& leave_lobby_response() const;
  ::awd::net::LeaveLobbyResponse* release_leave_lobby_response();
  ::awd::net::LeaveLobbyResponse* mutable_leave_lobby_response();
  void set_allocated_leave_lobby_response(::awd::net::LeaveLobbyResponse* leave_lobby_response);
  private:
  const ::awd::net::LeaveLobbyResponse& _internal_leave_lobby_response() const;
  ::awd::net::LeaveLobbyResponse* _internal_mutable_leave_lobby_response();
  public:
  void unsafe_arena_set_allocated_leave_lobby_response(
      ::awd::net::LeaveLobbyResponse* leave_lobby_response);
  ::awd::net::LeaveLobbyResponse* unsafe_arena_release_leave_lobby_response();

  // .awd.net.KickedFromLobby kicked_from_lobby = 106;
  bool has_kicked_from_lobby() const;
  private:
  bool _internal_has_kicked_from_lobby() const;
  public:
  void clear_kicked_from_lobby();
  const ::awd::net::KickedFromLobby& kicked_from_lobby() const;
  ::awd::net::KickedFromLobby* release_kicked_from_lobby();
  ::awd::net::KickedFromLobby* mutable_kicked_from_lobby();
  void set_allocated_kicked_from_lobby(::awd::net::KickedFromLobby* kicked_from_lobby);
  private:
  const ::awd::net::KickedFromLobby& _internal_kicked_from_lobby() const;
  ::awd::net::KickedFromLobby* _internal_mutable_kicked_from_lobby();
  public:
  void unsafe_arena_set_allocated_kicked_from_lobby(
      ::awd::net::KickedFromLobby* kicked_from_lobby);
  ::awd::net::KickedFromLobby* unsafe_arena_release_kicked_from_lobby();

  // .awd.net.UpdatedMembersList updated_members_list = 107;
  bool has_updated_members_list() const;
  private:
  bool _internal_has_updated_members_list() const;
  public:
  void clear_updated_members_list();
  const ::awd::net::UpdatedMembersList& updated_members_list() const;
  ::awd::net::UpdatedMembersList* release_updated_members_list();
  ::awd::net::UpdatedMembersList* mutable_updated_members_list();
  void set_allocated_updated_members_list(::awd::net::UpdatedMembersList* updated_members_list);
  private:
  const ::awd::net::UpdatedMembersList& _internal_updated_members_list() const;
  ::awd::net::UpdatedMembersList* _internal_mutable_updated_members_list();
  public:
  void unsafe_arena_set_allocated_updated_members_list(
      ::awd::net::UpdatedMembersList* updated_members_list);
  ::awd::net::UpdatedMembersList* unsafe_arena_release_updated_members_list();

  // .awd.net.BeginPlayStateRequest begin_play_state_request = 901;
  bool has_begin_play_state_request() const;
  private:
  bool _internal_has_begin_play_state_request() const;
  public:
  void clear_begin_play_state_request();
  const ::awd::net::BeginPlayStateRequest& begin_play_state_request() const;
  ::awd::net::BeginPlayStateRequest* release_begin_play_state_request();
  ::awd::net::BeginPlayStateRequest* mutable_begin_play_state_request();
  void set_allocated_begin_play_state_request(::awd::net::BeginPlayStateRequest* begin_play_state_request);
  private:
  const ::awd::net::BeginPlayStateRequest& _internal_begin_play_state_request() const;
  ::awd::net::BeginPlayStateRequest* _internal_mutable_begin_play_state_request();
  public:
  void unsafe_arena_set_allocated_begin_play_state_request(
      ::awd::net::BeginPlayStateRequest* begin_play_state_request);
  ::awd::net::BeginPlayStateRequest* unsafe_arena_release_begin_play_state_request();

  // .awd.net.BeginPlayStateResponse begin_play_state_response = 902;
  bool has_begin_play_state_response() const;
  private:
  bool _internal_has_begin_play_state_response() const;
  public:
  void clear_begin_play_state_response();
  const ::awd::net::BeginPlayStateResponse& begin_play_state_response() const;
  ::awd::net::BeginPlayStateResponse* release_begin_play_state_response();
  ::awd::net::BeginPlayStateResponse* mutable_begin_play_state_response();
  void set_allocated_begin_play_state_response(::awd::net::BeginPlayStateResponse* begin_play_state_response);
  private:
  const ::awd::net::BeginPlayStateResponse& _internal_begin_play_state_response() const;
  ::awd::net::BeginPlayStateResponse* _internal_mutable_begin_play_state_response();
  public:
  void unsafe_arena_set_allocated_begin_play_state_response(
      ::awd::net::BeginPlayStateResponse* begin_play_state_response);
  ::awd::net::BeginPlayStateResponse* unsafe_arena_release_begin_play_state_response();

  // .awd.net.UpdateDimensionCommand update_dimension_command = 1000;
  bool has_update_dimension_command() const;
  private:
  bool _internal_has_update_dimension_command() const;
  public:
  void clear_update_dimension_command();
  const ::awd::net::UpdateDimensionCommand& update_dimension_command() const;
  ::awd::net::UpdateDimensionCommand* release_update_dimension_command();
  ::awd::net::UpdateDimensionCommand* mutable_update_dimension_command();
  void set_allocated_update_dimension_command(::awd::net::UpdateDimensionCommand* update_dimension_command);
  private:
  const ::awd::net::UpdateDimensionCommand& _internal_update_dimension_command() const;
  ::awd::net::UpdateDimensionCommand* _internal_mutable_update_dimension_command();
  public:
  void unsafe_arena_set_allocated_update_dimension_command(
      ::awd::net::UpdateDimensionCommand* update_dimension_command);
  ::awd::net::UpdateDimensionCommand* unsafe_arena_release_update_dimension_command();

  // .awd.net.UpdateDimensionComplete update_dimension_complete = 1001;
  bool has_update_dimension_complete() const;
  private:
  bool _internal_has_update_dimension_complete() const;
  public:
  void clear_update_dimension_complete();
  const ::awd::net::UpdateDimensionComplete& update_dimension_complete() const;
  ::awd::net::UpdateDimensionComplete* release_update_dimension_complete();
  ::awd::net::UpdateDimensionComplete* mutable_update_dimension_complete();
  void set_allocated_update_dimension_complete(::awd::net::UpdateDimensionComplete* update_dimension_complete);
  private:
  const ::awd::net::UpdateDimensionComplete& _internal_update_dimension_complete() const;
  ::awd::net::UpdateDimensionComplete* _internal_mutable_update_dimension_complete();
  public:
  void unsafe_arena_set_allocated_update_dimension_complete(
      ::awd::net::UpdateDimensionComplete* update_dimension_complete);
  ::awd::net::UpdateDimensionComplete* unsafe_arena_release_update_dimension_complete();

  // .awd.net.JoinWorldCommand join_world_command = 1002;
  bool has_join_world_command() const;
  private:
  bool _internal_has_join_world_command() const;
  public:
  void clear_join_world_command();
  const ::awd::net::JoinWorldCommand& join_world_command() const;
  ::awd::net::JoinWorldCommand* release_join_world_command();
  ::awd::net::JoinWorldCommand* mutable_join_world_command();
  void set_allocated_join_world_command(::awd::net::JoinWorldCommand* join_world_command);
  private:
  const ::awd::net::JoinWorldCommand& _internal_join_world_command() const;
  ::awd::net::JoinWorldCommand* _internal_mutable_join_world_command();
  public:
  void unsafe_arena_set_allocated_join_world_command(
      ::awd::net::JoinWorldCommand* join_world_command);
  ::awd::net::JoinWorldCommand* unsafe_arena_release_join_world_command();

  // .awd.net.JoinWorldComplete join_world_complete = 1003;
  bool has_join_world_complete() const;
  private:
  bool _internal_has_join_world_complete() const;
  public:
  void clear_join_world_complete();
  const ::awd::net::JoinWorldComplete& join_world_complete() const;
  ::awd::net::JoinWorldComplete* release_join_world_complete();
  ::awd::net::JoinWorldComplete* mutable_join_world_complete();
  void set_allocated_join_world_complete(::awd::net::JoinWorldComplete* join_world_complete);
  private:
  const ::awd::net::JoinWorldComplete& _internal_join_world_complete() const;
  ::awd::net::JoinWorldComplete* _internal_mutable_join_world_complete();
  public:
  void unsafe_arena_set_allocated_join_world_complete(
      ::awd::net::JoinWorldComplete* join_world_complete);
  ::awd::net::JoinWorldComplete* unsafe_arena_release_join_world_complete();

  // .awd.net.SpawnPlayer spawn_player = 2000;
  bool has_spawn_player() const;
  private:
  bool _internal_has_spawn_player() const;
  public:
  void clear_spawn_player();
  const ::awd::net::SpawnPlayer& spawn_player() const;
  ::awd::net::SpawnPlayer* release_spawn_player();
  ::awd::net::SpawnPlayer* mutable_spawn_player();
  void set_allocated_spawn_player(::awd::net::SpawnPlayer* spawn_player);
  private:
  const ::awd::net::SpawnPlayer& _internal_spawn_player() const;
  ::awd::net::SpawnPlayer* _internal_mutable_spawn_player();
  public:
  void unsafe_arena_set_allocated_spawn_player(
      ::awd::net::SpawnPlayer* spawn_player);
  ::awd::net::SpawnPlayer* unsafe_arena_release_spawn_player();

  // .awd.net.UpdatePlayerInputs update_player_inputs = 3000;
  bool has_update_player_inputs() const;
  private:
  bool _internal_has_update_player_inputs() const;
  public:
  void clear_update_player_inputs();
  const ::awd::net::UpdatePlayerInputs& update_player_inputs() const;
  ::awd::net::UpdatePlayerInputs* release_update_player_inputs();
  ::awd::net::UpdatePlayerInputs* mutable_update_player_inputs();
  void set_allocated_update_player_inputs(::awd::net::UpdatePlayerInputs* update_player_inputs);
  private:
  const ::awd::net::UpdatePlayerInputs& _internal_update_player_inputs() const;
  ::awd::net::UpdatePlayerInputs* _internal_mutable_update_player_inputs();
  public:
  void unsafe_arena_set_allocated_update_player_inputs(
      ::awd::net::UpdatePlayerInputs* update_player_inputs);
  ::awd::net::UpdatePlayerInputs* unsafe_arena_release_update_player_inputs();

  // .awd.net.UpdateEntityPosition update_entity_position = 3001;
  bool has_update_entity_position() const;
  private:
  bool _internal_has_update_entity_position() const;
  public:
  void clear_update_entity_position();
  const ::awd::net::UpdateEntityPosition& update_entity_position() const;
  ::awd::net::UpdateEntityPosition* release_update_entity_position();
  ::awd::net::UpdateEntityPosition* mutable_update_entity_position();
  void set_allocated_update_entity_position(::awd::net::UpdateEntityPosition* update_entity_position);
  private:
  const ::awd::net::UpdateEntityPosition& _internal_update_entity_position() const;
  ::awd::net::UpdateEntityPosition* _internal_mutable_update_entity_position();
  public:
  void unsafe_arena_set_allocated_update_entity_position(
      ::awd::net::UpdateEntityPosition* update_entity_position);
  ::awd::net::UpdateEntityPosition* unsafe_arena_release_update_entity_position();

  void clear_packet();
  PacketCase packet_case() const;
  // @@protoc_insertion_point(class_scope:awd.net.PacketWrapper)
 private:
  class _Internal;
  void set_has_ping();
  void set_has_pong();
  void set_has_handshake_request();
  void set_has_handshake_response();
  void set_has_create_lobby_request();
  void set_has_create_lobby_response();
  void set_has_join_lobby_request();
  void set_has_join_lobby_response();
  void set_has_leave_lobby_request();
  void set_has_leave_lobby_response();
  void set_has_kicked_from_lobby();
  void set_has_updated_members_list();
  void set_has_begin_play_state_request();
  void set_has_begin_play_state_response();
  void set_has_update_dimension_command();
  void set_has_update_dimension_complete();
  void set_has_join_world_command();
  void set_has_join_world_complete();
  void set_has_spawn_player();
  void set_has_update_player_inputs();
  void set_has_update_entity_position();

  inline bool has_packet() const;
  inline void clear_has_packet();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ack_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ack_bitfield_;
  union PacketUnion {
    constexpr PacketUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::awd::net::Ping* ping_;
    ::awd::net::Pong* pong_;
    ::awd::net::HandshakeRequest* handshake_request_;
    ::awd::net::HandshakeResponse* handshake_response_;
    ::awd::net::CreateLobbyRequest* create_lobby_request_;
    ::awd::net::CreateLobbyResponse* create_lobby_response_;
    ::awd::net::JoinLobbyRequest* join_lobby_request_;
    ::awd::net::JoinLobbyResponse* join_lobby_response_;
    ::awd::net::LeaveLobbyRequest* leave_lobby_request_;
    ::awd::net::LeaveLobbyResponse* leave_lobby_response_;
    ::awd::net::KickedFromLobby* kicked_from_lobby_;
    ::awd::net::UpdatedMembersList* updated_members_list_;
    ::awd::net::BeginPlayStateRequest* begin_play_state_request_;
    ::awd::net::BeginPlayStateResponse* begin_play_state_response_;
    ::awd::net::UpdateDimensionCommand* update_dimension_command_;
    ::awd::net::UpdateDimensionComplete* update_dimension_complete_;
    ::awd::net::JoinWorldCommand* join_world_command_;
    ::awd::net::JoinWorldComplete* join_world_complete_;
    ::awd::net::SpawnPlayer* spawn_player_;
    ::awd::net::UpdatePlayerInputs* update_player_inputs_;
    ::awd::net::UpdateEntityPosition* update_entity_position_;
  } packet_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_packets_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Ping

// uint32 test_id = 1;
inline void Ping::clear_test_id() {
  test_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ping::_internal_test_id() const {
  return test_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ping::test_id() const {
  // @@protoc_insertion_point(field_get:awd.net.Ping.test_id)
  return _internal_test_id();
}
inline void Ping::_internal_set_test_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  test_id_ = value;
}
inline void Ping::set_test_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_test_id(value);
  // @@protoc_insertion_point(field_set:awd.net.Ping.test_id)
}

// uint32 rtt = 2;
inline void Ping::clear_rtt() {
  rtt_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ping::_internal_rtt() const {
  return rtt_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ping::rtt() const {
  // @@protoc_insertion_point(field_get:awd.net.Ping.rtt)
  return _internal_rtt();
}
inline void Ping::_internal_set_rtt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rtt_ = value;
}
inline void Ping::set_rtt(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rtt(value);
  // @@protoc_insertion_point(field_set:awd.net.Ping.rtt)
}

// -------------------------------------------------------------------

// Pong

// uint32 test_id = 1;
inline void Pong::clear_test_id() {
  test_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pong::_internal_test_id() const {
  return test_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pong::test_id() const {
  // @@protoc_insertion_point(field_get:awd.net.Pong.test_id)
  return _internal_test_id();
}
inline void Pong::_internal_set_test_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  test_id_ = value;
}
inline void Pong::set_test_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_test_id(value);
  // @@protoc_insertion_point(field_set:awd.net.Pong.test_id)
}

// -------------------------------------------------------------------

// HandshakeRequest

// uint32 protocol_version = 1;
inline void HandshakeRequest::clear_protocol_version() {
  protocol_version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HandshakeRequest::_internal_protocol_version() const {
  return protocol_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HandshakeRequest::protocol_version() const {
  // @@protoc_insertion_point(field_get:awd.net.HandshakeRequest.protocol_version)
  return _internal_protocol_version();
}
inline void HandshakeRequest::_internal_set_protocol_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  protocol_version_ = value;
}
inline void HandshakeRequest::set_protocol_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_protocol_version(value);
  // @@protoc_insertion_point(field_set:awd.net.HandshakeRequest.protocol_version)
}

// -------------------------------------------------------------------

// HandshakeResponse

// sint32 protocol_version = 1;
inline void HandshakeResponse::clear_protocol_version() {
  protocol_version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HandshakeResponse::_internal_protocol_version() const {
  return protocol_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HandshakeResponse::protocol_version() const {
  // @@protoc_insertion_point(field_get:awd.net.HandshakeResponse.protocol_version)
  return _internal_protocol_version();
}
inline void HandshakeResponse::_internal_set_protocol_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  protocol_version_ = value;
}
inline void HandshakeResponse::set_protocol_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_protocol_version(value);
  // @@protoc_insertion_point(field_set:awd.net.HandshakeResponse.protocol_version)
}

// -------------------------------------------------------------------

// CreateLobbyRequest

// string player_name = 1;
inline void CreateLobbyRequest::clear_player_name() {
  player_name_.ClearToEmpty();
}
inline const std::string& CreateLobbyRequest::player_name() const {
  // @@protoc_insertion_point(field_get:awd.net.CreateLobbyRequest.player_name)
  return _internal_player_name();
}
inline void CreateLobbyRequest::set_player_name(const std::string& value) {
  _internal_set_player_name(value);
  // @@protoc_insertion_point(field_set:awd.net.CreateLobbyRequest.player_name)
}
inline std::string* CreateLobbyRequest::mutable_player_name() {
  // @@protoc_insertion_point(field_mutable:awd.net.CreateLobbyRequest.player_name)
  return _internal_mutable_player_name();
}
inline const std::string& CreateLobbyRequest::_internal_player_name() const {
  return player_name_.Get();
}
inline void CreateLobbyRequest::_internal_set_player_name(const std::string& value) {
  
  player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateLobbyRequest::set_player_name(std::string&& value) {
  
  player_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:awd.net.CreateLobbyRequest.player_name)
}
inline void CreateLobbyRequest::set_player_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:awd.net.CreateLobbyRequest.player_name)
}
inline void CreateLobbyRequest::set_player_name(const char* value,
    size_t size) {
  
  player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:awd.net.CreateLobbyRequest.player_name)
}
inline std::string* CreateLobbyRequest::_internal_mutable_player_name() {
  
  return player_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateLobbyRequest::release_player_name() {
  // @@protoc_insertion_point(field_release:awd.net.CreateLobbyRequest.player_name)
  return player_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateLobbyRequest::set_allocated_player_name(std::string* player_name) {
  if (player_name != nullptr) {
    
  } else {
    
  }
  player_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:awd.net.CreateLobbyRequest.player_name)
}

// -------------------------------------------------------------------

// CreateLobbyResponse

// sint32 lobby_id = 1;
inline void CreateLobbyResponse::clear_lobby_id() {
  lobby_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateLobbyResponse::_internal_lobby_id() const {
  return lobby_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateLobbyResponse::lobby_id() const {
  // @@protoc_insertion_point(field_get:awd.net.CreateLobbyResponse.lobby_id)
  return _internal_lobby_id();
}
inline void CreateLobbyResponse::_internal_set_lobby_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lobby_id_ = value;
}
inline void CreateLobbyResponse::set_lobby_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lobby_id(value);
  // @@protoc_insertion_point(field_set:awd.net.CreateLobbyResponse.lobby_id)
}

// uint32 player_id = 2;
inline void CreateLobbyResponse::clear_player_id() {
  player_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateLobbyResponse::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateLobbyResponse::player_id() const {
  // @@protoc_insertion_point(field_get:awd.net.CreateLobbyResponse.player_id)
  return _internal_player_id();
}
inline void CreateLobbyResponse::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  player_id_ = value;
}
inline void CreateLobbyResponse::set_player_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:awd.net.CreateLobbyResponse.player_id)
}

// uint32 character = 3;
inline void CreateLobbyResponse::clear_character() {
  character_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateLobbyResponse::_internal_character() const {
  return character_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CreateLobbyResponse::character() const {
  // @@protoc_insertion_point(field_get:awd.net.CreateLobbyResponse.character)
  return _internal_character();
}
inline void CreateLobbyResponse::_internal_set_character(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  character_ = value;
}
inline void CreateLobbyResponse::set_character(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_character(value);
  // @@protoc_insertion_point(field_set:awd.net.CreateLobbyResponse.character)
}

// -------------------------------------------------------------------

// JoinLobbyRequest

// uint32 lobby_id = 1;
inline void JoinLobbyRequest::clear_lobby_id() {
  lobby_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JoinLobbyRequest::_internal_lobby_id() const {
  return lobby_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JoinLobbyRequest::lobby_id() const {
  // @@protoc_insertion_point(field_get:awd.net.JoinLobbyRequest.lobby_id)
  return _internal_lobby_id();
}
inline void JoinLobbyRequest::_internal_set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lobby_id_ = value;
}
inline void JoinLobbyRequest::set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lobby_id(value);
  // @@protoc_insertion_point(field_set:awd.net.JoinLobbyRequest.lobby_id)
}

// string player_name = 2;
inline void JoinLobbyRequest::clear_player_name() {
  player_name_.ClearToEmpty();
}
inline const std::string& JoinLobbyRequest::player_name() const {
  // @@protoc_insertion_point(field_get:awd.net.JoinLobbyRequest.player_name)
  return _internal_player_name();
}
inline void JoinLobbyRequest::set_player_name(const std::string& value) {
  _internal_set_player_name(value);
  // @@protoc_insertion_point(field_set:awd.net.JoinLobbyRequest.player_name)
}
inline std::string* JoinLobbyRequest::mutable_player_name() {
  // @@protoc_insertion_point(field_mutable:awd.net.JoinLobbyRequest.player_name)
  return _internal_mutable_player_name();
}
inline const std::string& JoinLobbyRequest::_internal_player_name() const {
  return player_name_.Get();
}
inline void JoinLobbyRequest::_internal_set_player_name(const std::string& value) {
  
  player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void JoinLobbyRequest::set_player_name(std::string&& value) {
  
  player_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:awd.net.JoinLobbyRequest.player_name)
}
inline void JoinLobbyRequest::set_player_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:awd.net.JoinLobbyRequest.player_name)
}
inline void JoinLobbyRequest::set_player_name(const char* value,
    size_t size) {
  
  player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:awd.net.JoinLobbyRequest.player_name)
}
inline std::string* JoinLobbyRequest::_internal_mutable_player_name() {
  
  return player_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* JoinLobbyRequest::release_player_name() {
  // @@protoc_insertion_point(field_release:awd.net.JoinLobbyRequest.player_name)
  return player_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JoinLobbyRequest::set_allocated_player_name(std::string* player_name) {
  if (player_name != nullptr) {
    
  } else {
    
  }
  player_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:awd.net.JoinLobbyRequest.player_name)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// JoinLobbyResponse

// sint32 player_id = 1;
inline void JoinLobbyResponse::clear_player_id() {
  player_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JoinLobbyResponse::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JoinLobbyResponse::player_id() const {
  // @@protoc_insertion_point(field_get:awd.net.JoinLobbyResponse.player_id)
  return _internal_player_id();
}
inline void JoinLobbyResponse::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  player_id_ = value;
}
inline void JoinLobbyResponse::set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:awd.net.JoinLobbyResponse.player_id)
}

// uint32 character = 2;
inline void JoinLobbyResponse::clear_character() {
  character_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JoinLobbyResponse::_internal_character() const {
  return character_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JoinLobbyResponse::character() const {
  // @@protoc_insertion_point(field_get:awd.net.JoinLobbyResponse.character)
  return _internal_character();
}
inline void JoinLobbyResponse::_internal_set_character(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  character_ = value;
}
inline void JoinLobbyResponse::set_character(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_character(value);
  // @@protoc_insertion_point(field_set:awd.net.JoinLobbyResponse.character)
}

// uint32 host_id = 3;
inline void JoinLobbyResponse::clear_host_id() {
  host_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JoinLobbyResponse::_internal_host_id() const {
  return host_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 JoinLobbyResponse::host_id() const {
  // @@protoc_insertion_point(field_get:awd.net.JoinLobbyResponse.host_id)
  return _internal_host_id();
}
inline void JoinLobbyResponse::_internal_set_host_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  host_id_ = value;
}
inline void JoinLobbyResponse::set_host_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_host_id(value);
  // @@protoc_insertion_point(field_set:awd.net.JoinLobbyResponse.host_id)
}

// map<uint32, string> others_names = 4;
inline int JoinLobbyResponse::_internal_others_names_size() const {
  return others_names_.size();
}
inline int JoinLobbyResponse::others_names_size() const {
  return _internal_others_names_size();
}
inline void JoinLobbyResponse::clear_others_names() {
  others_names_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >&
JoinLobbyResponse::_internal_others_names() const {
  return others_names_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >&
JoinLobbyResponse::others_names() const {
  // @@protoc_insertion_point(field_map:awd.net.JoinLobbyResponse.others_names)
  return _internal_others_names();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >*
JoinLobbyResponse::_internal_mutable_others_names() {
  return others_names_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >*
JoinLobbyResponse::mutable_others_names() {
  // @@protoc_insertion_point(field_mutable_map:awd.net.JoinLobbyResponse.others_names)
  return _internal_mutable_others_names();
}

// map<uint32, uint32> others_characters = 5;
inline int JoinLobbyResponse::_internal_others_characters_size() const {
  return others_characters_.size();
}
inline int JoinLobbyResponse::others_characters_size() const {
  return _internal_others_characters_size();
}
inline void JoinLobbyResponse::clear_others_characters() {
  others_characters_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >&
JoinLobbyResponse::_internal_others_characters() const {
  return others_characters_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >&
JoinLobbyResponse::others_characters() const {
  // @@protoc_insertion_point(field_map:awd.net.JoinLobbyResponse.others_characters)
  return _internal_others_characters();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >*
JoinLobbyResponse::_internal_mutable_others_characters() {
  return others_characters_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >*
JoinLobbyResponse::mutable_others_characters() {
  // @@protoc_insertion_point(field_mutable_map:awd.net.JoinLobbyResponse.others_characters)
  return _internal_mutable_others_characters();
}

// -------------------------------------------------------------------

// LeaveLobbyRequest

// -------------------------------------------------------------------

// LeaveLobbyResponse

// sint32 status_code = 1;
inline void LeaveLobbyResponse::clear_status_code() {
  status_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LeaveLobbyResponse::_internal_status_code() const {
  return status_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LeaveLobbyResponse::status_code() const {
  // @@protoc_insertion_point(field_get:awd.net.LeaveLobbyResponse.status_code)
  return _internal_status_code();
}
inline void LeaveLobbyResponse::_internal_set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_code_ = value;
}
inline void LeaveLobbyResponse::set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:awd.net.LeaveLobbyResponse.status_code)
}

// -------------------------------------------------------------------

// KickedFromLobby

// uint32 reason = 1;
inline void KickedFromLobby::clear_reason() {
  reason_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KickedFromLobby::_internal_reason() const {
  return reason_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KickedFromLobby::reason() const {
  // @@protoc_insertion_point(field_get:awd.net.KickedFromLobby.reason)
  return _internal_reason();
}
inline void KickedFromLobby::_internal_set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  reason_ = value;
}
inline void KickedFromLobby::set_reason(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:awd.net.KickedFromLobby.reason)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// UpdatedMembersList

// map<uint32, string> new_all_names = 1;
inline int UpdatedMembersList::_internal_new_all_names_size() const {
  return new_all_names_.size();
}
inline int UpdatedMembersList::new_all_names_size() const {
  return _internal_new_all_names_size();
}
inline void UpdatedMembersList::clear_new_all_names() {
  new_all_names_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >&
UpdatedMembersList::_internal_new_all_names() const {
  return new_all_names_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >&
UpdatedMembersList::new_all_names() const {
  // @@protoc_insertion_point(field_map:awd.net.UpdatedMembersList.new_all_names)
  return _internal_new_all_names();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >*
UpdatedMembersList::_internal_mutable_new_all_names() {
  return new_all_names_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >*
UpdatedMembersList::mutable_new_all_names() {
  // @@protoc_insertion_point(field_mutable_map:awd.net.UpdatedMembersList.new_all_names)
  return _internal_mutable_new_all_names();
}

// map<uint32, uint32> new_all_characters = 2;
inline int UpdatedMembersList::_internal_new_all_characters_size() const {
  return new_all_characters_.size();
}
inline int UpdatedMembersList::new_all_characters_size() const {
  return _internal_new_all_characters_size();
}
inline void UpdatedMembersList::clear_new_all_characters() {
  new_all_characters_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >&
UpdatedMembersList::_internal_new_all_characters() const {
  return new_all_characters_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >&
UpdatedMembersList::new_all_characters() const {
  // @@protoc_insertion_point(field_map:awd.net.UpdatedMembersList.new_all_characters)
  return _internal_new_all_characters();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >*
UpdatedMembersList::_internal_mutable_new_all_characters() {
  return new_all_characters_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >*
UpdatedMembersList::mutable_new_all_characters() {
  // @@protoc_insertion_point(field_mutable_map:awd.net.UpdatedMembersList.new_all_characters)
  return _internal_mutable_new_all_characters();
}

// -------------------------------------------------------------------

// BeginPlayStateRequest

// string save_id = 1;
inline void BeginPlayStateRequest::clear_save_id() {
  save_id_.ClearToEmpty();
}
inline const std::string& BeginPlayStateRequest::save_id() const {
  // @@protoc_insertion_point(field_get:awd.net.BeginPlayStateRequest.save_id)
  return _internal_save_id();
}
inline void BeginPlayStateRequest::set_save_id(const std::string& value) {
  _internal_set_save_id(value);
  // @@protoc_insertion_point(field_set:awd.net.BeginPlayStateRequest.save_id)
}
inline std::string* BeginPlayStateRequest::mutable_save_id() {
  // @@protoc_insertion_point(field_mutable:awd.net.BeginPlayStateRequest.save_id)
  return _internal_mutable_save_id();
}
inline const std::string& BeginPlayStateRequest::_internal_save_id() const {
  return save_id_.Get();
}
inline void BeginPlayStateRequest::_internal_set_save_id(const std::string& value) {
  
  save_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BeginPlayStateRequest::set_save_id(std::string&& value) {
  
  save_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:awd.net.BeginPlayStateRequest.save_id)
}
inline void BeginPlayStateRequest::set_save_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  save_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:awd.net.BeginPlayStateRequest.save_id)
}
inline void BeginPlayStateRequest::set_save_id(const char* value,
    size_t size) {
  
  save_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:awd.net.BeginPlayStateRequest.save_id)
}
inline std::string* BeginPlayStateRequest::_internal_mutable_save_id() {
  
  return save_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BeginPlayStateRequest::release_save_id() {
  // @@protoc_insertion_point(field_release:awd.net.BeginPlayStateRequest.save_id)
  return save_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BeginPlayStateRequest::set_allocated_save_id(std::string* save_id) {
  if (save_id != nullptr) {
    
  } else {
    
  }
  save_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), save_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:awd.net.BeginPlayStateRequest.save_id)
}

// -------------------------------------------------------------------

// BeginPlayStateResponse

// sint32 status_code = 1;
inline void BeginPlayStateResponse::clear_status_code() {
  status_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BeginPlayStateResponse::_internal_status_code() const {
  return status_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BeginPlayStateResponse::status_code() const {
  // @@protoc_insertion_point(field_get:awd.net.BeginPlayStateResponse.status_code)
  return _internal_status_code();
}
inline void BeginPlayStateResponse::_internal_set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_code_ = value;
}
inline void BeginPlayStateResponse::set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:awd.net.BeginPlayStateResponse.status_code)
}

// -------------------------------------------------------------------

// UpdateDimensionCommand

// uint32 dimension = 1;
inline void UpdateDimensionCommand::clear_dimension() {
  dimension_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateDimensionCommand::_internal_dimension() const {
  return dimension_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateDimensionCommand::dimension() const {
  // @@protoc_insertion_point(field_get:awd.net.UpdateDimensionCommand.dimension)
  return _internal_dimension();
}
inline void UpdateDimensionCommand::_internal_set_dimension(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dimension_ = value;
}
inline void UpdateDimensionCommand::set_dimension(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dimension(value);
  // @@protoc_insertion_point(field_set:awd.net.UpdateDimensionCommand.dimension)
}

// -------------------------------------------------------------------

// UpdateDimensionComplete

// -------------------------------------------------------------------

// JoinWorldCommand

// -------------------------------------------------------------------

// JoinWorldComplete

// -------------------------------------------------------------------

// SpawnPlayer

// uint32 player_id = 1;
inline void SpawnPlayer::clear_player_id() {
  player_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SpawnPlayer::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SpawnPlayer::player_id() const {
  // @@protoc_insertion_point(field_get:awd.net.SpawnPlayer.player_id)
  return _internal_player_id();
}
inline void SpawnPlayer::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  player_id_ = value;
}
inline void SpawnPlayer::set_player_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:awd.net.SpawnPlayer.player_id)
}

// uint32 entity_id = 2;
inline void SpawnPlayer::clear_entity_id() {
  entity_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SpawnPlayer::_internal_entity_id() const {
  return entity_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SpawnPlayer::entity_id() const {
  // @@protoc_insertion_point(field_get:awd.net.SpawnPlayer.entity_id)
  return _internal_entity_id();
}
inline void SpawnPlayer::_internal_set_entity_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  entity_id_ = value;
}
inline void SpawnPlayer::set_entity_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_entity_id(value);
  // @@protoc_insertion_point(field_set:awd.net.SpawnPlayer.entity_id)
}

// -------------------------------------------------------------------

// UpdatePlayerInputs

// uint64 inputs_bitfield = 1;
inline void UpdatePlayerInputs::clear_inputs_bitfield() {
  inputs_bitfield_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdatePlayerInputs::_internal_inputs_bitfield() const {
  return inputs_bitfield_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UpdatePlayerInputs::inputs_bitfield() const {
  // @@protoc_insertion_point(field_get:awd.net.UpdatePlayerInputs.inputs_bitfield)
  return _internal_inputs_bitfield();
}
inline void UpdatePlayerInputs::_internal_set_inputs_bitfield(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  inputs_bitfield_ = value;
}
inline void UpdatePlayerInputs::set_inputs_bitfield(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_inputs_bitfield(value);
  // @@protoc_insertion_point(field_set:awd.net.UpdatePlayerInputs.inputs_bitfield)
}

// -------------------------------------------------------------------

// UpdateEntityPosition

// uint32 entity_id = 1;
inline void UpdateEntityPosition::clear_entity_id() {
  entity_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateEntityPosition::_internal_entity_id() const {
  return entity_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpdateEntityPosition::entity_id() const {
  // @@protoc_insertion_point(field_get:awd.net.UpdateEntityPosition.entity_id)
  return _internal_entity_id();
}
inline void UpdateEntityPosition::_internal_set_entity_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  entity_id_ = value;
}
inline void UpdateEntityPosition::set_entity_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_entity_id(value);
  // @@protoc_insertion_point(field_set:awd.net.UpdateEntityPosition.entity_id)
}

// float pos_x = 2;
inline void UpdateEntityPosition::clear_pos_x() {
  pos_x_ = 0;
}
inline float UpdateEntityPosition::_internal_pos_x() const {
  return pos_x_;
}
inline float UpdateEntityPosition::pos_x() const {
  // @@protoc_insertion_point(field_get:awd.net.UpdateEntityPosition.pos_x)
  return _internal_pos_x();
}
inline void UpdateEntityPosition::_internal_set_pos_x(float value) {
  
  pos_x_ = value;
}
inline void UpdateEntityPosition::set_pos_x(float value) {
  _internal_set_pos_x(value);
  // @@protoc_insertion_point(field_set:awd.net.UpdateEntityPosition.pos_x)
}

// float pos_y = 3;
inline void UpdateEntityPosition::clear_pos_y() {
  pos_y_ = 0;
}
inline float UpdateEntityPosition::_internal_pos_y() const {
  return pos_y_;
}
inline float UpdateEntityPosition::pos_y() const {
  // @@protoc_insertion_point(field_get:awd.net.UpdateEntityPosition.pos_y)
  return _internal_pos_y();
}
inline void UpdateEntityPosition::_internal_set_pos_y(float value) {
  
  pos_y_ = value;
}
inline void UpdateEntityPosition::set_pos_y(float value) {
  _internal_set_pos_y(value);
  // @@protoc_insertion_point(field_set:awd.net.UpdateEntityPosition.pos_y)
}

// float face_angle = 4;
inline void UpdateEntityPosition::clear_face_angle() {
  face_angle_ = 0;
}
inline float UpdateEntityPosition::_internal_face_angle() const {
  return face_angle_;
}
inline float UpdateEntityPosition::face_angle() const {
  // @@protoc_insertion_point(field_get:awd.net.UpdateEntityPosition.face_angle)
  return _internal_face_angle();
}
inline void UpdateEntityPosition::_internal_set_face_angle(float value) {
  
  face_angle_ = value;
}
inline void UpdateEntityPosition::set_face_angle(float value) {
  _internal_set_face_angle(value);
  // @@protoc_insertion_point(field_set:awd.net.UpdateEntityPosition.face_angle)
}

// -------------------------------------------------------------------

// PacketWrapper

// uint32 sequence = 1;
inline void PacketWrapper::clear_sequence() {
  sequence_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PacketWrapper::_internal_sequence() const {
  return sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PacketWrapper::sequence() const {
  // @@protoc_insertion_point(field_get:awd.net.PacketWrapper.sequence)
  return _internal_sequence();
}
inline void PacketWrapper::_internal_set_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sequence_ = value;
}
inline void PacketWrapper::set_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:awd.net.PacketWrapper.sequence)
}

// uint32 ack = 2;
inline void PacketWrapper::clear_ack() {
  ack_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PacketWrapper::_internal_ack() const {
  return ack_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PacketWrapper::ack() const {
  // @@protoc_insertion_point(field_get:awd.net.PacketWrapper.ack)
  return _internal_ack();
}
inline void PacketWrapper::_internal_set_ack(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  ack_ = value;
}
inline void PacketWrapper::set_ack(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ack(value);
  // @@protoc_insertion_point(field_set:awd.net.PacketWrapper.ack)
}

// uint64 ack_bitfield = 3;
inline void PacketWrapper::clear_ack_bitfield() {
  ack_bitfield_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PacketWrapper::_internal_ack_bitfield() const {
  return ack_bitfield_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PacketWrapper::ack_bitfield() const {
  // @@protoc_insertion_point(field_get:awd.net.PacketWrapper.ack_bitfield)
  return _internal_ack_bitfield();
}
inline void PacketWrapper::_internal_set_ack_bitfield(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  ack_bitfield_ = value;
}
inline void PacketWrapper::set_ack_bitfield(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ack_bitfield(value);
  // @@protoc_insertion_point(field_set:awd.net.PacketWrapper.ack_bitfield)
}

// .awd.net.Ping ping = 4;
inline bool PacketWrapper::_internal_has_ping() const {
  return packet_case() == kPing;
}
inline bool PacketWrapper::has_ping() const {
  return _internal_has_ping();
}
inline void PacketWrapper::set_has_ping() {
  _oneof_case_[0] = kPing;
}
inline void PacketWrapper::clear_ping() {
  if (_internal_has_ping()) {
    if (GetArena() == nullptr) {
      delete packet_.ping_;
    }
    clear_has_packet();
  }
}
inline ::awd::net::Ping* PacketWrapper::release_ping() {
  // @@protoc_insertion_point(field_release:awd.net.PacketWrapper.ping)
  if (_internal_has_ping()) {
    clear_has_packet();
      ::awd::net::Ping* temp = packet_.ping_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    packet_.ping_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::awd::net::Ping& PacketWrapper::_internal_ping() const {
  return _internal_has_ping()
      ? *packet_.ping_
      : reinterpret_cast< ::awd::net::Ping&>(::awd::net::_Ping_default_instance_);
}
inline const ::awd::net::Ping& PacketWrapper::ping() const {
  // @@protoc_insertion_point(field_get:awd.net.PacketWrapper.ping)
  return _internal_ping();
}
inline ::awd::net::Ping* PacketWrapper::unsafe_arena_release_ping() {
  // @@protoc_insertion_point(field_unsafe_arena_release:awd.net.PacketWrapper.ping)
  if (_internal_has_ping()) {
    clear_has_packet();
    ::awd::net::Ping* temp = packet_.ping_;
    packet_.ping_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketWrapper::unsafe_arena_set_allocated_ping(::awd::net::Ping* ping) {
  clear_packet();
  if (ping) {
    set_has_ping();
    packet_.ping_ = ping;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:awd.net.PacketWrapper.ping)
}
inline ::awd::net::Ping* PacketWrapper::_internal_mutable_ping() {
  if (!_internal_has_ping()) {
    clear_packet();
    set_has_ping();
    packet_.ping_ = CreateMaybeMessage< ::awd::net::Ping >(GetArena());
  }
  return packet_.ping_;
}
inline ::awd::net::Ping* PacketWrapper::mutable_ping() {
  // @@protoc_insertion_point(field_mutable:awd.net.PacketWrapper.ping)
  return _internal_mutable_ping();
}

// .awd.net.Pong pong = 5;
inline bool PacketWrapper::_internal_has_pong() const {
  return packet_case() == kPong;
}
inline bool PacketWrapper::has_pong() const {
  return _internal_has_pong();
}
inline void PacketWrapper::set_has_pong() {
  _oneof_case_[0] = kPong;
}
inline void PacketWrapper::clear_pong() {
  if (_internal_has_pong()) {
    if (GetArena() == nullptr) {
      delete packet_.pong_;
    }
    clear_has_packet();
  }
}
inline ::awd::net::Pong* PacketWrapper::release_pong() {
  // @@protoc_insertion_point(field_release:awd.net.PacketWrapper.pong)
  if (_internal_has_pong()) {
    clear_has_packet();
      ::awd::net::Pong* temp = packet_.pong_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    packet_.pong_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::awd::net::Pong& PacketWrapper::_internal_pong() const {
  return _internal_has_pong()
      ? *packet_.pong_
      : reinterpret_cast< ::awd::net::Pong&>(::awd::net::_Pong_default_instance_);
}
inline const ::awd::net::Pong& PacketWrapper::pong() const {
  // @@protoc_insertion_point(field_get:awd.net.PacketWrapper.pong)
  return _internal_pong();
}
inline ::awd::net::Pong* PacketWrapper::unsafe_arena_release_pong() {
  // @@protoc_insertion_point(field_unsafe_arena_release:awd.net.PacketWrapper.pong)
  if (_internal_has_pong()) {
    clear_has_packet();
    ::awd::net::Pong* temp = packet_.pong_;
    packet_.pong_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketWrapper::unsafe_arena_set_allocated_pong(::awd::net::Pong* pong) {
  clear_packet();
  if (pong) {
    set_has_pong();
    packet_.pong_ = pong;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:awd.net.PacketWrapper.pong)
}
inline ::awd::net::Pong* PacketWrapper::_internal_mutable_pong() {
  if (!_internal_has_pong()) {
    clear_packet();
    set_has_pong();
    packet_.pong_ = CreateMaybeMessage< ::awd::net::Pong >(GetArena());
  }
  return packet_.pong_;
}
inline ::awd::net::Pong* PacketWrapper::mutable_pong() {
  // @@protoc_insertion_point(field_mutable:awd.net.PacketWrapper.pong)
  return _internal_mutable_pong();
}

// .awd.net.HandshakeRequest handshake_request = 10;
inline bool PacketWrapper::_internal_has_handshake_request() const {
  return packet_case() == kHandshakeRequest;
}
inline bool PacketWrapper::has_handshake_request() const {
  return _internal_has_handshake_request();
}
inline void PacketWrapper::set_has_handshake_request() {
  _oneof_case_[0] = kHandshakeRequest;
}
inline void PacketWrapper::clear_handshake_request() {
  if (_internal_has_handshake_request()) {
    if (GetArena() == nullptr) {
      delete packet_.handshake_request_;
    }
    clear_has_packet();
  }
}
inline ::awd::net::HandshakeRequest* PacketWrapper::release_handshake_request() {
  // @@protoc_insertion_point(field_release:awd.net.PacketWrapper.handshake_request)
  if (_internal_has_handshake_request()) {
    clear_has_packet();
      ::awd::net::HandshakeRequest* temp = packet_.handshake_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    packet_.handshake_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::awd::net::HandshakeRequest& PacketWrapper::_internal_handshake_request() const {
  return _internal_has_handshake_request()
      ? *packet_.handshake_request_
      : reinterpret_cast< ::awd::net::HandshakeRequest&>(::awd::net::_HandshakeRequest_default_instance_);
}
inline const ::awd::net::HandshakeRequest& PacketWrapper::handshake_request() const {
  // @@protoc_insertion_point(field_get:awd.net.PacketWrapper.handshake_request)
  return _internal_handshake_request();
}
inline ::awd::net::HandshakeRequest* PacketWrapper::unsafe_arena_release_handshake_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:awd.net.PacketWrapper.handshake_request)
  if (_internal_has_handshake_request()) {
    clear_has_packet();
    ::awd::net::HandshakeRequest* temp = packet_.handshake_request_;
    packet_.handshake_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketWrapper::unsafe_arena_set_allocated_handshake_request(::awd::net::HandshakeRequest* handshake_request) {
  clear_packet();
  if (handshake_request) {
    set_has_handshake_request();
    packet_.handshake_request_ = handshake_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:awd.net.PacketWrapper.handshake_request)
}
inline ::awd::net::HandshakeRequest* PacketWrapper::_internal_mutable_handshake_request() {
  if (!_internal_has_handshake_request()) {
    clear_packet();
    set_has_handshake_request();
    packet_.handshake_request_ = CreateMaybeMessage< ::awd::net::HandshakeRequest >(GetArena());
  }
  return packet_.handshake_request_;
}
inline ::awd::net::HandshakeRequest* PacketWrapper::mutable_handshake_request() {
  // @@protoc_insertion_point(field_mutable:awd.net.PacketWrapper.handshake_request)
  return _internal_mutable_handshake_request();
}

// .awd.net.HandshakeResponse handshake_response = 11;
inline bool PacketWrapper::_internal_has_handshake_response() const {
  return packet_case() == kHandshakeResponse;
}
inline bool PacketWrapper::has_handshake_response() const {
  return _internal_has_handshake_response();
}
inline void PacketWrapper::set_has_handshake_response() {
  _oneof_case_[0] = kHandshakeResponse;
}
inline void PacketWrapper::clear_handshake_response() {
  if (_internal_has_handshake_response()) {
    if (GetArena() == nullptr) {
      delete packet_.handshake_response_;
    }
    clear_has_packet();
  }
}
inline ::awd::net::HandshakeResponse* PacketWrapper::release_handshake_response() {
  // @@protoc_insertion_point(field_release:awd.net.PacketWrapper.handshake_response)
  if (_internal_has_handshake_response()) {
    clear_has_packet();
      ::awd::net::HandshakeResponse* temp = packet_.handshake_response_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    packet_.handshake_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::awd::net::HandshakeResponse& PacketWrapper::_internal_handshake_response() const {
  return _internal_has_handshake_response()
      ? *packet_.handshake_response_
      : reinterpret_cast< ::awd::net::HandshakeResponse&>(::awd::net::_HandshakeResponse_default_instance_);
}
inline const ::awd::net::HandshakeResponse& PacketWrapper::handshake_response() const {
  // @@protoc_insertion_point(field_get:awd.net.PacketWrapper.handshake_response)
  return _internal_handshake_response();
}
inline ::awd::net::HandshakeResponse* PacketWrapper::unsafe_arena_release_handshake_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:awd.net.PacketWrapper.handshake_response)
  if (_internal_has_handshake_response()) {
    clear_has_packet();
    ::awd::net::HandshakeResponse* temp = packet_.handshake_response_;
    packet_.handshake_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketWrapper::unsafe_arena_set_allocated_handshake_response(::awd::net::HandshakeResponse* handshake_response) {
  clear_packet();
  if (handshake_response) {
    set_has_handshake_response();
    packet_.handshake_response_ = handshake_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:awd.net.PacketWrapper.handshake_response)
}
inline ::awd::net::HandshakeResponse* PacketWrapper::_internal_mutable_handshake_response() {
  if (!_internal_has_handshake_response()) {
    clear_packet();
    set_has_handshake_response();
    packet_.handshake_response_ = CreateMaybeMessage< ::awd::net::HandshakeResponse >(GetArena());
  }
  return packet_.handshake_response_;
}
inline ::awd::net::HandshakeResponse* PacketWrapper::mutable_handshake_response() {
  // @@protoc_insertion_point(field_mutable:awd.net.PacketWrapper.handshake_response)
  return _internal_mutable_handshake_response();
}

// .awd.net.CreateLobbyRequest create_lobby_request = 100;
inline bool PacketWrapper::_internal_has_create_lobby_request() const {
  return packet_case() == kCreateLobbyRequest;
}
inline bool PacketWrapper::has_create_lobby_request() const {
  return _internal_has_create_lobby_request();
}
inline void PacketWrapper::set_has_create_lobby_request() {
  _oneof_case_[0] = kCreateLobbyRequest;
}
inline void PacketWrapper::clear_create_lobby_request() {
  if (_internal_has_create_lobby_request()) {
    if (GetArena() == nullptr) {
      delete packet_.create_lobby_request_;
    }
    clear_has_packet();
  }
}
inline ::awd::net::CreateLobbyRequest* PacketWrapper::release_create_lobby_request() {
  // @@protoc_insertion_point(field_release:awd.net.PacketWrapper.create_lobby_request)
  if (_internal_has_create_lobby_request()) {
    clear_has_packet();
      ::awd::net::CreateLobbyRequest* temp = packet_.create_lobby_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    packet_.create_lobby_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::awd::net::CreateLobbyRequest& PacketWrapper::_internal_create_lobby_request() const {
  return _internal_has_create_lobby_request()
      ? *packet_.create_lobby_request_
      : reinterpret_cast< ::awd::net::CreateLobbyRequest&>(::awd::net::_CreateLobbyRequest_default_instance_);
}
inline const ::awd::net::CreateLobbyRequest& PacketWrapper::create_lobby_request() const {
  // @@protoc_insertion_point(field_get:awd.net.PacketWrapper.create_lobby_request)
  return _internal_create_lobby_request();
}
inline ::awd::net::CreateLobbyRequest* PacketWrapper::unsafe_arena_release_create_lobby_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:awd.net.PacketWrapper.create_lobby_request)
  if (_internal_has_create_lobby_request()) {
    clear_has_packet();
    ::awd::net::CreateLobbyRequest* temp = packet_.create_lobby_request_;
    packet_.create_lobby_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketWrapper::unsafe_arena_set_allocated_create_lobby_request(::awd::net::CreateLobbyRequest* create_lobby_request) {
  clear_packet();
  if (create_lobby_request) {
    set_has_create_lobby_request();
    packet_.create_lobby_request_ = create_lobby_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:awd.net.PacketWrapper.create_lobby_request)
}
inline ::awd::net::CreateLobbyRequest* PacketWrapper::_internal_mutable_create_lobby_request() {
  if (!_internal_has_create_lobby_request()) {
    clear_packet();
    set_has_create_lobby_request();
    packet_.create_lobby_request_ = CreateMaybeMessage< ::awd::net::CreateLobbyRequest >(GetArena());
  }
  return packet_.create_lobby_request_;
}
inline ::awd::net::CreateLobbyRequest* PacketWrapper::mutable_create_lobby_request() {
  // @@protoc_insertion_point(field_mutable:awd.net.PacketWrapper.create_lobby_request)
  return _internal_mutable_create_lobby_request();
}

// .awd.net.CreateLobbyResponse create_lobby_response = 101;
inline bool PacketWrapper::_internal_has_create_lobby_response() const {
  return packet_case() == kCreateLobbyResponse;
}
inline bool PacketWrapper::has_create_lobby_response() const {
  return _internal_has_create_lobby_response();
}
inline void PacketWrapper::set_has_create_lobby_response() {
  _oneof_case_[0] = kCreateLobbyResponse;
}
inline void PacketWrapper::clear_create_lobby_response() {
  if (_internal_has_create_lobby_response()) {
    if (GetArena() == nullptr) {
      delete packet_.create_lobby_response_;
    }
    clear_has_packet();
  }
}
inline ::awd::net::CreateLobbyResponse* PacketWrapper::release_create_lobby_response() {
  // @@protoc_insertion_point(field_release:awd.net.PacketWrapper.create_lobby_response)
  if (_internal_has_create_lobby_response()) {
    clear_has_packet();
      ::awd::net::CreateLobbyResponse* temp = packet_.create_lobby_response_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    packet_.create_lobby_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::awd::net::CreateLobbyResponse& PacketWrapper::_internal_create_lobby_response() const {
  return _internal_has_create_lobby_response()
      ? *packet_.create_lobby_response_
      : reinterpret_cast< ::awd::net::CreateLobbyResponse&>(::awd::net::_CreateLobbyResponse_default_instance_);
}
inline const ::awd::net::CreateLobbyResponse& PacketWrapper::create_lobby_response() const {
  // @@protoc_insertion_point(field_get:awd.net.PacketWrapper.create_lobby_response)
  return _internal_create_lobby_response();
}
inline ::awd::net::CreateLobbyResponse* PacketWrapper::unsafe_arena_release_create_lobby_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:awd.net.PacketWrapper.create_lobby_response)
  if (_internal_has_create_lobby_response()) {
    clear_has_packet();
    ::awd::net::CreateLobbyResponse* temp = packet_.create_lobby_response_;
    packet_.create_lobby_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketWrapper::unsafe_arena_set_allocated_create_lobby_response(::awd::net::CreateLobbyResponse* create_lobby_response) {
  clear_packet();
  if (create_lobby_response) {
    set_has_create_lobby_response();
    packet_.create_lobby_response_ = create_lobby_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:awd.net.PacketWrapper.create_lobby_response)
}
inline ::awd::net::CreateLobbyResponse* PacketWrapper::_internal_mutable_create_lobby_response() {
  if (!_internal_has_create_lobby_response()) {
    clear_packet();
    set_has_create_lobby_response();
    packet_.create_lobby_response_ = CreateMaybeMessage< ::awd::net::CreateLobbyResponse >(GetArena());
  }
  return packet_.create_lobby_response_;
}
inline ::awd::net::CreateLobbyResponse* PacketWrapper::mutable_create_lobby_response() {
  // @@protoc_insertion_point(field_mutable:awd.net.PacketWrapper.create_lobby_response)
  return _internal_mutable_create_lobby_response();
}

// .awd.net.JoinLobbyRequest join_lobby_request = 102;
inline bool PacketWrapper::_internal_has_join_lobby_request() const {
  return packet_case() == kJoinLobbyRequest;
}
inline bool PacketWrapper::has_join_lobby_request() const {
  return _internal_has_join_lobby_request();
}
inline void PacketWrapper::set_has_join_lobby_request() {
  _oneof_case_[0] = kJoinLobbyRequest;
}
inline void PacketWrapper::clear_join_lobby_request() {
  if (_internal_has_join_lobby_request()) {
    if (GetArena() == nullptr) {
      delete packet_.join_lobby_request_;
    }
    clear_has_packet();
  }
}
inline ::awd::net::JoinLobbyRequest* PacketWrapper::release_join_lobby_request() {
  // @@protoc_insertion_point(field_release:awd.net.PacketWrapper.join_lobby_request)
  if (_internal_has_join_lobby_request()) {
    clear_has_packet();
      ::awd::net::JoinLobbyRequest* temp = packet_.join_lobby_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    packet_.join_lobby_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::awd::net::JoinLobbyRequest& PacketWrapper::_internal_join_lobby_request() const {
  return _internal_has_join_lobby_request()
      ? *packet_.join_lobby_request_
      : reinterpret_cast< ::awd::net::JoinLobbyRequest&>(::awd::net::_JoinLobbyRequest_default_instance_);
}
inline const ::awd::net::JoinLobbyRequest& PacketWrapper::join_lobby_request() const {
  // @@protoc_insertion_point(field_get:awd.net.PacketWrapper.join_lobby_request)
  return _internal_join_lobby_request();
}
inline ::awd::net::JoinLobbyRequest* PacketWrapper::unsafe_arena_release_join_lobby_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:awd.net.PacketWrapper.join_lobby_request)
  if (_internal_has_join_lobby_request()) {
    clear_has_packet();
    ::awd::net::JoinLobbyRequest* temp = packet_.join_lobby_request_;
    packet_.join_lobby_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketWrapper::unsafe_arena_set_allocated_join_lobby_request(::awd::net::JoinLobbyRequest* join_lobby_request) {
  clear_packet();
  if (join_lobby_request) {
    set_has_join_lobby_request();
    packet_.join_lobby_request_ = join_lobby_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:awd.net.PacketWrapper.join_lobby_request)
}
inline ::awd::net::JoinLobbyRequest* PacketWrapper::_internal_mutable_join_lobby_request() {
  if (!_internal_has_join_lobby_request()) {
    clear_packet();
    set_has_join_lobby_request();
    packet_.join_lobby_request_ = CreateMaybeMessage< ::awd::net::JoinLobbyRequest >(GetArena());
  }
  return packet_.join_lobby_request_;
}
inline ::awd::net::JoinLobbyRequest* PacketWrapper::mutable_join_lobby_request() {
  // @@protoc_insertion_point(field_mutable:awd.net.PacketWrapper.join_lobby_request)
  return _internal_mutable_join_lobby_request();
}

// .awd.net.JoinLobbyResponse join_lobby_response = 103;
inline bool PacketWrapper::_internal_has_join_lobby_response() const {
  return packet_case() == kJoinLobbyResponse;
}
inline bool PacketWrapper::has_join_lobby_response() const {
  return _internal_has_join_lobby_response();
}
inline void PacketWrapper::set_has_join_lobby_response() {
  _oneof_case_[0] = kJoinLobbyResponse;
}
inline void PacketWrapper::clear_join_lobby_response() {
  if (_internal_has_join_lobby_response()) {
    if (GetArena() == nullptr) {
      delete packet_.join_lobby_response_;
    }
    clear_has_packet();
  }
}
inline ::awd::net::JoinLobbyResponse* PacketWrapper::release_join_lobby_response() {
  // @@protoc_insertion_point(field_release:awd.net.PacketWrapper.join_lobby_response)
  if (_internal_has_join_lobby_response()) {
    clear_has_packet();
      ::awd::net::JoinLobbyResponse* temp = packet_.join_lobby_response_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    packet_.join_lobby_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::awd::net::JoinLobbyResponse& PacketWrapper::_internal_join_lobby_response() const {
  return _internal_has_join_lobby_response()
      ? *packet_.join_lobby_response_
      : reinterpret_cast< ::awd::net::JoinLobbyResponse&>(::awd::net::_JoinLobbyResponse_default_instance_);
}
inline const ::awd::net::JoinLobbyResponse& PacketWrapper::join_lobby_response() const {
  // @@protoc_insertion_point(field_get:awd.net.PacketWrapper.join_lobby_response)
  return _internal_join_lobby_response();
}
inline ::awd::net::JoinLobbyResponse* PacketWrapper::unsafe_arena_release_join_lobby_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:awd.net.PacketWrapper.join_lobby_response)
  if (_internal_has_join_lobby_response()) {
    clear_has_packet();
    ::awd::net::JoinLobbyResponse* temp = packet_.join_lobby_response_;
    packet_.join_lobby_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketWrapper::unsafe_arena_set_allocated_join_lobby_response(::awd::net::JoinLobbyResponse* join_lobby_response) {
  clear_packet();
  if (join_lobby_response) {
    set_has_join_lobby_response();
    packet_.join_lobby_response_ = join_lobby_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:awd.net.PacketWrapper.join_lobby_response)
}
inline ::awd::net::JoinLobbyResponse* PacketWrapper::_internal_mutable_join_lobby_response() {
  if (!_internal_has_join_lobby_response()) {
    clear_packet();
    set_has_join_lobby_response();
    packet_.join_lobby_response_ = CreateMaybeMessage< ::awd::net::JoinLobbyResponse >(GetArena());
  }
  return packet_.join_lobby_response_;
}
inline ::awd::net::JoinLobbyResponse* PacketWrapper::mutable_join_lobby_response() {
  // @@protoc_insertion_point(field_mutable:awd.net.PacketWrapper.join_lobby_response)
  return _internal_mutable_join_lobby_response();
}

// .awd.net.LeaveLobbyRequest leave_lobby_request = 104;
inline bool PacketWrapper::_internal_has_leave_lobby_request() const {
  return packet_case() == kLeaveLobbyRequest;
}
inline bool PacketWrapper::has_leave_lobby_request() const {
  return _internal_has_leave_lobby_request();
}
inline void PacketWrapper::set_has_leave_lobby_request() {
  _oneof_case_[0] = kLeaveLobbyRequest;
}
inline void PacketWrapper::clear_leave_lobby_request() {
  if (_internal_has_leave_lobby_request()) {
    if (GetArena() == nullptr) {
      delete packet_.leave_lobby_request_;
    }
    clear_has_packet();
  }
}
inline ::awd::net::LeaveLobbyRequest* PacketWrapper::release_leave_lobby_request() {
  // @@protoc_insertion_point(field_release:awd.net.PacketWrapper.leave_lobby_request)
  if (_internal_has_leave_lobby_request()) {
    clear_has_packet();
      ::awd::net::LeaveLobbyRequest* temp = packet_.leave_lobby_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    packet_.leave_lobby_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::awd::net::LeaveLobbyRequest& PacketWrapper::_internal_leave_lobby_request() const {
  return _internal_has_leave_lobby_request()
      ? *packet_.leave_lobby_request_
      : reinterpret_cast< ::awd::net::LeaveLobbyRequest&>(::awd::net::_LeaveLobbyRequest_default_instance_);
}
inline const ::awd::net::LeaveLobbyRequest& PacketWrapper::leave_lobby_request() const {
  // @@protoc_insertion_point(field_get:awd.net.PacketWrapper.leave_lobby_request)
  return _internal_leave_lobby_request();
}
inline ::awd::net::LeaveLobbyRequest* PacketWrapper::unsafe_arena_release_leave_lobby_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:awd.net.PacketWrapper.leave_lobby_request)
  if (_internal_has_leave_lobby_request()) {
    clear_has_packet();
    ::awd::net::LeaveLobbyRequest* temp = packet_.leave_lobby_request_;
    packet_.leave_lobby_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketWrapper::unsafe_arena_set_allocated_leave_lobby_request(::awd::net::LeaveLobbyRequest* leave_lobby_request) {
  clear_packet();
  if (leave_lobby_request) {
    set_has_leave_lobby_request();
    packet_.leave_lobby_request_ = leave_lobby_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:awd.net.PacketWrapper.leave_lobby_request)
}
inline ::awd::net::LeaveLobbyRequest* PacketWrapper::_internal_mutable_leave_lobby_request() {
  if (!_internal_has_leave_lobby_request()) {
    clear_packet();
    set_has_leave_lobby_request();
    packet_.leave_lobby_request_ = CreateMaybeMessage< ::awd::net::LeaveLobbyRequest >(GetArena());
  }
  return packet_.leave_lobby_request_;
}
inline ::awd::net::LeaveLobbyRequest* PacketWrapper::mutable_leave_lobby_request() {
  // @@protoc_insertion_point(field_mutable:awd.net.PacketWrapper.leave_lobby_request)
  return _internal_mutable_leave_lobby_request();
}

// .awd.net.LeaveLobbyResponse leave_lobby_response = 105;
inline bool PacketWrapper::_internal_has_leave_lobby_response() const {
  return packet_case() == kLeaveLobbyResponse;
}
inline bool PacketWrapper::has_leave_lobby_response() const {
  return _internal_has_leave_lobby_response();
}
inline void PacketWrapper::set_has_leave_lobby_response() {
  _oneof_case_[0] = kLeaveLobbyResponse;
}
inline void PacketWrapper::clear_leave_lobby_response() {
  if (_internal_has_leave_lobby_response()) {
    if (GetArena() == nullptr) {
      delete packet_.leave_lobby_response_;
    }
    clear_has_packet();
  }
}
inline ::awd::net::LeaveLobbyResponse* PacketWrapper::release_leave_lobby_response() {
  // @@protoc_insertion_point(field_release:awd.net.PacketWrapper.leave_lobby_response)
  if (_internal_has_leave_lobby_response()) {
    clear_has_packet();
      ::awd::net::LeaveLobbyResponse* temp = packet_.leave_lobby_response_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    packet_.leave_lobby_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::awd::net::LeaveLobbyResponse& PacketWrapper::_internal_leave_lobby_response() const {
  return _internal_has_leave_lobby_response()
      ? *packet_.leave_lobby_response_
      : reinterpret_cast< ::awd::net::LeaveLobbyResponse&>(::awd::net::_LeaveLobbyResponse_default_instance_);
}
inline const ::awd::net::LeaveLobbyResponse& PacketWrapper::leave_lobby_response() const {
  // @@protoc_insertion_point(field_get:awd.net.PacketWrapper.leave_lobby_response)
  return _internal_leave_lobby_response();
}
inline ::awd::net::LeaveLobbyResponse* PacketWrapper::unsafe_arena_release_leave_lobby_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:awd.net.PacketWrapper.leave_lobby_response)
  if (_internal_has_leave_lobby_response()) {
    clear_has_packet();
    ::awd::net::LeaveLobbyResponse* temp = packet_.leave_lobby_response_;
    packet_.leave_lobby_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketWrapper::unsafe_arena_set_allocated_leave_lobby_response(::awd::net::LeaveLobbyResponse* leave_lobby_response) {
  clear_packet();
  if (leave_lobby_response) {
    set_has_leave_lobby_response();
    packet_.leave_lobby_response_ = leave_lobby_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:awd.net.PacketWrapper.leave_lobby_response)
}
inline ::awd::net::LeaveLobbyResponse* PacketWrapper::_internal_mutable_leave_lobby_response() {
  if (!_internal_has_leave_lobby_response()) {
    clear_packet();
    set_has_leave_lobby_response();
    packet_.leave_lobby_response_ = CreateMaybeMessage< ::awd::net::LeaveLobbyResponse >(GetArena());
  }
  return packet_.leave_lobby_response_;
}
inline ::awd::net::LeaveLobbyResponse* PacketWrapper::mutable_leave_lobby_response() {
  // @@protoc_insertion_point(field_mutable:awd.net.PacketWrapper.leave_lobby_response)
  return _internal_mutable_leave_lobby_response();
}

// .awd.net.KickedFromLobby kicked_from_lobby = 106;
inline bool PacketWrapper::_internal_has_kicked_from_lobby() const {
  return packet_case() == kKickedFromLobby;
}
inline bool PacketWrapper::has_kicked_from_lobby() const {
  return _internal_has_kicked_from_lobby();
}
inline void PacketWrapper::set_has_kicked_from_lobby() {
  _oneof_case_[0] = kKickedFromLobby;
}
inline void PacketWrapper::clear_kicked_from_lobby() {
  if (_internal_has_kicked_from_lobby()) {
    if (GetArena() == nullptr) {
      delete packet_.kicked_from_lobby_;
    }
    clear_has_packet();
  }
}
inline ::awd::net::KickedFromLobby* PacketWrapper::release_kicked_from_lobby() {
  // @@protoc_insertion_point(field_release:awd.net.PacketWrapper.kicked_from_lobby)
  if (_internal_has_kicked_from_lobby()) {
    clear_has_packet();
      ::awd::net::KickedFromLobby* temp = packet_.kicked_from_lobby_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    packet_.kicked_from_lobby_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::awd::net::KickedFromLobby& PacketWrapper::_internal_kicked_from_lobby() const {
  return _internal_has_kicked_from_lobby()
      ? *packet_.kicked_from_lobby_
      : reinterpret_cast< ::awd::net::KickedFromLobby&>(::awd::net::_KickedFromLobby_default_instance_);
}
inline const ::awd::net::KickedFromLobby& PacketWrapper::kicked_from_lobby() const {
  // @@protoc_insertion_point(field_get:awd.net.PacketWrapper.kicked_from_lobby)
  return _internal_kicked_from_lobby();
}
inline ::awd::net::KickedFromLobby* PacketWrapper::unsafe_arena_release_kicked_from_lobby() {
  // @@protoc_insertion_point(field_unsafe_arena_release:awd.net.PacketWrapper.kicked_from_lobby)
  if (_internal_has_kicked_from_lobby()) {
    clear_has_packet();
    ::awd::net::KickedFromLobby* temp = packet_.kicked_from_lobby_;
    packet_.kicked_from_lobby_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketWrapper::unsafe_arena_set_allocated_kicked_from_lobby(::awd::net::KickedFromLobby* kicked_from_lobby) {
  clear_packet();
  if (kicked_from_lobby) {
    set_has_kicked_from_lobby();
    packet_.kicked_from_lobby_ = kicked_from_lobby;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:awd.net.PacketWrapper.kicked_from_lobby)
}
inline ::awd::net::KickedFromLobby* PacketWrapper::_internal_mutable_kicked_from_lobby() {
  if (!_internal_has_kicked_from_lobby()) {
    clear_packet();
    set_has_kicked_from_lobby();
    packet_.kicked_from_lobby_ = CreateMaybeMessage< ::awd::net::KickedFromLobby >(GetArena());
  }
  return packet_.kicked_from_lobby_;
}
inline ::awd::net::KickedFromLobby* PacketWrapper::mutable_kicked_from_lobby() {
  // @@protoc_insertion_point(field_mutable:awd.net.PacketWrapper.kicked_from_lobby)
  return _internal_mutable_kicked_from_lobby();
}

// .awd.net.UpdatedMembersList updated_members_list = 107;
inline bool PacketWrapper::_internal_has_updated_members_list() const {
  return packet_case() == kUpdatedMembersList;
}
inline bool PacketWrapper::has_updated_members_list() const {
  return _internal_has_updated_members_list();
}
inline void PacketWrapper::set_has_updated_members_list() {
  _oneof_case_[0] = kUpdatedMembersList;
}
inline void PacketWrapper::clear_updated_members_list() {
  if (_internal_has_updated_members_list()) {
    if (GetArena() == nullptr) {
      delete packet_.updated_members_list_;
    }
    clear_has_packet();
  }
}
inline ::awd::net::UpdatedMembersList* PacketWrapper::release_updated_members_list() {
  // @@protoc_insertion_point(field_release:awd.net.PacketWrapper.updated_members_list)
  if (_internal_has_updated_members_list()) {
    clear_has_packet();
      ::awd::net::UpdatedMembersList* temp = packet_.updated_members_list_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    packet_.updated_members_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::awd::net::UpdatedMembersList& PacketWrapper::_internal_updated_members_list() const {
  return _internal_has_updated_members_list()
      ? *packet_.updated_members_list_
      : reinterpret_cast< ::awd::net::UpdatedMembersList&>(::awd::net::_UpdatedMembersList_default_instance_);
}
inline const ::awd::net::UpdatedMembersList& PacketWrapper::updated_members_list() const {
  // @@protoc_insertion_point(field_get:awd.net.PacketWrapper.updated_members_list)
  return _internal_updated_members_list();
}
inline ::awd::net::UpdatedMembersList* PacketWrapper::unsafe_arena_release_updated_members_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:awd.net.PacketWrapper.updated_members_list)
  if (_internal_has_updated_members_list()) {
    clear_has_packet();
    ::awd::net::UpdatedMembersList* temp = packet_.updated_members_list_;
    packet_.updated_members_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketWrapper::unsafe_arena_set_allocated_updated_members_list(::awd::net::UpdatedMembersList* updated_members_list) {
  clear_packet();
  if (updated_members_list) {
    set_has_updated_members_list();
    packet_.updated_members_list_ = updated_members_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:awd.net.PacketWrapper.updated_members_list)
}
inline ::awd::net::UpdatedMembersList* PacketWrapper::_internal_mutable_updated_members_list() {
  if (!_internal_has_updated_members_list()) {
    clear_packet();
    set_has_updated_members_list();
    packet_.updated_members_list_ = CreateMaybeMessage< ::awd::net::UpdatedMembersList >(GetArena());
  }
  return packet_.updated_members_list_;
}
inline ::awd::net::UpdatedMembersList* PacketWrapper::mutable_updated_members_list() {
  // @@protoc_insertion_point(field_mutable:awd.net.PacketWrapper.updated_members_list)
  return _internal_mutable_updated_members_list();
}

// .awd.net.BeginPlayStateRequest begin_play_state_request = 901;
inline bool PacketWrapper::_internal_has_begin_play_state_request() const {
  return packet_case() == kBeginPlayStateRequest;
}
inline bool PacketWrapper::has_begin_play_state_request() const {
  return _internal_has_begin_play_state_request();
}
inline void PacketWrapper::set_has_begin_play_state_request() {
  _oneof_case_[0] = kBeginPlayStateRequest;
}
inline void PacketWrapper::clear_begin_play_state_request() {
  if (_internal_has_begin_play_state_request()) {
    if (GetArena() == nullptr) {
      delete packet_.begin_play_state_request_;
    }
    clear_has_packet();
  }
}
inline ::awd::net::BeginPlayStateRequest* PacketWrapper::release_begin_play_state_request() {
  // @@protoc_insertion_point(field_release:awd.net.PacketWrapper.begin_play_state_request)
  if (_internal_has_begin_play_state_request()) {
    clear_has_packet();
      ::awd::net::BeginPlayStateRequest* temp = packet_.begin_play_state_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    packet_.begin_play_state_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::awd::net::BeginPlayStateRequest& PacketWrapper::_internal_begin_play_state_request() const {
  return _internal_has_begin_play_state_request()
      ? *packet_.begin_play_state_request_
      : reinterpret_cast< ::awd::net::BeginPlayStateRequest&>(::awd::net::_BeginPlayStateRequest_default_instance_);
}
inline const ::awd::net::BeginPlayStateRequest& PacketWrapper::begin_play_state_request() const {
  // @@protoc_insertion_point(field_get:awd.net.PacketWrapper.begin_play_state_request)
  return _internal_begin_play_state_request();
}
inline ::awd::net::BeginPlayStateRequest* PacketWrapper::unsafe_arena_release_begin_play_state_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:awd.net.PacketWrapper.begin_play_state_request)
  if (_internal_has_begin_play_state_request()) {
    clear_has_packet();
    ::awd::net::BeginPlayStateRequest* temp = packet_.begin_play_state_request_;
    packet_.begin_play_state_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketWrapper::unsafe_arena_set_allocated_begin_play_state_request(::awd::net::BeginPlayStateRequest* begin_play_state_request) {
  clear_packet();
  if (begin_play_state_request) {
    set_has_begin_play_state_request();
    packet_.begin_play_state_request_ = begin_play_state_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:awd.net.PacketWrapper.begin_play_state_request)
}
inline ::awd::net::BeginPlayStateRequest* PacketWrapper::_internal_mutable_begin_play_state_request() {
  if (!_internal_has_begin_play_state_request()) {
    clear_packet();
    set_has_begin_play_state_request();
    packet_.begin_play_state_request_ = CreateMaybeMessage< ::awd::net::BeginPlayStateRequest >(GetArena());
  }
  return packet_.begin_play_state_request_;
}
inline ::awd::net::BeginPlayStateRequest* PacketWrapper::mutable_begin_play_state_request() {
  // @@protoc_insertion_point(field_mutable:awd.net.PacketWrapper.begin_play_state_request)
  return _internal_mutable_begin_play_state_request();
}

// .awd.net.BeginPlayStateResponse begin_play_state_response = 902;
inline bool PacketWrapper::_internal_has_begin_play_state_response() const {
  return packet_case() == kBeginPlayStateResponse;
}
inline bool PacketWrapper::has_begin_play_state_response() const {
  return _internal_has_begin_play_state_response();
}
inline void PacketWrapper::set_has_begin_play_state_response() {
  _oneof_case_[0] = kBeginPlayStateResponse;
}
inline void PacketWrapper::clear_begin_play_state_response() {
  if (_internal_has_begin_play_state_response()) {
    if (GetArena() == nullptr) {
      delete packet_.begin_play_state_response_;
    }
    clear_has_packet();
  }
}
inline ::awd::net::BeginPlayStateResponse* PacketWrapper::release_begin_play_state_response() {
  // @@protoc_insertion_point(field_release:awd.net.PacketWrapper.begin_play_state_response)
  if (_internal_has_begin_play_state_response()) {
    clear_has_packet();
      ::awd::net::BeginPlayStateResponse* temp = packet_.begin_play_state_response_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    packet_.begin_play_state_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::awd::net::BeginPlayStateResponse& PacketWrapper::_internal_begin_play_state_response() const {
  return _internal_has_begin_play_state_response()
      ? *packet_.begin_play_state_response_
      : reinterpret_cast< ::awd::net::BeginPlayStateResponse&>(::awd::net::_BeginPlayStateResponse_default_instance_);
}
inline const ::awd::net::BeginPlayStateResponse& PacketWrapper::begin_play_state_response() const {
  // @@protoc_insertion_point(field_get:awd.net.PacketWrapper.begin_play_state_response)
  return _internal_begin_play_state_response();
}
inline ::awd::net::BeginPlayStateResponse* PacketWrapper::unsafe_arena_release_begin_play_state_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:awd.net.PacketWrapper.begin_play_state_response)
  if (_internal_has_begin_play_state_response()) {
    clear_has_packet();
    ::awd::net::BeginPlayStateResponse* temp = packet_.begin_play_state_response_;
    packet_.begin_play_state_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketWrapper::unsafe_arena_set_allocated_begin_play_state_response(::awd::net::BeginPlayStateResponse* begin_play_state_response) {
  clear_packet();
  if (begin_play_state_response) {
    set_has_begin_play_state_response();
    packet_.begin_play_state_response_ = begin_play_state_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:awd.net.PacketWrapper.begin_play_state_response)
}
inline ::awd::net::BeginPlayStateResponse* PacketWrapper::_internal_mutable_begin_play_state_response() {
  if (!_internal_has_begin_play_state_response()) {
    clear_packet();
    set_has_begin_play_state_response();
    packet_.begin_play_state_response_ = CreateMaybeMessage< ::awd::net::BeginPlayStateResponse >(GetArena());
  }
  return packet_.begin_play_state_response_;
}
inline ::awd::net::BeginPlayStateResponse* PacketWrapper::mutable_begin_play_state_response() {
  // @@protoc_insertion_point(field_mutable:awd.net.PacketWrapper.begin_play_state_response)
  return _internal_mutable_begin_play_state_response();
}

// .awd.net.UpdateDimensionCommand update_dimension_command = 1000;
inline bool PacketWrapper::_internal_has_update_dimension_command() const {
  return packet_case() == kUpdateDimensionCommand;
}
inline bool PacketWrapper::has_update_dimension_command() const {
  return _internal_has_update_dimension_command();
}
inline void PacketWrapper::set_has_update_dimension_command() {
  _oneof_case_[0] = kUpdateDimensionCommand;
}
inline void PacketWrapper::clear_update_dimension_command() {
  if (_internal_has_update_dimension_command()) {
    if (GetArena() == nullptr) {
      delete packet_.update_dimension_command_;
    }
    clear_has_packet();
  }
}
inline ::awd::net::UpdateDimensionCommand* PacketWrapper::release_update_dimension_command() {
  // @@protoc_insertion_point(field_release:awd.net.PacketWrapper.update_dimension_command)
  if (_internal_has_update_dimension_command()) {
    clear_has_packet();
      ::awd::net::UpdateDimensionCommand* temp = packet_.update_dimension_command_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    packet_.update_dimension_command_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::awd::net::UpdateDimensionCommand& PacketWrapper::_internal_update_dimension_command() const {
  return _internal_has_update_dimension_command()
      ? *packet_.update_dimension_command_
      : reinterpret_cast< ::awd::net::UpdateDimensionCommand&>(::awd::net::_UpdateDimensionCommand_default_instance_);
}
inline const ::awd::net::UpdateDimensionCommand& PacketWrapper::update_dimension_command() const {
  // @@protoc_insertion_point(field_get:awd.net.PacketWrapper.update_dimension_command)
  return _internal_update_dimension_command();
}
inline ::awd::net::UpdateDimensionCommand* PacketWrapper::unsafe_arena_release_update_dimension_command() {
  // @@protoc_insertion_point(field_unsafe_arena_release:awd.net.PacketWrapper.update_dimension_command)
  if (_internal_has_update_dimension_command()) {
    clear_has_packet();
    ::awd::net::UpdateDimensionCommand* temp = packet_.update_dimension_command_;
    packet_.update_dimension_command_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketWrapper::unsafe_arena_set_allocated_update_dimension_command(::awd::net::UpdateDimensionCommand* update_dimension_command) {
  clear_packet();
  if (update_dimension_command) {
    set_has_update_dimension_command();
    packet_.update_dimension_command_ = update_dimension_command;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:awd.net.PacketWrapper.update_dimension_command)
}
inline ::awd::net::UpdateDimensionCommand* PacketWrapper::_internal_mutable_update_dimension_command() {
  if (!_internal_has_update_dimension_command()) {
    clear_packet();
    set_has_update_dimension_command();
    packet_.update_dimension_command_ = CreateMaybeMessage< ::awd::net::UpdateDimensionCommand >(GetArena());
  }
  return packet_.update_dimension_command_;
}
inline ::awd::net::UpdateDimensionCommand* PacketWrapper::mutable_update_dimension_command() {
  // @@protoc_insertion_point(field_mutable:awd.net.PacketWrapper.update_dimension_command)
  return _internal_mutable_update_dimension_command();
}

// .awd.net.UpdateDimensionComplete update_dimension_complete = 1001;
inline bool PacketWrapper::_internal_has_update_dimension_complete() const {
  return packet_case() == kUpdateDimensionComplete;
}
inline bool PacketWrapper::has_update_dimension_complete() const {
  return _internal_has_update_dimension_complete();
}
inline void PacketWrapper::set_has_update_dimension_complete() {
  _oneof_case_[0] = kUpdateDimensionComplete;
}
inline void PacketWrapper::clear_update_dimension_complete() {
  if (_internal_has_update_dimension_complete()) {
    if (GetArena() == nullptr) {
      delete packet_.update_dimension_complete_;
    }
    clear_has_packet();
  }
}
inline ::awd::net::UpdateDimensionComplete* PacketWrapper::release_update_dimension_complete() {
  // @@protoc_insertion_point(field_release:awd.net.PacketWrapper.update_dimension_complete)
  if (_internal_has_update_dimension_complete()) {
    clear_has_packet();
      ::awd::net::UpdateDimensionComplete* temp = packet_.update_dimension_complete_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    packet_.update_dimension_complete_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::awd::net::UpdateDimensionComplete& PacketWrapper::_internal_update_dimension_complete() const {
  return _internal_has_update_dimension_complete()
      ? *packet_.update_dimension_complete_
      : reinterpret_cast< ::awd::net::UpdateDimensionComplete&>(::awd::net::_UpdateDimensionComplete_default_instance_);
}
inline const ::awd::net::UpdateDimensionComplete& PacketWrapper::update_dimension_complete() const {
  // @@protoc_insertion_point(field_get:awd.net.PacketWrapper.update_dimension_complete)
  return _internal_update_dimension_complete();
}
inline ::awd::net::UpdateDimensionComplete* PacketWrapper::unsafe_arena_release_update_dimension_complete() {
  // @@protoc_insertion_point(field_unsafe_arena_release:awd.net.PacketWrapper.update_dimension_complete)
  if (_internal_has_update_dimension_complete()) {
    clear_has_packet();
    ::awd::net::UpdateDimensionComplete* temp = packet_.update_dimension_complete_;
    packet_.update_dimension_complete_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketWrapper::unsafe_arena_set_allocated_update_dimension_complete(::awd::net::UpdateDimensionComplete* update_dimension_complete) {
  clear_packet();
  if (update_dimension_complete) {
    set_has_update_dimension_complete();
    packet_.update_dimension_complete_ = update_dimension_complete;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:awd.net.PacketWrapper.update_dimension_complete)
}
inline ::awd::net::UpdateDimensionComplete* PacketWrapper::_internal_mutable_update_dimension_complete() {
  if (!_internal_has_update_dimension_complete()) {
    clear_packet();
    set_has_update_dimension_complete();
    packet_.update_dimension_complete_ = CreateMaybeMessage< ::awd::net::UpdateDimensionComplete >(GetArena());
  }
  return packet_.update_dimension_complete_;
}
inline ::awd::net::UpdateDimensionComplete* PacketWrapper::mutable_update_dimension_complete() {
  // @@protoc_insertion_point(field_mutable:awd.net.PacketWrapper.update_dimension_complete)
  return _internal_mutable_update_dimension_complete();
}

// .awd.net.JoinWorldCommand join_world_command = 1002;
inline bool PacketWrapper::_internal_has_join_world_command() const {
  return packet_case() == kJoinWorldCommand;
}
inline bool PacketWrapper::has_join_world_command() const {
  return _internal_has_join_world_command();
}
inline void PacketWrapper::set_has_join_world_command() {
  _oneof_case_[0] = kJoinWorldCommand;
}
inline void PacketWrapper::clear_join_world_command() {
  if (_internal_has_join_world_command()) {
    if (GetArena() == nullptr) {
      delete packet_.join_world_command_;
    }
    clear_has_packet();
  }
}
inline ::awd::net::JoinWorldCommand* PacketWrapper::release_join_world_command() {
  // @@protoc_insertion_point(field_release:awd.net.PacketWrapper.join_world_command)
  if (_internal_has_join_world_command()) {
    clear_has_packet();
      ::awd::net::JoinWorldCommand* temp = packet_.join_world_command_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    packet_.join_world_command_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::awd::net::JoinWorldCommand& PacketWrapper::_internal_join_world_command() const {
  return _internal_has_join_world_command()
      ? *packet_.join_world_command_
      : reinterpret_cast< ::awd::net::JoinWorldCommand&>(::awd::net::_JoinWorldCommand_default_instance_);
}
inline const ::awd::net::JoinWorldCommand& PacketWrapper::join_world_command() const {
  // @@protoc_insertion_point(field_get:awd.net.PacketWrapper.join_world_command)
  return _internal_join_world_command();
}
inline ::awd::net::JoinWorldCommand* PacketWrapper::unsafe_arena_release_join_world_command() {
  // @@protoc_insertion_point(field_unsafe_arena_release:awd.net.PacketWrapper.join_world_command)
  if (_internal_has_join_world_command()) {
    clear_has_packet();
    ::awd::net::JoinWorldCommand* temp = packet_.join_world_command_;
    packet_.join_world_command_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketWrapper::unsafe_arena_set_allocated_join_world_command(::awd::net::JoinWorldCommand* join_world_command) {
  clear_packet();
  if (join_world_command) {
    set_has_join_world_command();
    packet_.join_world_command_ = join_world_command;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:awd.net.PacketWrapper.join_world_command)
}
inline ::awd::net::JoinWorldCommand* PacketWrapper::_internal_mutable_join_world_command() {
  if (!_internal_has_join_world_command()) {
    clear_packet();
    set_has_join_world_command();
    packet_.join_world_command_ = CreateMaybeMessage< ::awd::net::JoinWorldCommand >(GetArena());
  }
  return packet_.join_world_command_;
}
inline ::awd::net::JoinWorldCommand* PacketWrapper::mutable_join_world_command() {
  // @@protoc_insertion_point(field_mutable:awd.net.PacketWrapper.join_world_command)
  return _internal_mutable_join_world_command();
}

// .awd.net.JoinWorldComplete join_world_complete = 1003;
inline bool PacketWrapper::_internal_has_join_world_complete() const {
  return packet_case() == kJoinWorldComplete;
}
inline bool PacketWrapper::has_join_world_complete() const {
  return _internal_has_join_world_complete();
}
inline void PacketWrapper::set_has_join_world_complete() {
  _oneof_case_[0] = kJoinWorldComplete;
}
inline void PacketWrapper::clear_join_world_complete() {
  if (_internal_has_join_world_complete()) {
    if (GetArena() == nullptr) {
      delete packet_.join_world_complete_;
    }
    clear_has_packet();
  }
}
inline ::awd::net::JoinWorldComplete* PacketWrapper::release_join_world_complete() {
  // @@protoc_insertion_point(field_release:awd.net.PacketWrapper.join_world_complete)
  if (_internal_has_join_world_complete()) {
    clear_has_packet();
      ::awd::net::JoinWorldComplete* temp = packet_.join_world_complete_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    packet_.join_world_complete_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::awd::net::JoinWorldComplete& PacketWrapper::_internal_join_world_complete() const {
  return _internal_has_join_world_complete()
      ? *packet_.join_world_complete_
      : reinterpret_cast< ::awd::net::JoinWorldComplete&>(::awd::net::_JoinWorldComplete_default_instance_);
}
inline const ::awd::net::JoinWorldComplete& PacketWrapper::join_world_complete() const {
  // @@protoc_insertion_point(field_get:awd.net.PacketWrapper.join_world_complete)
  return _internal_join_world_complete();
}
inline ::awd::net::JoinWorldComplete* PacketWrapper::unsafe_arena_release_join_world_complete() {
  // @@protoc_insertion_point(field_unsafe_arena_release:awd.net.PacketWrapper.join_world_complete)
  if (_internal_has_join_world_complete()) {
    clear_has_packet();
    ::awd::net::JoinWorldComplete* temp = packet_.join_world_complete_;
    packet_.join_world_complete_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketWrapper::unsafe_arena_set_allocated_join_world_complete(::awd::net::JoinWorldComplete* join_world_complete) {
  clear_packet();
  if (join_world_complete) {
    set_has_join_world_complete();
    packet_.join_world_complete_ = join_world_complete;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:awd.net.PacketWrapper.join_world_complete)
}
inline ::awd::net::JoinWorldComplete* PacketWrapper::_internal_mutable_join_world_complete() {
  if (!_internal_has_join_world_complete()) {
    clear_packet();
    set_has_join_world_complete();
    packet_.join_world_complete_ = CreateMaybeMessage< ::awd::net::JoinWorldComplete >(GetArena());
  }
  return packet_.join_world_complete_;
}
inline ::awd::net::JoinWorldComplete* PacketWrapper::mutable_join_world_complete() {
  // @@protoc_insertion_point(field_mutable:awd.net.PacketWrapper.join_world_complete)
  return _internal_mutable_join_world_complete();
}

// .awd.net.SpawnPlayer spawn_player = 2000;
inline bool PacketWrapper::_internal_has_spawn_player() const {
  return packet_case() == kSpawnPlayer;
}
inline bool PacketWrapper::has_spawn_player() const {
  return _internal_has_spawn_player();
}
inline void PacketWrapper::set_has_spawn_player() {
  _oneof_case_[0] = kSpawnPlayer;
}
inline void PacketWrapper::clear_spawn_player() {
  if (_internal_has_spawn_player()) {
    if (GetArena() == nullptr) {
      delete packet_.spawn_player_;
    }
    clear_has_packet();
  }
}
inline ::awd::net::SpawnPlayer* PacketWrapper::release_spawn_player() {
  // @@protoc_insertion_point(field_release:awd.net.PacketWrapper.spawn_player)
  if (_internal_has_spawn_player()) {
    clear_has_packet();
      ::awd::net::SpawnPlayer* temp = packet_.spawn_player_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    packet_.spawn_player_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::awd::net::SpawnPlayer& PacketWrapper::_internal_spawn_player() const {
  return _internal_has_spawn_player()
      ? *packet_.spawn_player_
      : reinterpret_cast< ::awd::net::SpawnPlayer&>(::awd::net::_SpawnPlayer_default_instance_);
}
inline const ::awd::net::SpawnPlayer& PacketWrapper::spawn_player() const {
  // @@protoc_insertion_point(field_get:awd.net.PacketWrapper.spawn_player)
  return _internal_spawn_player();
}
inline ::awd::net::SpawnPlayer* PacketWrapper::unsafe_arena_release_spawn_player() {
  // @@protoc_insertion_point(field_unsafe_arena_release:awd.net.PacketWrapper.spawn_player)
  if (_internal_has_spawn_player()) {
    clear_has_packet();
    ::awd::net::SpawnPlayer* temp = packet_.spawn_player_;
    packet_.spawn_player_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketWrapper::unsafe_arena_set_allocated_spawn_player(::awd::net::SpawnPlayer* spawn_player) {
  clear_packet();
  if (spawn_player) {
    set_has_spawn_player();
    packet_.spawn_player_ = spawn_player;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:awd.net.PacketWrapper.spawn_player)
}
inline ::awd::net::SpawnPlayer* PacketWrapper::_internal_mutable_spawn_player() {
  if (!_internal_has_spawn_player()) {
    clear_packet();
    set_has_spawn_player();
    packet_.spawn_player_ = CreateMaybeMessage< ::awd::net::SpawnPlayer >(GetArena());
  }
  return packet_.spawn_player_;
}
inline ::awd::net::SpawnPlayer* PacketWrapper::mutable_spawn_player() {
  // @@protoc_insertion_point(field_mutable:awd.net.PacketWrapper.spawn_player)
  return _internal_mutable_spawn_player();
}

// .awd.net.UpdatePlayerInputs update_player_inputs = 3000;
inline bool PacketWrapper::_internal_has_update_player_inputs() const {
  return packet_case() == kUpdatePlayerInputs;
}
inline bool PacketWrapper::has_update_player_inputs() const {
  return _internal_has_update_player_inputs();
}
inline void PacketWrapper::set_has_update_player_inputs() {
  _oneof_case_[0] = kUpdatePlayerInputs;
}
inline void PacketWrapper::clear_update_player_inputs() {
  if (_internal_has_update_player_inputs()) {
    if (GetArena() == nullptr) {
      delete packet_.update_player_inputs_;
    }
    clear_has_packet();
  }
}
inline ::awd::net::UpdatePlayerInputs* PacketWrapper::release_update_player_inputs() {
  // @@protoc_insertion_point(field_release:awd.net.PacketWrapper.update_player_inputs)
  if (_internal_has_update_player_inputs()) {
    clear_has_packet();
      ::awd::net::UpdatePlayerInputs* temp = packet_.update_player_inputs_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    packet_.update_player_inputs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::awd::net::UpdatePlayerInputs& PacketWrapper::_internal_update_player_inputs() const {
  return _internal_has_update_player_inputs()
      ? *packet_.update_player_inputs_
      : reinterpret_cast< ::awd::net::UpdatePlayerInputs&>(::awd::net::_UpdatePlayerInputs_default_instance_);
}
inline const ::awd::net::UpdatePlayerInputs& PacketWrapper::update_player_inputs() const {
  // @@protoc_insertion_point(field_get:awd.net.PacketWrapper.update_player_inputs)
  return _internal_update_player_inputs();
}
inline ::awd::net::UpdatePlayerInputs* PacketWrapper::unsafe_arena_release_update_player_inputs() {
  // @@protoc_insertion_point(field_unsafe_arena_release:awd.net.PacketWrapper.update_player_inputs)
  if (_internal_has_update_player_inputs()) {
    clear_has_packet();
    ::awd::net::UpdatePlayerInputs* temp = packet_.update_player_inputs_;
    packet_.update_player_inputs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketWrapper::unsafe_arena_set_allocated_update_player_inputs(::awd::net::UpdatePlayerInputs* update_player_inputs) {
  clear_packet();
  if (update_player_inputs) {
    set_has_update_player_inputs();
    packet_.update_player_inputs_ = update_player_inputs;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:awd.net.PacketWrapper.update_player_inputs)
}
inline ::awd::net::UpdatePlayerInputs* PacketWrapper::_internal_mutable_update_player_inputs() {
  if (!_internal_has_update_player_inputs()) {
    clear_packet();
    set_has_update_player_inputs();
    packet_.update_player_inputs_ = CreateMaybeMessage< ::awd::net::UpdatePlayerInputs >(GetArena());
  }
  return packet_.update_player_inputs_;
}
inline ::awd::net::UpdatePlayerInputs* PacketWrapper::mutable_update_player_inputs() {
  // @@protoc_insertion_point(field_mutable:awd.net.PacketWrapper.update_player_inputs)
  return _internal_mutable_update_player_inputs();
}

// .awd.net.UpdateEntityPosition update_entity_position = 3001;
inline bool PacketWrapper::_internal_has_update_entity_position() const {
  return packet_case() == kUpdateEntityPosition;
}
inline bool PacketWrapper::has_update_entity_position() const {
  return _internal_has_update_entity_position();
}
inline void PacketWrapper::set_has_update_entity_position() {
  _oneof_case_[0] = kUpdateEntityPosition;
}
inline void PacketWrapper::clear_update_entity_position() {
  if (_internal_has_update_entity_position()) {
    if (GetArena() == nullptr) {
      delete packet_.update_entity_position_;
    }
    clear_has_packet();
  }
}
inline ::awd::net::UpdateEntityPosition* PacketWrapper::release_update_entity_position() {
  // @@protoc_insertion_point(field_release:awd.net.PacketWrapper.update_entity_position)
  if (_internal_has_update_entity_position()) {
    clear_has_packet();
      ::awd::net::UpdateEntityPosition* temp = packet_.update_entity_position_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    packet_.update_entity_position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::awd::net::UpdateEntityPosition& PacketWrapper::_internal_update_entity_position() const {
  return _internal_has_update_entity_position()
      ? *packet_.update_entity_position_
      : reinterpret_cast< ::awd::net::UpdateEntityPosition&>(::awd::net::_UpdateEntityPosition_default_instance_);
}
inline const ::awd::net::UpdateEntityPosition& PacketWrapper::update_entity_position() const {
  // @@protoc_insertion_point(field_get:awd.net.PacketWrapper.update_entity_position)
  return _internal_update_entity_position();
}
inline ::awd::net::UpdateEntityPosition* PacketWrapper::unsafe_arena_release_update_entity_position() {
  // @@protoc_insertion_point(field_unsafe_arena_release:awd.net.PacketWrapper.update_entity_position)
  if (_internal_has_update_entity_position()) {
    clear_has_packet();
    ::awd::net::UpdateEntityPosition* temp = packet_.update_entity_position_;
    packet_.update_entity_position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PacketWrapper::unsafe_arena_set_allocated_update_entity_position(::awd::net::UpdateEntityPosition* update_entity_position) {
  clear_packet();
  if (update_entity_position) {
    set_has_update_entity_position();
    packet_.update_entity_position_ = update_entity_position;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:awd.net.PacketWrapper.update_entity_position)
}
inline ::awd::net::UpdateEntityPosition* PacketWrapper::_internal_mutable_update_entity_position() {
  if (!_internal_has_update_entity_position()) {
    clear_packet();
    set_has_update_entity_position();
    packet_.update_entity_position_ = CreateMaybeMessage< ::awd::net::UpdateEntityPosition >(GetArena());
  }
  return packet_.update_entity_position_;
}
inline ::awd::net::UpdateEntityPosition* PacketWrapper::mutable_update_entity_position() {
  // @@protoc_insertion_point(field_mutable:awd.net.PacketWrapper.update_entity_position)
  return _internal_mutable_update_entity_position();
}

inline bool PacketWrapper::has_packet() const {
  return packet_case() != PACKET_NOT_SET;
}
inline void PacketWrapper::clear_has_packet() {
  _oneof_case_[0] = PACKET_NOT_SET;
}
inline PacketWrapper::PacketCase PacketWrapper::packet_case() const {
  return PacketWrapper::PacketCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace net
}  // namespace awd

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_packets_2eproto
